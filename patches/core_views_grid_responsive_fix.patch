diff --git a/web/core/modules/views/config/schema/views.display.schema.yml b/web/core/modules/views/config/schema/views.display.schema.yml
index 725b0d07..a685e33a 100644
--- a/web/core/modules/views/config/schema/views.display.schema.yml
+++ b/web/core/modules/views/config/schema/views.display.schema.yml
@@ -68,6 +68,10 @@ views.display.page:
         menu_name:
           type: string
           label: 'Menu name'
+    use_admin_theme:
+      type: boolean
+      nullable: true
+      label: 'Use the administration theme when rendering the view page'
 
 views.display.block:
   type: views_display
diff --git a/web/core/modules/views/config/schema/views.field.schema.yml b/web/core/modules/views/config/schema/views.field.schema.yml
index 48b6ef89..d1c3ce67 100644
--- a/web/core/modules/views/config/schema/views.field.schema.yml
+++ b/web/core/modules/views/config/schema/views.field.schema.yml
@@ -12,10 +12,10 @@ views.field.boolean:
       type: string
       label: 'Output format'
     type_custom_true:
-      type: string
+      type: label
       label: 'Custom output for TRUE'
     type_custom_false:
-      type: string
+      type: label
       label: 'Custom output for FALSE'
     not:
       type: boolean
diff --git a/web/core/modules/views/config/schema/views.style.schema.yml b/web/core/modules/views/config/schema/views.style.schema.yml
index f31f67ac..b2d7fdbe 100644
--- a/web/core/modules/views/config/schema/views.style.schema.yml
+++ b/web/core/modules/views/config/schema/views.style.schema.yml
@@ -48,6 +48,23 @@ views.style.grid:
       type: boolean
       label: 'Default views column classes'
 
+views.style.grid_responsive:
+  type: views_style
+  label: 'Grid - Responsive'
+  mapping:
+    columns:
+      type:  integer
+      label: 'Maximum number of columns'
+    cell_min_width:
+      type:  integer
+      label: 'Minimum cell width'
+    grid_gutter:
+      type:  integer
+      label: 'Grid gutter'
+    alignment:
+      type: string
+      label: 'Alignment'
+
 views.style.table:
   type: views_style
   label: 'Table'
diff --git a/web/core/modules/views/js/ajax_view.es6.js b/web/core/modules/views/js/ajax_view.es6.js
deleted file mode 100644
index 9423bb1d..00000000
--- a/web/core/modules/views/js/ajax_view.es6.js
+++ /dev/null
@@ -1,236 +0,0 @@
-/**
- * @file
- * Handles AJAX fetching of views, including filter submission and response.
- */
-
-(function ($, Drupal, drupalSettings) {
-  /**
-   * Attaches the AJAX behavior to exposed filters forms and key View links.
-   *
-   * @type {Drupal~behavior}
-   *
-   * @prop {Drupal~behaviorAttach} attach
-   *   Attaches ajaxView functionality to relevant elements.
-   */
-  Drupal.behaviors.ViewsAjaxView = {};
-  Drupal.behaviors.ViewsAjaxView.attach = function (context, settings) {
-    if (settings && settings.views && settings.views.ajaxViews) {
-      const {
-        views: { ajaxViews },
-      } = settings;
-      Object.keys(ajaxViews || {}).forEach((i) => {
-        Drupal.views.instances[i] = new Drupal.views.ajaxView(ajaxViews[i]);
-      });
-    }
-  };
-  Drupal.behaviors.ViewsAjaxView.detach = (context, settings, trigger) => {
-    if (trigger === 'unload') {
-      if (settings && settings.views && settings.views.ajaxViews) {
-        const {
-          views: { ajaxViews },
-        } = settings;
-        Object.keys(ajaxViews || {}).forEach((i) => {
-          const selector = `.js-view-dom-id-${ajaxViews[i].view_dom_id}`;
-          if ($(selector, context).length) {
-            delete Drupal.views.instances[i];
-            delete settings.views.ajaxViews[i];
-          }
-        });
-      }
-    }
-  };
-
-  /**
-   * @namespace
-   */
-  Drupal.views = {};
-
-  /**
-   * @type {object.<string, Drupal.views.ajaxView>}
-   */
-  Drupal.views.instances = {};
-
-  /**
-   * JavaScript object for a certain view.
-   *
-   * @constructor
-   *
-   * @param {object} settings
-   *   Settings object for the ajax view.
-   * @param {string} settings.view_dom_id
-   *   The DOM id of the view.
-   */
-  Drupal.views.ajaxView = function (settings) {
-    const selector = `.js-view-dom-id-${settings.view_dom_id}`;
-    this.$view = $(selector);
-
-    // Retrieve the path to use for views' ajax.
-    let ajaxPath = drupalSettings.views.ajax_path;
-
-    // If there are multiple views this might've ended up showing up multiple
-    // times.
-    if (ajaxPath.constructor.toString().indexOf('Array') !== -1) {
-      ajaxPath = ajaxPath[0];
-    }
-
-    // Check if there are any GET parameters to send to views.
-    let queryString = window.location.search || '';
-    if (queryString !== '') {
-      // Remove the question mark and Drupal path component if any.
-      queryString = queryString
-        .slice(1)
-        .replace(/q=[^&]+&?|&?render=[^&]+/, '');
-      if (queryString !== '') {
-        // If there is a '?' in ajaxPath, clean url are on and & should be
-        // used to add parameters.
-        queryString = (/\?/.test(ajaxPath) ? '&' : '?') + queryString;
-      }
-    }
-
-    this.element_settings = {
-      url: ajaxPath + queryString,
-      submit: settings,
-      setClick: true,
-      event: 'click',
-      selector,
-      progress: { type: 'fullscreen' },
-    };
-
-    this.settings = settings;
-
-    // Add the ajax to exposed forms.
-    this.$exposed_form = $(
-      `form#views-exposed-form-${settings.view_name.replace(
-        /_/g,
-        '-',
-      )}-${settings.view_display_id.replace(/_/g, '-')}`,
-    );
-    once('exposed-form', this.$exposed_form).forEach(
-      $.proxy(this.attachExposedFormAjax, this),
-    );
-
-    // Add the ajax to pagers.
-    once(
-      'ajax-pager',
-      this.$view
-        // Don't attach to nested views. Doing so would attach multiple behaviors
-        // to a given element.
-        .filter($.proxy(this.filterNestedViews, this)),
-    ).forEach($.proxy(this.attachPagerAjax, this));
-
-    // Add a trigger to update this view specifically. In order to trigger a
-    // refresh use the following code.
-    //
-    // @code
-    // $('.view-name').trigger('RefreshView');
-    // @endcode
-    const selfSettings = $.extend({}, this.element_settings, {
-      event: 'RefreshView',
-      base: this.selector,
-      element: this.$view.get(0),
-    });
-    this.refreshViewAjax = Drupal.ajax(selfSettings);
-  };
-
-  /**
-   * @method
-   */
-  Drupal.views.ajaxView.prototype.attachExposedFormAjax = function () {
-    const that = this;
-    this.exposedFormAjax = [];
-    // Exclude the reset buttons so no AJAX behaviors are bound. Many things
-    // break during the form reset phase if using AJAX.
-    $(
-      'input[type=submit], button[type=submit], input[type=image]',
-      this.$exposed_form,
-    )
-      .not('[data-drupal-selector=edit-reset]')
-      .each(function (index) {
-        const selfSettings = $.extend({}, that.element_settings, {
-          base: $(this).attr('id'),
-          element: this,
-        });
-        that.exposedFormAjax[index] = Drupal.ajax(selfSettings);
-      });
-  };
-
-  /**
-   * @return {bool}
-   *   If there is at least one parent with a view class return false.
-   */
-  Drupal.views.ajaxView.prototype.filterNestedViews = function () {
-    // If there is at least one parent with a view class, this view
-    // is nested (e.g., an attachment). Bail.
-    return !this.$view.parents('.view').length;
-  };
-
-  /**
-   * Attach the ajax behavior to each link.
-   */
-  Drupal.views.ajaxView.prototype.attachPagerAjax = function () {
-    this.$view
-      .find(
-        'ul.js-pager__items > li > a, th.views-field a, .attachment .views-summary a',
-      )
-      .each($.proxy(this.attachPagerLinkAjax, this));
-  };
-
-  /**
-   * Attach the ajax behavior to a singe link.
-   *
-   * @param {string} [id]
-   *   The ID of the link.
-   * @param {HTMLElement} link
-   *   The link element.
-   */
-  Drupal.views.ajaxView.prototype.attachPagerLinkAjax = function (id, link) {
-    const $link = $(link);
-    const viewData = {};
-    const href = $link.attr('href');
-    // Construct an object using the settings defaults and then overriding
-    // with data specific to the link.
-    $.extend(
-      viewData,
-      this.settings,
-      Drupal.Views.parseQueryString(href),
-      // Extract argument data from the URL.
-      Drupal.Views.parseViewArgs(href, this.settings.view_base_path),
-    );
-
-    const selfSettings = $.extend({}, this.element_settings, {
-      submit: viewData,
-      base: false,
-      element: link,
-    });
-    this.pagerAjax = Drupal.ajax(selfSettings);
-  };
-
-  /**
-   * Views scroll to top ajax command.
-   *
-   * @param {Drupal.Ajax} [ajax]
-   *   A {@link Drupal.ajax} object.
-   * @param {object} response
-   *   Ajax response.
-   * @param {string} response.selector
-   *   Selector to use.
-   */
-  Drupal.AjaxCommands.prototype.viewsScrollTop = function (ajax, response) {
-    // Scroll to the top of the view. This will allow users
-    // to browse newly loaded content after e.g. clicking a pager
-    // link.
-    const offset = $(response.selector).offset();
-    // We can't guarantee that the scrollable object should be
-    // the body, as the view could be embedded in something
-    // more complex such as a modal popup. Recurse up the DOM
-    // and scroll the first element that has a non-zero top.
-    let scrollTarget = response.selector;
-    while ($(scrollTarget).scrollTop() === 0 && $(scrollTarget).parent()) {
-      scrollTarget = $(scrollTarget).parent();
-    }
-    // Only scroll upward.
-    if (offset.top - 10 < $(scrollTarget).scrollTop()) {
-      $(scrollTarget).animate({ scrollTop: offset.top - 10 }, 500);
-    }
-  };
-})(jQuery, Drupal, drupalSettings);
diff --git a/web/core/modules/views/js/ajax_view.js b/web/core/modules/views/js/ajax_view.js
index d8242507..8ad62d4d 100644
--- a/web/core/modules/views/js/ajax_view.js
+++ b/web/core/modules/views/js/ajax_view.js
@@ -1,25 +1,36 @@
 /**
-* DO NOT EDIT THIS FILE.
-* See the following change record for more information,
-* https://www.drupal.org/node/2815083
-* @preserve
-**/
+ * @file
+ * Handles AJAX fetching of views, including filter submission and response.
+ */
+
 (function ($, Drupal, drupalSettings) {
+  /**
+   * Attaches the AJAX behavior to exposed filters forms and key View links.
+   *
+   * @type {Drupal~behavior}
+   *
+   * @prop {Drupal~behaviorAttach} attach
+   *   Attaches ajaxView functionality to relevant elements.
+   */
   Drupal.behaviors.ViewsAjaxView = {};
   Drupal.behaviors.ViewsAjaxView.attach = function (context, settings) {
     if (settings && settings.views && settings.views.ajaxViews) {
-      var ajaxViews = settings.views.ajaxViews;
-      Object.keys(ajaxViews || {}).forEach(function (i) {
+      const {
+        views: { ajaxViews },
+      } = settings;
+      Object.keys(ajaxViews || {}).forEach((i) => {
         Drupal.views.instances[i] = new Drupal.views.ajaxView(ajaxViews[i]);
       });
     }
   };
-  Drupal.behaviors.ViewsAjaxView.detach = function (context, settings, trigger) {
+  Drupal.behaviors.ViewsAjaxView.detach = (context, settings, trigger) => {
     if (trigger === 'unload') {
       if (settings && settings.views && settings.views.ajaxViews) {
-        var ajaxViews = settings.views.ajaxViews;
-        Object.keys(ajaxViews || {}).forEach(function (i) {
-          var selector = ".js-view-dom-id-".concat(ajaxViews[i].view_dom_id);
+        const {
+          views: { ajaxViews },
+        } = settings;
+        Object.keys(ajaxViews || {}).forEach((i) => {
+          const selector = `.js-view-dom-id-${ajaxViews[i].view_dom_id}`;
           if ($(selector, context).length) {
             delete Drupal.views.instances[i];
             delete settings.views.ajaxViews[i];
@@ -28,82 +39,191 @@
       }
     }
   };
+
+  /**
+   * @namespace
+   */
   Drupal.views = {};
+
+  /**
+   * @type {object.<string, Drupal.views.ajaxView>}
+   */
   Drupal.views.instances = {};
+
+  /**
+   * JavaScript object for a certain view.
+   *
+   * @constructor
+   *
+   * @param {object} settings
+   *   Settings object for the ajax view.
+   * @param {string} settings.view_dom_id
+   *   The DOM id of the view.
+   */
   Drupal.views.ajaxView = function (settings) {
-    var selector = ".js-view-dom-id-".concat(settings.view_dom_id);
+    const selector = `.js-view-dom-id-${settings.view_dom_id}`;
     this.$view = $(selector);
-    var ajaxPath = drupalSettings.views.ajax_path;
+
+    // Retrieve the path to use for views' ajax.
+    let ajaxPath = drupalSettings.views.ajax_path;
+
+    // If there are multiple views this might've ended up showing up multiple
+    // times.
     if (ajaxPath.constructor.toString().indexOf('Array') !== -1) {
       ajaxPath = ajaxPath[0];
     }
-    var queryString = window.location.search || '';
+
+    // Check if there are any GET parameters to send to views.
+    let queryString = window.location.search || '';
     if (queryString !== '') {
-      queryString = queryString.slice(1).replace(/q=[^&]+&?|&?render=[^&]+/, '');
+      // Remove the question mark and Drupal path component if any.
+      queryString = queryString
+        .slice(1)
+        .replace(/q=[^&]+&?|&?render=[^&]+/, '');
       if (queryString !== '') {
+        // If there is a '?' in ajaxPath, clean URL are on and & should be
+        // used to add parameters.
         queryString = (/\?/.test(ajaxPath) ? '&' : '?') + queryString;
       }
     }
+
     this.element_settings = {
       url: ajaxPath + queryString,
       submit: settings,
+      httpMethod: 'GET',
       setClick: true,
       event: 'click',
-      selector: selector,
-      progress: {
-        type: 'fullscreen'
-      }
+      selector,
+      progress: { type: 'fullscreen' },
     };
+
     this.settings = settings;
-    this.$exposed_form = $("form#views-exposed-form-".concat(settings.view_name.replace(/_/g, '-'), "-").concat(settings.view_display_id.replace(/_/g, '-')));
-    once('exposed-form', this.$exposed_form).forEach($.proxy(this.attachExposedFormAjax, this));
-    once('ajax-pager', this.$view.filter($.proxy(this.filterNestedViews, this))).forEach($.proxy(this.attachPagerAjax, this));
-    var selfSettings = $.extend({}, this.element_settings, {
+
+    // Add the ajax to exposed forms.
+    this.$exposed_form = $(
+      `form#views-exposed-form-${settings.view_name.replace(
+        /_/g,
+        '-',
+      )}-${settings.view_display_id.replace(/_/g, '-')}`,
+    );
+    once('exposed-form', this.$exposed_form).forEach(
+      $.proxy(this.attachExposedFormAjax, this),
+    );
+
+    // Add the ajax to pagers.
+    once(
+      'ajax-pager',
+      this.$view
+        // Don't attach to nested views. Doing so would attach multiple behaviors
+        // to a given element.
+        .filter($.proxy(this.filterNestedViews, this)),
+    ).forEach($.proxy(this.attachPagerAjax, this));
+
+    // Add a trigger to update this view specifically. In order to trigger a
+    // refresh use the following code.
+    //
+    // @code
+    // $('.view-name').trigger('RefreshView');
+    // @endcode
+    const selfSettings = $.extend({}, this.element_settings, {
       event: 'RefreshView',
       base: this.selector,
-      element: this.$view.get(0)
+      httpMethod: 'GET',
+      element: this.$view.get(0),
     });
     this.refreshViewAjax = Drupal.ajax(selfSettings);
   };
+
+  /**
+   * @method
+   */
   Drupal.views.ajaxView.prototype.attachExposedFormAjax = function () {
-    var that = this;
+    const that = this;
     this.exposedFormAjax = [];
-    $('input[type=submit], button[type=submit], input[type=image]', this.$exposed_form).not('[data-drupal-selector=edit-reset]').each(function (index) {
-      var selfSettings = $.extend({}, that.element_settings, {
-        base: $(this).attr('id'),
-        element: this
+    // Exclude the reset buttons so no AJAX behaviors are bound. Many things
+    // break during the form reset phase if using AJAX.
+    $(
+      'input[type=submit], button[type=submit], input[type=image]',
+      this.$exposed_form,
+    )
+      .not('[data-drupal-selector=edit-reset]')
+      .each(function (index) {
+        const selfSettings = $.extend({}, that.element_settings, {
+          base: $(this).attr('id'),
+          element: this,
+        });
+        that.exposedFormAjax[index] = Drupal.ajax(selfSettings);
       });
-      that.exposedFormAjax[index] = Drupal.ajax(selfSettings);
-    });
   };
+
+  /**
+   * @return {boolean}
+   *   If there is at least one parent with a view class return false.
+   */
   Drupal.views.ajaxView.prototype.filterNestedViews = function () {
+    // If there is at least one parent with a view class, this view
+    // is nested (e.g., an attachment). Bail.
     return !this.$view.parents('.view').length;
   };
+
+  /**
+   * Attach the ajax behavior to each link.
+   */
   Drupal.views.ajaxView.prototype.attachPagerAjax = function () {
-    this.$view.find('ul.js-pager__items > li > a, th.views-field a, .attachment .views-summary a').each($.proxy(this.attachPagerLinkAjax, this));
+    this.$view
+      .find(
+        '.js-pager__items a, th.views-field a, .attachment .views-summary a',
+      )
+      .each($.proxy(this.attachPagerLinkAjax, this));
   };
+
+  /**
+   * Attach the ajax behavior to a singe link.
+   *
+   * @param {string} [id]
+   *   The ID of the link.
+   * @param {HTMLElement} link
+   *   The link element.
+   */
   Drupal.views.ajaxView.prototype.attachPagerLinkAjax = function (id, link) {
-    var $link = $(link);
-    var viewData = {};
-    var href = $link.attr('href');
-    $.extend(viewData, this.settings, Drupal.Views.parseQueryString(href), Drupal.Views.parseViewArgs(href, this.settings.view_base_path));
-    var selfSettings = $.extend({}, this.element_settings, {
+    const $link = $(link);
+    const viewData = {};
+    const href = $link.attr('href');
+    // Construct an object using the settings defaults and then overriding
+    // with data specific to the link.
+    $.extend(
+      viewData,
+      this.settings,
+      Drupal.Views.parseQueryString(href),
+      // Extract argument data from the URL.
+      Drupal.Views.parseViewArgs(href, this.settings.view_base_path),
+    );
+
+    const selfSettings = $.extend({}, this.element_settings, {
       submit: viewData,
       base: false,
-      element: link
+      element: link,
+      httpMethod: 'GET',
     });
     this.pagerAjax = Drupal.ajax(selfSettings);
   };
+
+  /**
+   * Views scroll to top ajax command.
+   *
+   * @param {Drupal.Ajax} [ajax]
+   *   A {@link Drupal.ajax} object.
+   * @param {object} response
+   *   Ajax response.
+   * @param {string} response.selector
+   *   Selector to use.
+   *
+   * @deprecated in drupal:10.1.0 and is removed from drupal:11.0.0.
+   *   Use Drupal.AjaxCommands.prototype.scrollTop().
+   *
+   * @see https://www.drupal.org/node/3344141
+   */
   Drupal.AjaxCommands.prototype.viewsScrollTop = function (ajax, response) {
-    var offset = $(response.selector).offset();
-    var scrollTarget = response.selector;
-    while ($(scrollTarget).scrollTop() === 0 && $(scrollTarget).parent()) {
-      scrollTarget = $(scrollTarget).parent();
-    }
-    if (offset.top - 10 < $(scrollTarget).scrollTop()) {
-      $(scrollTarget).animate({
-        scrollTop: offset.top - 10
-      }, 500);
-    }
+    Drupal.AjaxCommands.prototype.scrollTop(ajax, response);
   };
-})(jQuery, Drupal, drupalSettings);
\ No newline at end of file
+})(jQuery, Drupal, drupalSettings);
diff --git a/web/core/modules/views/js/base.es6.js b/web/core/modules/views/js/base.es6.js
deleted file mode 100644
index 5838e64b..00000000
--- a/web/core/modules/views/js/base.es6.js
+++ /dev/null
@@ -1,111 +0,0 @@
-/**
- * @file
- * Some basic behaviors and utility functions for Views.
- */
-
-(function ($, Drupal, drupalSettings) {
-  /**
-   * @namespace
-   */
-  Drupal.Views = {};
-
-  /**
-   * Helper function to parse a querystring.
-   *
-   * @param {string} query
-   *   The querystring to parse.
-   *
-   * @return {object}
-   *   A map of query parameters.
-   */
-  Drupal.Views.parseQueryString = function (query) {
-    const args = {};
-    const pos = query.indexOf('?');
-    if (pos !== -1) {
-      query = query.substring(pos + 1);
-    }
-    let pair;
-    const pairs = query.split('&');
-    for (let i = 0; i < pairs.length; i++) {
-      pair = pairs[i].split('=');
-      // Ignore the 'q' path argument, if present.
-      if (pair[0] !== 'q' && pair[1]) {
-        args[decodeURIComponent(pair[0].replace(/\+/g, ' '))] =
-          decodeURIComponent(pair[1].replace(/\+/g, ' '));
-      }
-    }
-    return args;
-  };
-
-  /**
-   * Helper function to return a view's arguments based on a path.
-   *
-   * @param {string} href
-   *   The href to check.
-   * @param {string} viewPath
-   *   The views path to check.
-   *
-   * @return {object}
-   *   An object containing `view_args` and `view_path`.
-   */
-  Drupal.Views.parseViewArgs = function (href, viewPath) {
-    const returnObj = {};
-    const path = Drupal.Views.getPath(href);
-    // Get viewPath url without baseUrl portion.
-    const viewHref = Drupal.url(viewPath).substring(
-      drupalSettings.path.baseUrl.length,
-    );
-    // Ensure we have a correct path.
-    if (viewHref && path.substring(0, viewHref.length + 1) === `${viewHref}/`) {
-      returnObj.view_args = decodeURIComponent(
-        path.substring(viewHref.length + 1, path.length),
-      );
-      returnObj.view_path = path;
-    }
-    return returnObj;
-  };
-
-  /**
-   * Strip off the protocol plus domain from an href.
-   *
-   * @param {string} href
-   *   The href to strip.
-   *
-   * @return {string}
-   *   The href without the protocol and domain.
-   */
-  Drupal.Views.pathPortion = function (href) {
-    // Remove e.g. http://example.com if present.
-    const protocol = window.location.protocol;
-    if (href.substring(0, protocol.length) === protocol) {
-      // 2 is the length of the '//' that normally follows the protocol.
-      href = href.substring(href.indexOf('/', protocol.length + 2));
-    }
-    return href;
-  };
-
-  /**
-   * Return the Drupal path portion of an href.
-   *
-   * @param {string} href
-   *   The href to check.
-   *
-   * @return {string}
-   *   An internal path.
-   */
-  Drupal.Views.getPath = function (href) {
-    href = Drupal.Views.pathPortion(href);
-    href = href.substring(drupalSettings.path.baseUrl.length, href.length);
-    // 3 is the length of the '?q=' added to the url without clean urls.
-    if (href.substring(0, 3) === '?q=') {
-      href = href.substring(3, href.length);
-    }
-    const chars = ['#', '?', '&'];
-    for (let i = 0; i < chars.length; i++) {
-      if (href.indexOf(chars[i]) > -1) {
-        href = href.substr(0, href.indexOf(chars[i]));
-      }
-    }
-    return href;
-  };
-})(jQuery, Drupal, drupalSettings);
diff --git a/web/core/modules/views/js/base.js b/web/core/modules/views/js/base.js
index d1361e3e..050a3b67 100644
--- a/web/core/modules/views/js/base.js
+++ b/web/core/modules/views/js/base.js
@@ -1,56 +1,115 @@
 /**
-* DO NOT EDIT THIS FILE.
-* See the following change record for more information,
-* https://www.drupal.org/node/2815083
-* @preserve
-**/
+ * @file
+ * Some basic behaviors and utility functions for Views.
+ */
+
 (function ($, Drupal, drupalSettings) {
+  /**
+   * @namespace
+   */
   Drupal.Views = {};
+
+  /**
+   * Helper function to parse a querystring.
+   *
+   * @param {string} query
+   *   The querystring to parse.
+   *
+   * @return {object}
+   *   A map of query parameters.
+   */
   Drupal.Views.parseQueryString = function (query) {
-    var args = {};
-    var pos = query.indexOf('?');
+    const args = {};
+    const pos = query.indexOf('?');
     if (pos !== -1) {
       query = query.substring(pos + 1);
     }
-    var pair;
-    var pairs = query.split('&');
-    for (var i = 0; i < pairs.length; i++) {
+    let pair;
+    const pairs = query.split('&');
+    for (let i = 0; i < pairs.length; i++) {
       pair = pairs[i].split('=');
-      if (pair[0] !== 'q' && pair[1]) {
-        args[decodeURIComponent(pair[0].replace(/\+/g, ' '))] = decodeURIComponent(pair[1].replace(/\+/g, ' '));
+      // Ignore the 'q' path argument, if present.
+      if (pair[0] !== 'q') {
+        if (pair[1]) {
+          args[decodeURIComponent(pair[0].replace(/\+/g, ' '))] =
+            decodeURIComponent(pair[1].replace(/\+/g, ' '));
+        } else {
+          args[decodeURIComponent(pair[0].replace(/\+/g, ' '))] = '';
+        }
       }
     }
     return args;
   };
+
+  /**
+   * Helper function to return a view's arguments based on a path.
+   *
+   * @param {string} href
+   *   The href to check.
+   * @param {string} viewPath
+   *   The views path to check.
+   *
+   * @return {object}
+   *   An object containing `view_args` and `view_path`.
+   */
   Drupal.Views.parseViewArgs = function (href, viewPath) {
-    var returnObj = {};
-    var path = Drupal.Views.getPath(href);
-    var viewHref = Drupal.url(viewPath).substring(drupalSettings.path.baseUrl.length);
-    if (viewHref && path.substring(0, viewHref.length + 1) === "".concat(viewHref, "/")) {
-      returnObj.view_args = decodeURIComponent(path.substring(viewHref.length + 1, path.length));
+    const returnObj = {};
+    const path = Drupal.Views.getPath(href);
+    // Get viewPath URL without baseUrl portion.
+    const viewHref = Drupal.url(viewPath).substring(
+      drupalSettings.path.baseUrl.length,
+    );
+    // Ensure we have a correct path.
+    if (viewHref && path.substring(0, viewHref.length + 1) === `${viewHref}/`) {
+      returnObj.view_args = decodeURIComponent(
+        path.substring(viewHref.length + 1, path.length),
+      );
       returnObj.view_path = path;
     }
     return returnObj;
   };
+
+  /**
+   * Strip off the protocol plus domain from an href.
+   *
+   * @param {string} href
+   *   The href to strip.
+   *
+   * @return {string}
+   *   The href without the protocol and domain.
+   */
   Drupal.Views.pathPortion = function (href) {
-    var protocol = window.location.protocol;
+    // Remove e.g. http://example.com if present.
+    const protocol = window.location.protocol;
     if (href.substring(0, protocol.length) === protocol) {
+      // 2 is the length of the '//' that normally follows the protocol.
       href = href.substring(href.indexOf('/', protocol.length + 2));
     }
     return href;
   };
+
+  /**
+   * Return the Drupal path portion of an href.
+   *
+   * @param {string} href
+   *   The href to check.
+   *
+   * @return {string}
+   *   An internal path.
+   */
   Drupal.Views.getPath = function (href) {
     href = Drupal.Views.pathPortion(href);
     href = href.substring(drupalSettings.path.baseUrl.length, href.length);
+    // 3 is the length of the '?q=' added to the URL without clean URLs.
     if (href.substring(0, 3) === '?q=') {
       href = href.substring(3, href.length);
     }
-    var chars = ['#', '?', '&'];
-    for (var i = 0; i < chars.length; i++) {
+    const chars = ['#', '?', '&'];
+    for (let i = 0; i < chars.length; i++) {
       if (href.indexOf(chars[i]) > -1) {
         href = href.substr(0, href.indexOf(chars[i]));
       }
     }
     return href;
   };
-})(jQuery, Drupal, drupalSettings);
\ No newline at end of file
+})(jQuery, Drupal, drupalSettings);
diff --git a/web/core/modules/views/src/Ajax/ScrollTopCommand.php b/web/core/modules/views/src/Ajax/ScrollTopCommand.php
index bf2db4e7..33ae1dd0 100644
--- a/web/core/modules/views/src/Ajax/ScrollTopCommand.php
+++ b/web/core/modules/views/src/Ajax/ScrollTopCommand.php
@@ -2,40 +2,17 @@
 
 namespace Drupal\views\Ajax;
 
-use Drupal\Core\Ajax\CommandInterface;
+use Drupal\Core\Ajax\ScrollTopCommand as CoreScrollTopCommand;
 
 /**
  * Provides an AJAX command for scrolling to the top of an element.
  *
  * This command is implemented in Drupal.AjaxCommands.prototype.viewsScrollTop.
+ *
+ * @deprecated in drupal:10.1.0 and is removed from drupal:11.0.0.
+ *   Use \Drupal\Core\Ajax\ScrollTopCommand
+ *
+ * @see https://www.drupal.org/node/3344141
  */
-class ScrollTopCommand implements CommandInterface {
-
-  /**
-   * A CSS selector string.
-   *
-   * @var string
-   */
-  protected $selector;
-
-  /**
-   * Constructs a \Drupal\views\Ajax\ScrollTopCommand object.
-   *
-   * @param string $selector
-   *   A CSS selector.
-   */
-  public function __construct($selector) {
-    $this->selector = $selector;
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function render() {
-    return [
-      'command' => 'viewsScrollTop',
-      'selector' => $this->selector,
-    ];
-  }
-
+class ScrollTopCommand extends CoreScrollTopCommand {
 }
diff --git a/web/core/modules/views/src/Controller/ViewAjaxController.php b/web/core/modules/views/src/Controller/ViewAjaxController.php
index fd1da93f..37bd261b 100644
--- a/web/core/modules/views/src/Controller/ViewAjaxController.php
+++ b/web/core/modules/views/src/Controller/ViewAjaxController.php
@@ -12,11 +12,9 @@
 use Drupal\Core\EventSubscriber\MainContentViewSubscriber;
 use Drupal\Core\Form\FormBuilderInterface;
 use Drupal\Core\Path\CurrentPathStack;
-use Drupal\Core\Render\BubbleableMetadata;
-use Drupal\Core\Render\RenderContext;
 use Drupal\Core\Render\RendererInterface;
 use Drupal\Core\Routing\RedirectDestinationInterface;
-use Drupal\views\Ajax\ScrollTopCommand;
+use Drupal\Core\Ajax\ScrollTopCommand;
 use Drupal\views\Ajax\ViewAjaxResponse;
 use Drupal\views\ViewExecutableFactory;
 use Symfony\Component\DependencyInjection\ContainerInterface;
@@ -112,10 +110,10 @@ public static function create(ContainerInterface $container) {
    *   Thrown when the view was not found.
    */
   public function ajaxView(Request $request) {
-    $name = $request->request->get('view_name');
-    $display_id = $request->request->get('view_display_id');
+    $name = $request->get('view_name');
+    $display_id = $request->get('view_display_id');
     if (isset($name) && isset($display_id)) {
-      $args = $request->request->get('view_args', '');
+      $args = $request->get('view_args', '');
       $args = $args !== '' ? explode('/', Html::decodeEntities($args)) : [];
 
       // Arguments can be empty, make sure they are passed on as NULL so that
@@ -124,10 +122,10 @@ public function ajaxView(Request $request) {
         return ($arg == '' ? NULL : $arg);
       }, $args);
 
-      $path = $request->request->get('view_path');
-      $dom_id = $request->request->get('view_dom_id');
+      $path = $request->get('view_path');
+      $dom_id = $request->get('view_dom_id');
       $dom_id = isset($dom_id) ? preg_replace('/[^a-zA-Z0-9_-]+/', '-', $dom_id) : NULL;
-      $pager_element = $request->request->get('pager_element');
+      $pager_element = $request->get('pager_element');
       $pager_element = isset($pager_element) ? intval($pager_element) : NULL;
 
       $response = new ViewAjaxResponse();
@@ -164,18 +162,21 @@ public function ajaxView(Request $request) {
           $this->currentPath->setPath('/' . ltrim($path, '/'), $request);
         }
 
-        // Add all POST data, because AJAX is always a post and many things,
+        // Create a clone of the request object to avoid mutating the request
+        // object stored in the request stack.
+        $request_clone = clone $request;
+
+        // Add all POST data, because AJAX is sometimes a POST and many things,
         // such as tablesorts, exposed filters and paging assume GET.
-        $request_all = $request->request->all();
-        unset($request_all['ajax_page_state']);
-        $query_all = $request->query->all();
-        $request->query->replace($request_all + $query_all);
+        $param_union = $request_clone->request->all() + $request_clone->query->all();
+        unset($param_union['ajax_page_state']);
+        $request_clone->query->replace($param_union);
 
         // Overwrite the destination.
         // @see the redirect.destination service.
-        $origin_destination = $path;
+        $origin_destination = $request_clone->getBasePath() . '/' . ltrim($path ?? '/', '/');
 
-        $used_query_parameters = $request->query->all();
+        $used_query_parameters = $request_clone->query->all();
         $query = UrlHelper::buildQuery($used_query_parameters);
         if ($query != '') {
           $origin_destination .= '?' . $query;
@@ -190,16 +191,7 @@ public function ajaxView(Request $request) {
         // Reuse the same DOM id so it matches that in drupalSettings.
         $view->dom_id = $dom_id;
 
-        $context = new RenderContext();
-        $preview = $this->renderer->executeInRenderContext($context, function () use ($view, $display_id, $args) {
-          return $view->preview($display_id, $args);
-        });
-        if (!$context->isEmpty()) {
-          $bubbleable_metadata = $context->pop();
-          BubbleableMetadata::createFromRenderArray($preview)
-            ->merge($bubbleable_metadata)
-            ->applyTo($preview);
-        }
+        $preview = $view->preview($display_id, $args);
         $response->addCommand(new ReplaceCommand(".js-view-dom-id-$dom_id", $preview));
         $response->addCommand(new PrependCommand(".js-view-dom-id-$dom_id", ['#type' => 'status_messages']));
 
diff --git a/web/core/modules/views/src/Entity/Render/DefaultLanguageRenderer.php b/web/core/modules/views/src/Entity/Render/DefaultLanguageRenderer.php
index 11dbb4ab..15811aa2 100644
--- a/web/core/modules/views/src/Entity/Render/DefaultLanguageRenderer.php
+++ b/web/core/modules/views/src/Entity/Render/DefaultLanguageRenderer.php
@@ -16,4 +16,12 @@ public function getLangcode(ResultRow $row) {
     return $row->_entity->getUntranslated()->language()->getId();
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public function getLangcodeByRelationship(ResultRow $row, string $relationship = 'none'): string {
+    $entity = $this->getEntity($row, $relationship);
+    return $entity->getUntranslated()->language()->getId();
+  }
+
 }
diff --git a/web/core/modules/views/src/Entity/Render/EntityFieldRenderer.php b/web/core/modules/views/src/Entity/Render/EntityFieldRenderer.php
index 7002c734..5074969a 100644
--- a/web/core/modules/views/src/Entity/Render/EntityFieldRenderer.php
+++ b/web/core/modules/views/src/Entity/Render/EntityFieldRenderer.php
@@ -218,7 +218,8 @@ protected function buildFields(array $values) {
       $field = $this->view->field[current($field_ids)];
       foreach ($values as $result_row) {
         if ($entity = $field->getEntity($result_row)) {
-          $entities_by_bundles[$entity->bundle()][$result_row->index] = $this->getEntityTranslation($entity, $result_row);
+          $relationship = isset($field->options['relationship']) ? $field->options['relationship'] : 'none';
+          $entities_by_bundles[$entity->bundle()][$result_row->index] = $this->getEntityTranslationByRelationship($entity, $result_row, $relationship);
         }
       }
 
diff --git a/web/core/modules/views/src/Entity/Render/EntityTranslationRenderTrait.php b/web/core/modules/views/src/Entity/Render/EntityTranslationRenderTrait.php
index a4c64467..f858c071 100644
--- a/web/core/modules/views/src/Entity/Render/EntityTranslationRenderTrait.php
+++ b/web/core/modules/views/src/Entity/Render/EntityTranslationRenderTrait.php
@@ -34,23 +34,22 @@ protected function getEntityTranslationRenderer() {
         '***LANGUAGE_entity_translation***' => 'TranslationLanguageRenderer',
         '***LANGUAGE_entity_default***' => 'DefaultLanguageRenderer',
       ];
+      $entity_type = $this->getEntityTypeManager()->getDefinition($this->getEntityTypeId());
       if (isset($dynamic_renderers[$rendering_language])) {
         // Dynamic language set based on result rows or instance defaults.
-        $renderer = $dynamic_renderers[$rendering_language];
+        $class = '\Drupal\views\Entity\Render\\' . $dynamic_renderers[$rendering_language];
+        $this->entityTranslationRenderer = new $class($view, $this->getLanguageManager(), $entity_type);
       }
       else {
-        if (strpos($rendering_language, '***LANGUAGE_') !== FALSE) {
+        if (str_contains($rendering_language, '***LANGUAGE_')) {
           $langcode = PluginBase::queryLanguageSubstitutions()[$rendering_language];
         }
         else {
           // Specific langcode set.
           $langcode = $rendering_language;
         }
-        $renderer = 'ConfigurableLanguageRenderer';
+        $this->entityTranslationRenderer = new ConfigurableLanguageRenderer($view, $this->getLanguageManager(), $entity_type, $langcode);
       }
-      $class = '\Drupal\views\Entity\Render\\' . $renderer;
-      $entity_type = $this->getEntityTypeManager()->getDefinition($this->getEntityTypeId());
-      $this->entityTranslationRenderer = new $class($view, $this->getLanguageManager(), $entity_type, $langcode);
     }
     return $this->entityTranslationRenderer;
   }
@@ -65,18 +64,41 @@ protected function getEntityTranslationRenderer() {
    *
    * @return \Drupal\Core\Entity\FieldableEntityInterface
    *   The entity translation object for the specified row.
+   *
+   * @deprecated in drupal:10.1.0 and is removed from drupal:11.0.0. Use
+   *   \Drupal\views\Entity\Render\EntityTranslationRenderTrait::getEntityTranslationByRelationship
+   *   instead.
+   *
+   * @see https://www.drupal.org/node/3311862
    */
   public function getEntityTranslation(EntityInterface $entity, ResultRow $row) {
+    @trigger_error('\Drupal\views\Entity\Render\EntityTranslationRenderTrait::getEntityTranslation is deprecated in drupal:10.1.0 and is removed from drupal:11.0.0. Use \Drupal\views\Entity\Render\EntityTranslationRenderTrait::getEntityTranslationByRelationship instead. See https://www.drupal.org/node/3311862', E_USER_DEPRECATED);
+    return $this->getEntityTranslationByRelationship($entity, $row);
+  }
+
+  /**
+   * Returns the entity translation matching the configured row language.
+   *
+   * @param \Drupal\Core\Entity\EntityInterface $entity
+   *   The entity object the field value being processed is attached to.
+   * @param \Drupal\views\ResultRow $row
+   *   The result row the field value being processed belongs to.
+   * @param string $relationship
+   *   The relationship to be used, or 'none' by default.
+   *
+   * @return \Drupal\Core\Entity\EntityInterface
+   *   The entity translation object for the specified row.
+   */
+  public function getEntityTranslationByRelationship(EntityInterface $entity, ResultRow $row, string $relationship = 'none'): EntityInterface {
     // We assume the same language should be used for all entity fields
     // belonging to a single row, even if they are attached to different entity
     // types. Below we apply language fallback to ensure a valid value is always
     // picked.
-    $translation = $entity;
     if ($entity instanceof TranslatableInterface && count($entity->getTranslationLanguages()) > 1) {
-      $langcode = $this->getEntityTranslationRenderer()->getLangcode($row);
+      $langcode = $this->getEntityTranslationRenderer()->getLangcodeByRelationship($row, $relationship);
       $translation = $this->getEntityRepository()->getTranslationFromContext($entity, $langcode);
     }
-    return $translation;
+    return $translation ?? $entity;
   }
 
   /**
diff --git a/web/core/modules/views/src/Entity/Render/EntityTranslationRendererBase.php b/web/core/modules/views/src/Entity/Render/EntityTranslationRendererBase.php
index 91cf2325..0db4f0eb 100644
--- a/web/core/modules/views/src/Entity/Render/EntityTranslationRendererBase.php
+++ b/web/core/modules/views/src/Entity/Render/EntityTranslationRendererBase.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\views\Entity\Render;
 
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\views\Plugin\views\query\QueryPluginBase;
 use Drupal\views\ResultRow;
 
@@ -21,6 +22,22 @@ abstract class EntityTranslationRendererBase extends RendererBase {
    */
   abstract public function getLangcode(ResultRow $row);
 
+  /**
+   * Returns the language code associated with the given row.
+   *
+   * @param \Drupal\views\ResultRow $row
+   *   The result row.
+   * @param string $relationship
+   *   The relationship to be used.
+   *
+   * @return string
+   */
+  public function getLangcodeByRelationship(ResultRow $row, string $relationship): string {
+    // This method needs to be overridden if the relationship is needed in the
+    // implementation of getLangcode().
+    return $this->getLangcode($row);
+  }
+
   /**
    * {@inheritdoc}
    */
@@ -31,15 +48,25 @@ public function query(QueryPluginBase $query, $relationship = NULL) {
    * {@inheritdoc}
    */
   public function preRender(array $result) {
+    $this->preRenderByRelationship($result, 'none');
+  }
+
+  /**
+   * Runs before each entity is rendered if a relationship is needed.
+   *
+   * @param \Drupal\views\ResultRow[] $result
+   *   The full array of results from the query.
+   * @param string $relationship
+   *   The relationship to be used.
+   */
+  public function preRenderByRelationship(array $result, string $relationship): void {
     $view_builder = \Drupal::entityTypeManager()->getViewBuilder($this->entityType->id());
 
-    /** @var \Drupal\views\ResultRow $row */
     foreach ($result as $row) {
-      // @todo Take relationships into account.
-      //   See https://www.drupal.org/node/2457999.
-      $entity = $row->_entity;
-      $entity->view = $this->view;
-      $this->build[$entity->id()] = $view_builder->view($entity, $this->view->rowPlugin->options['view_mode'], $this->getLangcode($row));
+      if ($entity = $this->getEntity($row, $relationship)) {
+        $entity->view = $this->view;
+        $this->build[$entity->id()] = $view_builder->view($entity, $this->view->rowPlugin->options['view_mode'], $this->getLangcodeByRelationship($row, $relationship));
+      }
     }
   }
 
@@ -47,8 +74,48 @@ public function preRender(array $result) {
    * {@inheritdoc}
    */
   public function render(ResultRow $row) {
-    $entity_id = $row->_entity->id();
-    return $this->build[$entity_id];
+    return $this->renderByRelationship($row, 'none');
+  }
+
+  /**
+   * Renders entity data.
+   *
+   * @param \Drupal\views\ResultRow $row
+   *   A single row of the query result.
+   * @param string $relationship
+   *   The relationship to be used.
+   *
+   * @return array
+   *   A renderable array for the entity data contained in the result row.
+   */
+  public function renderByRelationship(ResultRow $row, string $relationship): array {
+    if ($entity = $this->getEntity($row, $relationship)) {
+      $entity_id = $entity->id();
+      return $this->build[$entity_id];
+    }
+    return [];
+  }
+
+  /**
+   * Gets the entity associated with a row.
+   *
+   * @param \Drupal\views\ResultRow $row
+   *   The result row.
+   * @param string $relationship
+   *   (optional) The relationship.
+   *
+   * @return \Drupal\Core\Entity\EntityInterface|null
+   *   The entity might be optional, because the relationship entity might not
+   *   always exist.
+   */
+  protected function getEntity(ResultRow $row, string $relationship = 'none'): ?EntityInterface {
+    if ($relationship === 'none') {
+      return $row->_entity;
+    }
+    elseif (isset($row->_relationship_entities[$relationship])) {
+      return $row->_relationship_entities[$relationship];
+    }
+    return NULL;
   }
 
 }
diff --git a/web/core/modules/views/src/Entity/Render/RendererBase.php b/web/core/modules/views/src/Entity/Render/RendererBase.php
index 60327f61..b47dd430 100644
--- a/web/core/modules/views/src/Entity/Render/RendererBase.php
+++ b/web/core/modules/views/src/Entity/Render/RendererBase.php
@@ -93,7 +93,7 @@ abstract public function query(QueryPluginBase $query, $relationship = NULL);
   /**
    * Runs before each entity is rendered.
    *
-   * @param $result
+   * @param \Drupal\views\ResultRow[] $result
    *   The full array of results from the query.
    */
   public function preRender(array $result) {
diff --git a/web/core/modules/views/src/Entity/Render/TranslationLanguageRenderer.php b/web/core/modules/views/src/Entity/Render/TranslationLanguageRenderer.php
index 89f46598..07976988 100644
--- a/web/core/modules/views/src/Entity/Render/TranslationLanguageRenderer.php
+++ b/web/core/modules/views/src/Entity/Render/TranslationLanguageRenderer.php
@@ -78,25 +78,28 @@ protected function getLangcodeTable(QueryPluginBase $query, $relationship) {
   /**
    * {@inheritdoc}
    */
-  public function preRender(array $result) {
+  public function preRenderByRelationship(array $result, string $relationship): void {
     $view_builder = \Drupal::entityTypeManager()->getViewBuilder($this->entityType->id());
 
     /** @var \Drupal\views\ResultRow $row */
     foreach ($result as $row) {
-      $entity = $row->_entity;
-      $entity->view = $this->view;
-      $langcode = $this->getLangcode($row);
-      $this->build[$entity->id()][$langcode] = $view_builder->view($entity, $this->view->rowPlugin->options['view_mode'], $this->getLangcode($row));
+      if ($entity = $this->getEntity($row, $relationship)) {
+        $entity->view = $this->view;
+        $langcode = $this->getLangcodeByRelationship($row, $relationship);
+        $this->build[$entity->id()][$langcode] = $view_builder->view($entity, $this->view->rowPlugin->options['view_mode'], $langcode);
+      }
     }
   }
 
   /**
    * {@inheritdoc}
    */
-  public function render(ResultRow $row) {
-    $entity_id = $row->_entity->id();
-    $langcode = $this->getLangcode($row);
-    return $this->build[$entity_id][$langcode];
+  public function renderByRelationship(ResultRow $row, string $relationship): array {
+    if ($entity = $this->getEntity($row, $relationship)) {
+      $entity_id = $entity->id();
+      return $this->build[$entity_id][$this->getLangcodeByRelationship($row, $relationship)];
+    }
+    return [];
   }
 
   /**
diff --git a/web/core/modules/views/src/Entity/View.php b/web/core/modules/views/src/Entity/View.php
index fbb159bd..9bf93e06 100644
--- a/web/core/modules/views/src/Entity/View.php
+++ b/web/core/modules/views/src/Entity/View.php
@@ -424,6 +424,8 @@ public static function postDelete(EntityStorageInterface $storage, array $entiti
     foreach ($entities as $entity) {
       $tempstore->delete($entity->id());
     }
+
+    views_invalidate_cache();
   }
 
   /**
diff --git a/web/core/modules/views/src/EntityViewsData.php b/web/core/modules/views/src/EntityViewsData.php
index 2ae740d4..ce2ac151 100644
--- a/web/core/modules/views/src/EntityViewsData.php
+++ b/web/core/modules/views/src/EntityViewsData.php
@@ -312,63 +312,62 @@ public function getViewsData() {
     // the entity base, revision, data tables.
     $field_definitions = $this->entityFieldManager->getBaseFieldDefinitions($this->entityType->id());
     /** @var \Drupal\Core\Entity\Sql\DefaultTableMapping $table_mapping */
-    if ($table_mapping = $this->storage->getTableMapping($field_definitions)) {
-      // Fetch all fields that can appear in both the base table and the data
-      // table.
-      $duplicate_fields = array_intersect_key($entity_keys, array_flip(['id', 'revision', 'bundle']));
-      // Iterate over each table we have so far and collect field data for each.
-      // Based on whether the field is in the field_definitions provided by the
-      // entity field manager.
-      // @todo We should better just rely on information coming from the entity
-      //   storage.
-      // @todo https://www.drupal.org/node/2337511
-      foreach ($table_mapping->getTableNames() as $table) {
-        foreach ($table_mapping->getFieldNames($table) as $field_name) {
-          // To avoid confusing duplication in the user interface, for fields
-          // that are on both base and data tables, only add them on the data
-          // table (same for revision vs. revision data).
-          if ($data_table && ($table === $base_table || $table === $revision_table) && in_array($field_name, $duplicate_fields)) {
-            continue;
-          }
-          $this->mapFieldDefinition($table, $field_name, $field_definitions[$field_name], $table_mapping, $data[$table]);
+    $table_mapping = $this->storage->getTableMapping($field_definitions);
+    // Fetch all fields that can appear in both the base table and the data
+    // table.
+    $duplicate_fields = array_intersect_key($entity_keys, array_flip(['id', 'revision', 'bundle']));
+    // Iterate over each table we have so far and collect field data for each.
+    // Based on whether the field is in the field_definitions provided by the
+    // entity field manager.
+    // @todo We should better just rely on information coming from the entity
+    //   storage.
+    // @todo https://www.drupal.org/node/2337511
+    foreach ($table_mapping->getTableNames() as $table) {
+      foreach ($table_mapping->getFieldNames($table) as $field_name) {
+        // To avoid confusing duplication in the user interface, for fields
+        // that are on both base and data tables, only add them on the data
+        // table (same for revision vs. revision data).
+        if ($data_table && ($table === $base_table || $table === $revision_table) && in_array($field_name, $duplicate_fields)) {
+          continue;
         }
+        $this->mapFieldDefinition($table, $field_name, $field_definitions[$field_name], $table_mapping, $data[$table]);
       }
+    }
 
-      foreach ($field_definitions as $field_definition) {
-        if ($table_mapping->requiresDedicatedTableStorage($field_definition->getFieldStorageDefinition())) {
-          $table = $table_mapping->getDedicatedDataTableName($field_definition->getFieldStorageDefinition());
+    foreach ($field_definitions as $field_definition) {
+      if ($table_mapping->requiresDedicatedTableStorage($field_definition->getFieldStorageDefinition())) {
+        $table = $table_mapping->getDedicatedDataTableName($field_definition->getFieldStorageDefinition());
+
+        $data[$table]['table']['group'] = $this->entityType->getLabel();
+        $data[$table]['table']['provider'] = $this->entityType->getProvider();
+        $data[$table]['table']['join'][$views_base_table] = [
+          'left_field' => $entity_id_key,
+          'field' => 'entity_id',
+          'extra' => [
+            ['field' => 'deleted', 'value' => 0, 'numeric' => TRUE],
+          ],
+        ];
 
-          $data[$table]['table']['group'] = $this->entityType->getLabel();
-          $data[$table]['table']['provider'] = $this->entityType->getProvider();
-          $data[$table]['table']['join'][$views_base_table] = [
-            'left_field' => $entity_id_key,
+        if ($revisionable) {
+          $revision_table = $table_mapping->getDedicatedRevisionTableName($field_definition->getFieldStorageDefinition());
+
+          $data[$revision_table]['table']['group'] = $this->t('@entity_type revision', ['@entity_type' => $this->entityType->getLabel()]);
+          $data[$revision_table]['table']['provider'] = $this->entityType->getProvider();
+          $data[$revision_table]['table']['join'][$views_revision_base_table] = [
+            'left_field' => $revision_field,
             'field' => 'entity_id',
             'extra' => [
               ['field' => 'deleted', 'value' => 0, 'numeric' => TRUE],
             ],
           ];
-
-          if ($revisionable) {
-            $revision_table = $table_mapping->getDedicatedRevisionTableName($field_definition->getFieldStorageDefinition());
-
-            $data[$revision_table]['table']['group'] = $this->t('@entity_type revision', ['@entity_type' => $this->entityType->getLabel()]);
-            $data[$revision_table]['table']['provider'] = $this->entityType->getProvider();
-            $data[$revision_table]['table']['join'][$views_revision_base_table] = [
-              'left_field' => $revision_field,
-              'field' => 'entity_id',
-              'extra' => [
-                ['field' => 'deleted', 'value' => 0, 'numeric' => TRUE],
-              ],
-            ];
-          }
         }
       }
-      if (($uid_key = $entity_keys['uid'] ?? '')) {
-        $data[$data_table][$uid_key]['filter']['id'] = 'user_name';
-      }
-      if ($revision_table && ($revision_uid_key = $this->entityType->getRevisionMetadataKeys()['revision_user'] ?? '')) {
-        $data[$revision_table][$revision_uid_key]['filter']['id'] = 'user_name';
-      }
+    }
+    if (($uid_key = $entity_keys['uid'] ?? '')) {
+      $data[$data_table][$uid_key]['filter']['id'] = 'user_name';
+    }
+    if ($revision_table && ($revision_uid_key = $this->entityType->getRevisionMetadataKeys()['revision_user'] ?? '')) {
+      $data[$revision_table][$revision_uid_key]['filter']['id'] = 'user_name';
     }
 
     // Add the entity type key to each table generated.
diff --git a/web/core/modules/views/src/EventSubscriber/RouteSubscriber.php b/web/core/modules/views/src/EventSubscriber/RouteSubscriber.php
index 50a3ca11..7cc6d561 100644
--- a/web/core/modules/views/src/EventSubscriber/RouteSubscriber.php
+++ b/web/core/modules/views/src/EventSubscriber/RouteSubscriber.php
@@ -74,7 +74,7 @@ public function reset() {
   /**
    * {@inheritdoc}
    */
-  public static function getSubscribedEvents() {
+  public static function getSubscribedEvents(): array {
     $events = parent::getSubscribedEvents();
     $events[RoutingEvents::FINISHED] = ['routeRebuildFinished'];
     // Ensure to run after the entity resolver subscriber
diff --git a/web/core/modules/views/src/EventSubscriber/ViewsEntitySchemaSubscriber.php b/web/core/modules/views/src/EventSubscriber/ViewsEntitySchemaSubscriber.php
index af423032..f8f5ea84 100644
--- a/web/core/modules/views/src/EventSubscriber/ViewsEntitySchemaSubscriber.php
+++ b/web/core/modules/views/src/EventSubscriber/ViewsEntitySchemaSubscriber.php
@@ -106,7 +106,7 @@ public function __construct(EntityTypeManagerInterface $entity_type_manager, Log
   /**
    * {@inheritdoc}
    */
-  public static function getSubscribedEvents() {
+  public static function getSubscribedEvents(): array {
     return static::getEntityTypeEvents();
   }
 
diff --git a/web/core/modules/views/src/Form/ViewsForm.php b/web/core/modules/views/src/Form/ViewsForm.php
index 766e366d..0dc01e0c 100644
--- a/web/core/modules/views/src/Form/ViewsForm.php
+++ b/web/core/modules/views/src/Form/ViewsForm.php
@@ -73,7 +73,7 @@ class ViewsForm implements FormInterface, ContainerInjectionInterface {
    * @param \Drupal\Core\DependencyInjection\ClassResolverInterface $class_resolver
    *   The class resolver to get the subform form objects.
    * @param \Drupal\Core\Routing\UrlGeneratorInterface $url_generator
-   *   The url generator to generate the form action.
+   *   The URL generator to generate the form action.
    * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
    *   The request stack.
    * @param string $view_id
@@ -157,7 +157,7 @@ public function buildForm(array $form, FormStateInterface $form_state, ViewExecu
     $form = [];
 
     $query = $this->requestStack->getCurrentRequest()->query->all();
-    $query = UrlHelper::filterQueryParameters($query, [], '');
+    $query = UrlHelper::filterQueryParameters($query, ['_wrapper_format', 'ajax_page_state'], '');
 
     $options = ['query' => $query];
     $form['#action'] = $view->hasUrl() ? $view->getUrl()->setOptions($options)->toString() : Url::fromRoute('<current>')->setOptions($options)->toString();
diff --git a/web/core/modules/views/src/ManyToOneHelper.php b/web/core/modules/views/src/ManyToOneHelper.php
index 8b105110..82a42a4e 100644
--- a/web/core/modules/views/src/ManyToOneHelper.php
+++ b/web/core/modules/views/src/ManyToOneHelper.php
@@ -4,6 +4,7 @@
 
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\views\Plugin\views\HandlerBase;
+use Drupal\views\Plugin\views\ViewsHandlerInterface;
 
 /**
  * This many to one helper object is used on both arguments and filters.
@@ -20,6 +21,20 @@
  */
 class ManyToOneHelper {
 
+  /**
+   * Should the field use formula or alias.
+   *
+   * @see \Drupal\views\Plugin\views\argument\StringArgument::query()
+   *
+   * @var bool
+   */
+  public bool $formula = FALSE;
+
+  /**
+   * The handler.
+   */
+  public ViewsHandlerInterface $handler;
+
   public function __construct($handler) {
     $this->handler = $handler;
   }
@@ -142,7 +157,7 @@ public function summaryJoin() {
               'field' => $this->handler->realField,
               'operator' => '!=',
               'value' => $value,
-              'numeric' => !empty($this->definition['numeric']),
+              'numeric' => !empty($this->handler->definition['numeric']),
             ],
           ];
         }
@@ -312,18 +327,18 @@ public function addFilter() {
           $placeholder .= '[]';
 
           if ($operator == 'IS NULL') {
-            $this->handler->query->addWhereExpression(0, "$field $operator");
+            $this->handler->query->addWhereExpression($options['group'], "$field $operator");
           }
           else {
-            $this->handler->query->addWhereExpression(0, "$field $operator($placeholder)", [$placeholder => $value]);
+            $this->handler->query->addWhereExpression($options['group'], "$field $operator($placeholder)", [$placeholder => $value]);
           }
         }
         else {
           if ($operator == 'IS NULL') {
-            $this->handler->query->addWhereExpression(0, "$field $operator");
+            $this->handler->query->addWhereExpression($options['group'], "$field $operator");
           }
           else {
-            $this->handler->query->addWhereExpression(0, "$field $operator $placeholder", [$placeholder => $value]);
+            $this->handler->query->addWhereExpression($options['group'], "$field $operator $placeholder", [$placeholder => $value]);
           }
         }
       }
diff --git a/web/core/modules/views/src/Plugin/Block/ViewsExposedFilterBlock.php b/web/core/modules/views/src/Plugin/Block/ViewsExposedFilterBlock.php
index 299964e8..f43fda6d 100644
--- a/web/core/modules/views/src/Plugin/Block/ViewsExposedFilterBlock.php
+++ b/web/core/modules/views/src/Plugin/Block/ViewsExposedFilterBlock.php
@@ -31,7 +31,7 @@ public function getCacheContexts() {
    *   A renderable array representing the content of the block with additional
    *   context of current view and display ID.
    */
-  public function build() {
+  public function build() : array {
     $output = $this->view->display_handler->viewExposedFormBlocks() ?? [];
     // Provide the context for block build and block view alter hooks.
     // \Drupal\views\Plugin\Block\ViewsBlock::build() adds the same context in
diff --git a/web/core/modules/views/src/Plugin/views/HandlerBase.php b/web/core/modules/views/src/Plugin/views/HandlerBase.php
index dc33462d..ad7ee244 100644
--- a/web/core/modules/views/src/Plugin/views/HandlerBase.php
+++ b/web/core/modules/views/src/Plugin/views/HandlerBase.php
@@ -82,6 +82,11 @@ abstract class HandlerBase extends PluginBase implements ViewsHandlerInterface {
    */
   protected $viewsData;
 
+  /**
+   * Tracks whether the plugin is a handler.
+   */
+  public bool $is_handler;
+
   /**
    * Constructs a Handler object.
    *
diff --git a/web/core/modules/views/src/Plugin/views/PluginBase.php b/web/core/modules/views/src/Plugin/views/PluginBase.php
index 8709a550..e478e913 100644
--- a/web/core/modules/views/src/Plugin/views/PluginBase.php
+++ b/web/core/modules/views/src/Plugin/views/PluginBase.php
@@ -21,25 +21,22 @@
  * Via the @Plugin definition the plugin may specify a theme function or
  * template to be used for the plugin. It also can auto-register the theme
  * implementation for that file or function.
- * - theme: the theme implementation to use in the plugin. This may be the name
- *   of the function (without theme_ prefix) or the template file (without
- *   template engine extension).
- *   If a template file should be used, the file has to be placed in the
- *   module's templates folder.
+ * - theme: the theme implementation to use in the plugin. This must be the
+ *   name of the template file (without template engine extension). The file
+ *   has to be placed in the module's templates folder.
  *   Example: theme = "mymodule_row" of module "mymodule" will implement
  *   mymodule-row.html.twig in the [..]/modules/mymodule/templates folder.
  * - register_theme: (optional) When set to TRUE (default) the theme is
  *   registered automatically. When set to FALSE the plugin reuses an existing
  *   theme implementation, defined by another module or views plugin.
- * - theme_file: (optional) the location of an include file that may hold the
- *   theme or preprocess function. The location has to be relative to module's
- *   root directory.
+ * - theme_file: (optional) the location of an include file that holds any
+ *   preprocess functions. The location has to be relative to the module's root
+ *   directory.
  * - module: machine name of the module. It must be present for any plugin that
  *   wants to register a theme.
  *
  * @ingroup views_plugins
  */
-#[\AllowDynamicProperties]
 abstract class PluginBase extends ComponentPluginBase implements ContainerFactoryPluginInterface, ViewsPluginInterface, DependentPluginInterface, TrustedCallbackInterface {
 
   /**
@@ -109,6 +106,11 @@ abstract class PluginBase extends ComponentPluginBase implements ContainerFactor
    */
   protected $renderer;
 
+  /**
+   * The handler position.
+   */
+  public int $position;
+
   /**
    * Constructs a PluginBase object.
    *
@@ -367,7 +369,7 @@ protected function viewsTokenReplace($text, $tokens) {
       // Twig wants a token replacement array stripped of curly-brackets.
       // Some Views tokens come with curly-braces, others do not.
       // @todo: https://www.drupal.org/node/2544392
-      if (strpos($token, '{{') !== FALSE) {
+      if (str_contains($token, '{{')) {
         // Twig wants a token replacement array stripped of curly-brackets.
         $token = trim(str_replace(['{{', '}}'], '', $token));
       }
@@ -375,7 +377,7 @@ protected function viewsTokenReplace($text, $tokens) {
       // Check for arrays in Twig tokens. Internally these are passed as
       // dot-delimited strings, but need to be turned into associative arrays
       // for parsing.
-      if (strpos($token, '.') === FALSE) {
+      if (!str_contains($token, '.')) {
         // We need to validate tokens are valid Twig variables. Twig uses the
         // same variable naming rules as PHP.
         // @see http://php.net/manual/language.variables.basics.php
diff --git a/web/core/modules/views/src/Plugin/views/ViewsPluginInterface.php b/web/core/modules/views/src/Plugin/views/ViewsPluginInterface.php
index 93d75c99..54933eb7 100644
--- a/web/core/modules/views/src/Plugin/views/ViewsPluginInterface.php
+++ b/web/core/modules/views/src/Plugin/views/ViewsPluginInterface.php
@@ -5,14 +5,14 @@
 use Drupal\Component\Plugin\DerivativeInspectionInterface;
 use Drupal\Component\Plugin\PluginInspectionInterface;
 use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\views\Plugin\views\display\DisplayPluginBase;
 use Drupal\views\ViewExecutable;
-use Symfony\Component\DependencyInjection\ContainerInterface;
 
 /**
  * Provides an interface for all views plugins.
  */
-interface ViewsPluginInterface extends PluginInspectionInterface, DerivativeInspectionInterface {
+interface ViewsPluginInterface extends PluginInspectionInterface, DerivativeInspectionInterface, ContainerFactoryPluginInterface {
 
   /**
    * Returns the plugin provider.
@@ -68,11 +68,6 @@ public function summaryTitle();
    */
   public static function preRenderAddFieldsetMarkup(array $form);
 
-  /**
-   * {@inheritdoc}
-   */
-  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition);
-
   /**
    * Initialize the plugin.
    *
diff --git a/web/core/modules/views/src/Plugin/views/area/Entity.php b/web/core/modules/views/src/Plugin/views/area/Entity.php
index e514c4fb..221fb44a 100644
--- a/web/core/modules/views/src/Plugin/views/area/Entity.php
+++ b/web/core/modules/views/src/Plugin/views/area/Entity.php
@@ -131,7 +131,7 @@ public function buildOptionsForm(&$form, FormStateInterface $form_state) {
     // display the entity ID to the admin form user.
     // @todo Use a method to check for tokens in
     //   https://www.drupal.org/node/2396607.
-    if (strpos($this->options['target'], '{{') === FALSE) {
+    if (!str_contains($this->options['target'], '{{')) {
       // @todo If the entity does not exist, this will show the config target
       //   identifier. Decide if this is the correct behavior in
       //   https://www.drupal.org/node/2415391.
@@ -164,7 +164,7 @@ public function submitOptionsForm(&$form, FormStateInterface $form_state) {
     // @todo Use a method to check for tokens in
     //   https://www.drupal.org/node/2396607.
     $options = $form_state->getValue('options');
-    if (strpos($options['target'], '{{') === FALSE) {
+    if (!str_contains($options['target'], '{{')) {
       if ($entity = $this->entityTypeManager->getStorage($this->entityType)->load($options['target'])) {
         $options['target'] = $entity->getConfigTarget();
       }
@@ -179,7 +179,7 @@ public function render($empty = FALSE) {
     if (!$empty || !empty($this->options['empty'])) {
       // @todo Use a method to check for tokens in
       //   https://www.drupal.org/node/2396607.
-      if (strpos($this->options['target'], '{{') !== FALSE) {
+      if (str_contains($this->options['target'], '{{')) {
         // We cast as we need the integer/string value provided by the
         // ::tokenizeValue() call.
         $target_id = (string) $this->tokenizeValue($this->options['target']);
@@ -210,7 +210,7 @@ public function calculateDependencies() {
     // Ensure that we don't add dependencies for placeholders.
     // @todo Use a method to check for tokens in
     //   https://www.drupal.org/node/2396607.
-    if (strpos($this->options['target'], '{{') === FALSE) {
+    if (!str_contains($this->options['target'], '{{')) {
       if ($entity = $this->entityRepository->loadEntityByConfigTarget($this->entityType, $this->options['target'])) {
         $dependencies[$this->entityTypeManager->getDefinition($this->entityType)->getConfigDependencyKey()][] = $entity->getConfigDependencyName();
       }
diff --git a/web/core/modules/views/src/Plugin/views/area/Result.php b/web/core/modules/views/src/Plugin/views/area/Result.php
index efe78d07..6405a9bf 100644
--- a/web/core/modules/views/src/Plugin/views/area/Result.php
+++ b/web/core/modules/views/src/Plugin/views/area/Result.php
@@ -60,7 +60,7 @@ public function buildOptionsForm(&$form, FormStateInterface $form_state) {
    * {@inheritdoc}
    */
   public function query() {
-    if (strpos($this->options['content'], '@total') !== FALSE) {
+    if (str_contains($this->options['content'], '@total')) {
       $this->view->get_total_rows = TRUE;
     }
   }
diff --git a/web/core/modules/views/src/Plugin/views/area/Text.php b/web/core/modules/views/src/Plugin/views/area/Text.php
index c62d4646..d9751b02 100644
--- a/web/core/modules/views/src/Plugin/views/area/Text.php
+++ b/web/core/modules/views/src/Plugin/views/area/Text.php
@@ -49,7 +49,7 @@ public function buildOptionsForm(&$form, FormStateInterface $form_state) {
   public function preQuery() {
     $content = $this->options['content']['value'];
     // Check for tokens that require a total row count.
-    if (strpos($content, '[view:page-count]') !== FALSE || strpos($content, '[view:total-rows]') !== FALSE) {
+    if (str_contains($content, '[view:page-count]') || str_contains($content, '[view:total-rows]')) {
       $this->view->get_total_rows = TRUE;
     }
   }
diff --git a/web/core/modules/views/src/Plugin/views/argument/ArgumentPluginBase.php b/web/core/modules/views/src/Plugin/views/argument/ArgumentPluginBase.php
index 259fcb2f..9997e26b 100644
--- a/web/core/modules/views/src/Plugin/views/argument/ArgumentPluginBase.php
+++ b/web/core/modules/views/src/Plugin/views/argument/ArgumentPluginBase.php
@@ -65,6 +65,11 @@ abstract class ArgumentPluginBase extends HandlerBase implements CacheableDepend
    */
   public $name_table;
 
+  /**
+   * The name table alias.
+   */
+  public string $name_table_alias;
+
   /**
    * The field to use for the name to display in the summary.
    *
@@ -75,6 +80,48 @@ abstract class ArgumentPluginBase extends HandlerBase implements CacheableDepend
    */
   public $name_field;
 
+  /**
+   * The alias for the field.
+   */
+  public string $name_alias;
+
+  /**
+   * The base table alias.
+   */
+  public string $base_alias;
+
+  /**
+   * The alias count.
+   */
+  public string $count_alias;
+
+  /**
+   * Is argument validated.
+   */
+  public ?bool $argument_validated;
+
+  /**
+   * Is argument a default.
+   */
+  public bool $is_default;
+
+  /**
+   * The operator used for the query: or|and.
+   */
+  public string $operator;
+
+  /**
+   * The title set by argument validation.
+   */
+  public ?string $validated_title;
+
+  /**
+   * Keyed array by alias of table relations.
+   *
+   * @var string[]
+   */
+  public ?array $tableAliases;
+
   /**
    * Overrides Drupal\views\Plugin\views\HandlerBase:init().
    */
diff --git a/web/core/modules/views/src/Plugin/views/argument/Date.php b/web/core/modules/views/src/Plugin/views/argument/Date.php
index 1090f5bb..8853b021 100644
--- a/web/core/modules/views/src/Plugin/views/argument/Date.php
+++ b/web/core/modules/views/src/Plugin/views/argument/Date.php
@@ -122,7 +122,7 @@ public function getDefaultArgument($raw = FALSE) {
       }
     }
 
-    return parent::getDefaultArgument($raw);
+    return parent::getDefaultArgument();
   }
 
   /**
diff --git a/web/core/modules/views/src/Plugin/views/argument/ManyToOne.php b/web/core/modules/views/src/Plugin/views/argument/ManyToOne.php
index f8ef3e93..7abce4e8 100644
--- a/web/core/modules/views/src/Plugin/views/argument/ManyToOne.php
+++ b/web/core/modules/views/src/Plugin/views/argument/ManyToOne.php
@@ -26,6 +26,11 @@
  */
 class ManyToOne extends ArgumentPluginBase {
 
+  /**
+   * The many-to-one helper.
+   */
+  public ManyToOneHelper $helper;
+
   /**
    * {@inheritdoc}
    */
diff --git a/web/core/modules/views/src/Plugin/views/argument/NumericArgument.php b/web/core/modules/views/src/Plugin/views/argument/NumericArgument.php
index 62e67614..b40817b1 100644
--- a/web/core/modules/views/src/Plugin/views/argument/NumericArgument.php
+++ b/web/core/modules/views/src/Plugin/views/argument/NumericArgument.php
@@ -16,12 +16,6 @@
  */
 class NumericArgument extends ArgumentPluginBase {
 
-  /**
-   * The operator used for the query: or|and.
-   * @var string
-   */
-  public $operator;
-
   /**
    * The actual value which is used for querying.
    * @var array
diff --git a/web/core/modules/views/src/Plugin/views/argument/StringArgument.php b/web/core/modules/views/src/Plugin/views/argument/StringArgument.php
index 96361bea..8a021af4 100644
--- a/web/core/modules/views/src/Plugin/views/argument/StringArgument.php
+++ b/web/core/modules/views/src/Plugin/views/argument/StringArgument.php
@@ -21,6 +21,11 @@
  */
 class StringArgument extends ArgumentPluginBase {
 
+  /**
+   * The many-to-one helper.
+   */
+  public ManyToOneHelper $helper;
+
   /**
    * {@inheritdoc}
    */
diff --git a/web/core/modules/views/src/Plugin/views/argument_default/ArgumentDefaultPluginBase.php b/web/core/modules/views/src/Plugin/views/argument_default/ArgumentDefaultPluginBase.php
index bd392b98..7cd85a61 100644
--- a/web/core/modules/views/src/Plugin/views/argument_default/ArgumentDefaultPluginBase.php
+++ b/web/core/modules/views/src/Plugin/views/argument_default/ArgumentDefaultPluginBase.php
@@ -37,6 +37,11 @@ abstract class ArgumentDefaultPluginBase extends PluginBase {
    */
   protected $argument;
 
+  /**
+   * The option name.
+   */
+  public string $option_name;
+
   /**
    * Return the default argument.
    *
diff --git a/web/core/modules/views/src/Plugin/views/argument_default/QueryParameter.php b/web/core/modules/views/src/Plugin/views/argument_default/QueryParameter.php
index b864b603..5370e4e1 100644
--- a/web/core/modules/views/src/Plugin/views/argument_default/QueryParameter.php
+++ b/web/core/modules/views/src/Plugin/views/argument_default/QueryParameter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\views\Plugin\views\argument_default;
 
+use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheableDependencyInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -64,9 +65,12 @@ public function buildOptionsForm(&$form, FormStateInterface $form_state) {
    */
   public function getArgument() {
     $current_request = $this->view->getRequest();
+    // Convert a[b][c][d] into ['a', 'b', 'c', 'd'].
+    $path = array_filter(preg_split('#(\[|\]\[|\])#', $this->options['query_param']));
 
-    if ($current_request->query->has($this->options['query_param'])) {
-      $param = $current_request->query->all()[$this->options['query_param']];
+    if ($current_request->query->has($path[0])) {
+      $query = $current_request->query->all();
+      $param = NestedArray::getValue($query, $path);
       if (is_array($param)) {
         $conjunction = ($this->options['multiple'] == 'and') ? ',' : '+';
         $param = implode($conjunction, $param);
diff --git a/web/core/modules/views/src/Plugin/views/argument_validator/ArgumentValidatorPluginBase.php b/web/core/modules/views/src/Plugin/views/argument_validator/ArgumentValidatorPluginBase.php
index c89479f9..f4b7f8f3 100644
--- a/web/core/modules/views/src/Plugin/views/argument_validator/ArgumentValidatorPluginBase.php
+++ b/web/core/modules/views/src/Plugin/views/argument_validator/ArgumentValidatorPluginBase.php
@@ -40,6 +40,11 @@ abstract class ArgumentValidatorPluginBase extends PluginBase {
    */
   protected $argument;
 
+  /**
+   * The option name.
+   */
+  public string $option_name;
+
   /**
    * Sets the parent argument this plugin is associated with.
    *
diff --git a/web/core/modules/views/src/Plugin/views/argument_validator/Entity.php b/web/core/modules/views/src/Plugin/views/argument_validator/Entity.php
index ba0bb219..1954a10c 100644
--- a/web/core/modules/views/src/Plugin/views/argument_validator/Entity.php
+++ b/web/core/modules/views/src/Plugin/views/argument_validator/Entity.php
@@ -177,7 +177,7 @@ public function submitOptionsForm(&$form, FormStateInterface $form_state, &$opti
   public function validateArgument($argument) {
     $entity_type = $this->definition['entity_type'];
 
-    if ($this->multipleCapable && $this->options['multiple']) {
+    if ($this->multipleCapable && $this->options['multiple'] && isset($argument)) {
       // At this point only interested in individual IDs no matter what type,
       // just splitting by the allowed delimiters.
       $ids = array_filter(preg_split('/[,+ ]/', $argument));
diff --git a/web/core/modules/views/src/Plugin/views/argument_validator/None.php b/web/core/modules/views/src/Plugin/views/argument_validator/None.php
index 8e8c9657..c74f5290 100644
--- a/web/core/modules/views/src/Plugin/views/argument_validator/None.php
+++ b/web/core/modules/views/src/Plugin/views/argument_validator/None.php
@@ -23,7 +23,7 @@ public function validateArgument($argument) {
       return FALSE;
     }
 
-    if (!empty($this->argument->definition['numeric']) && !isset($this->argument->options['break_phrase']) && !is_numeric($arg)) {
+    if (!empty($this->argument->definition['numeric']) && !isset($this->argument->options['break_phrase'])) {
       return FALSE;
     }
 
diff --git a/web/core/modules/views/src/Plugin/views/cache/Time.php b/web/core/modules/views/src/Plugin/views/cache/Time.php
index 0cccb404..9d03f1b7 100644
--- a/web/core/modules/views/src/Plugin/views/cache/Time.php
+++ b/web/core/modules/views/src/Plugin/views/cache/Time.php
@@ -6,7 +6,6 @@
 use Drupal\Core\Cache\Cache;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Form\FormStateInterface;
-use Symfony\Component\HttpFoundation\Request;
 
 /**
  * Simple caching of query results for Views displays.
@@ -47,29 +46,10 @@ class Time extends CachePluginBase {
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, DateFormatterInterface $date_formatter) {
     $this->dateFormatter = $date_formatter;
-    if (func_num_args() == 5 && func_get_arg(4) instanceof Request) {
-      @trigger_error('The request object must not be passed to ' . __METHOD__ . '(). It is deprecated in drupal:9.2.0 and is removed from drupal:10.0.0. See https://www.drupal.org/node/3154016', E_USER_DEPRECATED);
-    }
 
     parent::__construct($configuration, $plugin_id, $plugin_definition);
   }
 
-  /**
-   * Returns replacements for deprecated properties.
-   *
-   * @param string $name
-   *   The property name.
-   *
-   * @return mixed
-   *   The value.
-   */
-  public function __get($name) {
-    if ($name === 'request') {
-      @trigger_error('The request property of ' . __CLASS__ . ' is deprecated in drupal:9.2.0 and is removed from drupal:10.0.0. See https://www.drupal.org/node/3154016', E_USER_DEPRECATED);
-      return $this->view->getRequest();
-    }
-  }
-
   /**
    * {@inheritdoc}
    */
diff --git a/web/core/modules/views/src/Plugin/views/display/DisplayPluginBase.php b/web/core/modules/views/src/Plugin/views/display/DisplayPluginBase.php
index c404d1c8..7b764e47 100644
--- a/web/core/modules/views/src/Plugin/views/display/DisplayPluginBase.php
+++ b/web/core/modules/views/src/Plugin/views/display/DisplayPluginBase.php
@@ -63,8 +63,10 @@ abstract class DisplayPluginBase extends PluginBase implements DisplayPluginInte
   /**
    * Stores the rendered output of the display.
    *
-   * @see View::render
-   * @var string
+   * @var array|null
+   *   Render output array, or NULL if no output.
+   *
+   * @see \Drupal\views\ViewExecutable::render()
    */
   public $output = NULL;
 
@@ -122,6 +124,16 @@ abstract class DisplayPluginBase extends PluginBase implements DisplayPluginInte
    */
   public $display;
 
+  /**
+   * Keeps track whether the display uses exposed filters.
+   */
+  public bool $has_exposed;
+
+  /**
+   * The default display.
+   */
+  public DisplayPluginInterface $default_display;
+
   /**
    * Constructs a new DisplayPluginBase object.
    *
@@ -778,7 +790,7 @@ public function getOption($option) {
       return $this->default_display->getOption($option);
     }
 
-    if (isset($this->options[$option]) || array_key_exists($option, $this->options)) {
+    if (\array_key_exists($option, $this->options)) {
       return $this->options[$option];
     }
   }
@@ -1677,7 +1689,7 @@ public function buildOptionsForm(&$form, FormStateInterface $form_state) {
         if (empty($style)) {
           $form['#title'] .= $this->t('Row style options');
         }
-        $plugin = $this->getPlugin(empty($style) ? 'row' : 'style', $name);
+        $plugin = $this->getPlugin(empty($style) ? 'row' : 'style');
         if ($plugin) {
           $form[$section] = [
             '#tree' => TRUE,
@@ -1913,7 +1925,7 @@ public function validateOptionsForm(&$form, FormStateInterface $form_state) {
 
     // Validate plugin options. Every section with "_options" in it, belongs to
     // a plugin type, like "style_options".
-    if (strpos($section, '_options') !== FALSE) {
+    if (str_contains($section, '_options')) {
       $plugin_type = str_replace('_options', '', $section);
       // Load the plugin and let it handle the validation.
       if ($plugin = $this->getPlugin($plugin_type)) {
@@ -2125,7 +2137,7 @@ public function renderMoreLink() {
   protected function getMoreUrl() {
     $path = $this->getOption('link_url');
 
-    // Return the display URL if there is no custom url.
+    // Return the display URL if there is no custom URL.
     if ($this->getOption('link_display') !== 'custom_url' || empty($path)) {
       return $this->view->getUrl(NULL, $this->display['id']);
     }
@@ -2150,7 +2162,7 @@ protected function getMoreUrl() {
     $path = $options['path'];
     unset($options['path']);
 
-    // Create url.
+    // Create URL.
     // @todo Views should expect and store a leading /. See:
     //   https://www.drupal.org/node/2423913
     $url = UrlHelper::isExternal($path) ? Url::fromUri($path, $options) : Url::fromUserInput('/' . ltrim($path, '/'), $options);
@@ -2627,7 +2639,7 @@ public function getSpecialBlocks() {
   public function viewExposedFormBlocks() {
     // Avoid interfering with the admin forms.
     $route_name = \Drupal::routeMatch()->getRouteName();
-    if (strpos($route_name, 'views_ui.') === 0) {
+    if (str_starts_with($route_name, 'views_ui.')) {
       return;
     }
     $this->view->initHandlers();
diff --git a/web/core/modules/views/src/Plugin/views/display/DisplayPluginInterface.php b/web/core/modules/views/src/Plugin/views/display/DisplayPluginInterface.php
index abc03be5..bb75dde1 100644
--- a/web/core/modules/views/src/Plugin/views/display/DisplayPluginInterface.php
+++ b/web/core/modules/views/src/Plugin/views/display/DisplayPluginInterface.php
@@ -391,6 +391,9 @@ public function renderMoreLink();
 
   /**
    * Renders this display.
+   *
+   * @return array
+   *   A render array.
    */
   public function render();
 
@@ -495,6 +498,9 @@ public function buildRenderable(array $args = [], $cache = TRUE);
    * Renders the display for the purposes of a live preview.
    *
    * Also might be used for some other AJAXy reason.
+   *
+   * @return array
+   *   The render array of live preview.
    */
   public function preview();
 
@@ -582,7 +588,7 @@ public function viewExposedFormBlocks();
    *     where you can configure what should be done if the argument does not
    *     exist.
    *   - description: A description about how arguments are passed
-   *     to the display. For example blocks can't get arguments from url.
+   *     to the display. For example blocks can't get arguments from URL.
    */
   public function getArgumentText();
 
diff --git a/web/core/modules/views/src/Plugin/views/display/EntityReference.php b/web/core/modules/views/src/Plugin/views/display/EntityReference.php
index 3cfce3e3..d81ff34d 100644
--- a/web/core/modules/views/src/Plugin/views/display/EntityReference.php
+++ b/web/core/modules/views/src/Plugin/views/display/EntityReference.php
@@ -49,6 +49,11 @@ class EntityReference extends DisplayPluginBase {
    */
   protected $connection;
 
+  /**
+   * The id field alias.
+   */
+  public string $id_field_alias;
+
   /**
    * Constructs a new EntityReference object.
    *
diff --git a/web/core/modules/views/src/Plugin/views/display/Page.php b/web/core/modules/views/src/Plugin/views/display/Page.php
index 68fe5c4e..19f12914 100644
--- a/web/core/modules/views/src/Plugin/views/display/Page.php
+++ b/web/core/modules/views/src/Plugin/views/display/Page.php
@@ -75,13 +75,9 @@ class Page extends PathPluginBase {
    * @param \Drupal\Core\Menu\MenuParentFormSelectorInterface $parent_form_selector
    *   The parent form selector service.
    */
-  public function __construct(array $configuration, $plugin_id, $plugin_definition, RouteProviderInterface $route_provider, StateInterface $state, EntityStorageInterface $menu_storage, MenuParentFormSelectorInterface $parent_form_selector = NULL) {
+  public function __construct(array $configuration, $plugin_id, $plugin_definition, RouteProviderInterface $route_provider, StateInterface $state, EntityStorageInterface $menu_storage, MenuParentFormSelectorInterface $parent_form_selector) {
     parent::__construct($configuration, $plugin_id, $plugin_definition, $route_provider, $state);
     $this->menuStorage = $menu_storage;
-    if (!$parent_form_selector) {
-      @trigger_error('Calling ' . __METHOD__ . '() without the $parent_form_selector argument is deprecated in drupal:9.3.0 and the $parent_form_selector argument will be required in drupal:10.0.0. See https://www.drupal.org/node/3027559', E_USER_DEPRECATED);
-      $parent_form_selector = \Drupal::service('menu.parent_form_selector');
-    }
     $this->parentFormSelector = $parent_form_selector;
   }
 
@@ -109,6 +105,10 @@ protected function getRoute($view_id, $display_id) {
     // Explicitly set HTML as the format for Page displays.
     $route->setRequirement('_format', 'html');
 
+    if ($this->getOption('use_admin_theme')) {
+      $route->setOption('_admin_route', TRUE);
+    }
+
     return $route;
   }
 
@@ -248,6 +248,26 @@ public function optionsSummary(&$categories, &$options) {
       $options['menu']['setting'] = $this->t('Parent menu link');
       $options['menu']['links']['tab_options'] = $this->t('Change settings for the parent menu');
     }
+
+    // If the display path starts with 'admin/' the page will be rendered with
+    // the Administration theme regardless of the 'use_admin_theme' option
+    // therefore, we need to set the summary message to reflect this.
+    if (str_starts_with($this->getOption('path') ?? '', 'admin/')) {
+      $admin_theme_text = $this->t('Yes (admin path)');
+    }
+    elseif ($this->getOption('use_admin_theme')) {
+      $admin_theme_text = $this->t('Yes');
+    }
+    else {
+      $admin_theme_text = $this->t('No');
+    }
+
+    $options['use_admin_theme'] = [
+      'category' => 'page',
+      'title' => $this->t('Administration theme'),
+      'value' => $admin_theme_text,
+      'desc' => $this->t('Use the administration theme when rendering this display.'),
+    ];
   }
 
   /**
@@ -449,6 +469,20 @@ public function buildOptionsForm(&$form, FormStateInterface $form_state) {
           ],
         ];
         break;
+
+      case 'use_admin_theme':
+        $form['#title'] .= $this->t('Administration theme');
+        $form['use_admin_theme'] = [
+          '#type' => 'checkbox',
+          '#title' => $this->t('Use the administration theme'),
+          '#default_value' => $this->getOption('use_admin_theme'),
+        ];
+        if (str_starts_with($this->getOption('path') ?? '', 'admin/')) {
+          $form['use_admin_theme']['#description'] = $this->t('Paths starting with "@admin" always use the administration theme.', ['@admin' => 'admin/']);
+          $form['use_admin_theme']['#default_value'] = TRUE;
+          $form['use_admin_theme']['#attributes'] = ['disabled' => 'disabled'];
+        }
+        break;
     }
   }
 
@@ -461,7 +495,7 @@ public function validateOptionsForm(&$form, FormStateInterface $form_state) {
     if ($form_state->get('section') == 'menu') {
       $path = $this->getOption('path');
       $menu_type = $form_state->getValue(['menu', 'type']);
-      if ($menu_type == 'normal' && strpos($path, '%') !== FALSE) {
+      if ($menu_type == 'normal' && str_contains($path, '%')) {
         $form_state->setError($form['menu']['type'], $this->t('Views cannot create normal menu links for paths with a % in them.'));
       }
 
@@ -499,6 +533,16 @@ public function submitOptionsForm(&$form, FormStateInterface $form_state) {
       case 'tab_options':
         $this->setOption('tab_options', $form_state->getValue('tab_options'));
         break;
+
+      case 'use_admin_theme':
+        if ($form_state->getValue('use_admin_theme')) {
+          $this->setOption('use_admin_theme', $form_state->getValue('use_admin_theme'));
+        }
+        else {
+          unset($this->options['use_admin_theme']);
+          unset($this->display['display_options']['use_admin_theme']);
+        }
+        break;
     }
   }
 
diff --git a/web/core/modules/views/src/Plugin/views/display/PathPluginBase.php b/web/core/modules/views/src/Plugin/views/display/PathPluginBase.php
index b8eb284a..0dbe55ff 100644
--- a/web/core/modules/views/src/Plugin/views/display/PathPluginBase.php
+++ b/web/core/modules/views/src/Plugin/views/display/PathPluginBase.php
@@ -159,7 +159,7 @@ protected function getRoute($view_id, $display_id) {
           $bits[$pos] = '{' . $arg_id . '}';
           $argument_map[$arg_id] = $arg_id;
         }
-        elseif (strpos($bit, '%') === 0) {
+        elseif (str_starts_with($bit, '%')) {
           // Use the name defined in the path.
           $parameter_name = substr($bit, 1);
           $arg_id = 'arg_' . $arg_counter++;
@@ -492,7 +492,7 @@ public function submitOptionsForm(&$form, FormStateInterface $form_state) {
    */
   protected function validatePath($path) {
     $errors = [];
-    if (strpos($path, '%') === 0) {
+    if (str_starts_with($path, '%')) {
       $errors[] = $this->t('"%" may not be used for the first segment of a path.');
     }
 
diff --git a/web/core/modules/views/src/Plugin/views/field/Boolean.php b/web/core/modules/views/src/Plugin/views/field/Boolean.php
index 817230cb..82b7fda9 100644
--- a/web/core/modules/views/src/Plugin/views/field/Boolean.php
+++ b/web/core/modules/views/src/Plugin/views/field/Boolean.php
@@ -29,6 +29,11 @@
  */
 class Boolean extends FieldPluginBase {
 
+  /**
+   * The allowed formats.
+   */
+  public array $formats;
+
   /**
    * {@inheritdoc}
    */
diff --git a/web/core/modules/views/src/Plugin/views/field/BulkForm.php b/web/core/modules/views/src/Plugin/views/field/BulkForm.php
index 04c58e46..32afb609 100644
--- a/web/core/modules/views/src/Plugin/views/field/BulkForm.php
+++ b/web/core/modules/views/src/Plugin/views/field/BulkForm.php
@@ -11,6 +11,7 @@
 use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Core\Routing\RedirectDestinationTrait;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\TypedData\TranslatableInterface;
 use Drupal\views\Entity\Render\EntityTranslationRenderTrait;
 use Drupal\views\Plugin\views\display\DisplayPluginBase;
@@ -288,17 +289,24 @@ public function viewsForm(&$form, FormStateInterface $form_state) {
       // Render checkboxes for all rows.
       $form[$this->options['id']]['#tree'] = TRUE;
       foreach ($this->view->result as $row_index => $row) {
-        $entity = $this->getEntityTranslation($this->getEntity($row), $row);
-
-        $form[$this->options['id']][$row_index] = [
-          '#type' => 'checkbox',
-          // We are not able to determine a main "title" for each row, so we can
-          // only output a generic label.
-          '#title' => $this->t('Update this item'),
-          '#title_display' => 'invisible',
-          '#default_value' => !empty($form_state->getValue($this->options['id'])[$row_index]) ? 1 : NULL,
-          '#return_value' => $this->calculateEntityBulkFormKey($entity, $use_revision),
-        ];
+        $entity = $this->getEntity($row);
+        if ($entity !== NULL) {
+          $entity = $this->getEntityTranslationByRelationship($entity, $row);
+
+          $form[$this->options['id']][$row_index] = [
+            '#type' => 'checkbox',
+            // We are not able to determine a main "title" for each row, so we
+            // can only output a generic label.
+            '#title' => $this->t('Update this item'),
+            '#title_display' => 'invisible',
+            '#default_value' => !empty($form_state->getValue($this->options['id'])[$row_index]) ? 1 : NULL,
+            '#return_value' => $this->calculateEntityBulkFormKey($entity, $use_revision),
+          ];
+        }
+        else {
+          $form[$this->options['id']][$row_index] = [];
+        }
+
       }
 
       // Replace the form submit button label.
@@ -319,6 +327,7 @@ public function viewsForm(&$form, FormStateInterface $form_state) {
         '#type' => 'select',
         '#title' => $this->options['action_title'],
         '#options' => $this->getBulkOptions(),
+        '#empty_option' => $this->t('- Select -'),
       ];
 
       // Duplicate the form actions into the action container in the header.
@@ -441,6 +450,16 @@ protected function emptySelectedMessage() {
     return $this->t('No items selected.');
   }
 
+  /**
+   * Returns the message that is displayed when no action is selected.
+   *
+   * @return \Drupal\Core\StringTranslation\TranslatableMarkup
+   *   Message displayed when no action is selected.
+   */
+  protected function emptyActionMessage(): TranslatableMarkup {
+    return $this->t('No %title option selected.', ['%title' => $this->options['action_title']]);
+  }
+
   /**
    * {@inheritdoc}
    */
@@ -449,6 +468,11 @@ public function viewsFormValidate(&$form, FormStateInterface $form_state) {
     if (empty($ids) || empty(array_filter($ids))) {
       $form_state->setErrorByName('', $this->emptySelectedMessage());
     }
+
+    $action = $form_state->getValue('action');
+    if (empty($action)) {
+      $form_state->setErrorByName('', $this->emptyActionMessage());
+    }
   }
 
   /**
diff --git a/web/core/modules/views/src/Plugin/views/field/Date.php b/web/core/modules/views/src/Plugin/views/field/Date.php
index e33994b2..5c8c3df2 100644
--- a/web/core/modules/views/src/Plugin/views/field/Date.php
+++ b/web/core/modules/views/src/Plugin/views/field/Date.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\views\Plugin\views\field;
 
+use Drupal\Core\Datetime\TimeZoneFormHelper;
 use Drupal\Core\Entity\EntityStorageInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\views\ResultRow;
@@ -119,7 +120,7 @@ public function buildOptionsForm(&$form, FormStateInterface $form_state) {
       '#type' => 'select',
       '#title' => $this->t('Timezone'),
       '#description' => $this->t('Timezone to be used for date output.'),
-      '#options' => ['' => $this->t('- Default site/user timezone -')] + system_time_zones(FALSE, TRUE),
+      '#options' => ['' => $this->t('- Default site/user timezone -')] + TimeZoneFormHelper::getOptionsListByRegion(),
       '#default_value' => $this->options['timezone'],
     ];
     foreach (array_merge(['custom'], array_keys($date_formats)) as $timezone_date_formats) {
diff --git a/web/core/modules/views/src/Plugin/views/field/EntityField.php b/web/core/modules/views/src/Plugin/views/field/EntityField.php
index d697d520..fe2f28da 100644
--- a/web/core/modules/views/src/Plugin/views/field/EntityField.php
+++ b/web/core/modules/views/src/Plugin/views/field/EntityField.php
@@ -126,6 +126,11 @@ class EntityField extends FieldPluginBase implements CacheableDependencyInterfac
    */
   protected $entityFieldRenderer;
 
+  /**
+   * The fields that we are actually grouping on.
+   */
+  public array $group_fields;
+
   /**
    * Constructs a \Drupal\field\Plugin\views\field\Field object.
    *
@@ -749,7 +754,7 @@ protected function prepareItemsByDelta(array $all_values) {
         $offset = 0;
       }
       else {
-        $delta_limit = $this->options['delta_limit'];
+        $delta_limit = (int) $this->options['delta_limit'];
         $offset = intval($this->options['delta_offset']);
 
         // We should only get here in this case if there is an offset, and in
@@ -895,7 +900,7 @@ public function getItems(ResultRow $values) {
    */
   protected function createEntityForGroupBy(EntityInterface $entity, ResultRow $row) {
     // Retrieve the correct translation object.
-    $processed_entity = clone $this->getEntityFieldRenderer()->getEntityTranslation($entity, $row);
+    $processed_entity = clone $this->getEntityFieldRenderer()->getEntityTranslationByRelationship($entity, $row);
 
     // Copy our group fields into the cloned entity. It is possible this will
     // cause some weirdness, but there is only so much we can hope to do.
@@ -1073,7 +1078,7 @@ public function getValue(ResultRow $values, $field = NULL) {
     }
 
     // Retrieve the translated object.
-    $translated_entity = $this->getEntityFieldRenderer()->getEntityTranslation($entity, $values);
+    $translated_entity = $this->getEntityFieldRenderer()->getEntityTranslationByRelationship($entity, $values);
 
     // Some bundles might not have a specific field, in which case the entity
     // (potentially a fake one) doesn't have it either.
diff --git a/web/core/modules/views/src/Plugin/views/field/EntityLink.php b/web/core/modules/views/src/Plugin/views/field/EntityLink.php
index f7b2877a..3ebe91a1 100644
--- a/web/core/modules/views/src/Plugin/views/field/EntityLink.php
+++ b/web/core/modules/views/src/Plugin/views/field/EntityLink.php
@@ -26,7 +26,8 @@ public function render(ResultRow $row) {
    */
   protected function renderLink(ResultRow $row) {
     if ($this->options['output_url_as_text']) {
-      return $this->getUrlInfo($row)->toString();
+      $url_info = $this->getUrlInfo($row);
+      return $url_info ? $url_info->toString() : '';
     }
     return parent::renderLink($row);
   }
@@ -37,8 +38,11 @@ protected function renderLink(ResultRow $row) {
   protected function getUrlInfo(ResultRow $row) {
     $template = $this->getEntityLinkTemplate();
     $entity = $this->getEntity($row);
+    if ($entity === NULL) {
+      return NULL;
+    }
     if ($this->languageManager->isMultilingual()) {
-      $entity = $this->getEntityTranslation($entity, $row);
+      $entity = $this->getEntityTranslationByRelationship($entity, $row);
     }
     return $entity->toUrl($template)->setAbsolute($this->options['absolute']);
   }
diff --git a/web/core/modules/views/src/Plugin/views/field/EntityOperations.php b/web/core/modules/views/src/Plugin/views/field/EntityOperations.php
index 5818a0cd..f8e36f9f 100644
--- a/web/core/modules/views/src/Plugin/views/field/EntityOperations.php
+++ b/web/core/modules/views/src/Plugin/views/field/EntityOperations.php
@@ -133,7 +133,8 @@ public function render(ResultRow $values) {
     if (empty($entity)) {
       return '';
     }
-    $entity = $this->getEntityTranslation($entity, $values);
+
+    $entity = $this->getEntityTranslationByRelationship($entity, $values);
     $operations = $this->entityTypeManager->getListBuilder($entity->getEntityTypeId())->getOperations($entity);
     if ($this->options['destination']) {
       foreach ($operations as &$operation) {
diff --git a/web/core/modules/views/src/Plugin/views/field/FieldPluginBase.php b/web/core/modules/views/src/Plugin/views/field/FieldPluginBase.php
index 9a4acc14..1e9fc55e 100644
--- a/web/core/modules/views/src/Plugin/views/field/FieldPluginBase.php
+++ b/web/core/modules/views/src/Plugin/views/field/FieldPluginBase.php
@@ -107,6 +107,21 @@ abstract class FieldPluginBase extends HandlerBase implements FieldHandlerInterf
    */
   protected $renderer;
 
+  /**
+   * The last rendered value.
+   */
+  public string|MarkupInterface|NULL $last_render;
+
+  /**
+   * The last rendered text.
+   */
+  public string|MarkupInterface|NULL $last_render_text;
+
+  /**
+   * The last rendered tokens.
+   */
+  public array $last_tokens;
+
   /**
    * Keeps track of the last render index.
    *
@@ -345,7 +360,7 @@ public function elementClasses($row_index = NULL) {
    * {@inheritdoc}
    */
   public function tokenizeValue($value, $row_index = NULL) {
-    if (strpos($value, '{{') !== FALSE) {
+    if (str_contains($value, '{{')) {
       $fake_item = [
         'alter_text' => TRUE,
         'text' => $value,
@@ -405,12 +420,35 @@ public function elementWrapperClasses($row_index = NULL) {
    */
   public function getEntity(ResultRow $values) {
     $relationship_id = $this->options['relationship'];
+    $entity = NULL;
     if ($relationship_id == 'none') {
-      return $values->_entity;
+      $entity = $values->_entity;
     }
     elseif (isset($values->_relationship_entities[$relationship_id])) {
-      return $values->_relationship_entities[$relationship_id];
+      $entity = $values->_relationship_entities[$relationship_id];
     }
+
+    if ($entity === NULL) {
+      // Don't log an error if we're getting an entity for an optional
+      // relationship.
+      if ($relationship_id !== 'none') {
+        $relationship = $this->view->relationship[$relationship_id] ?? NULL;
+        if ($relationship && !$relationship->options['required']) {
+          return NULL;
+        }
+      }
+      \Drupal::logger('views')->error(
+        'The view %id failed to load an entity of type %entity_type at row %index for field %field',
+        [
+          '%id' => $this->view->id(),
+          '%entity_type' => $this->configuration['entity_type'],
+          '%index' => $values->index,
+          '%field' => $this->label() ?: $this->realField,
+        ]
+      );
+      return NULL;
+    }
+    return $entity;
   }
 
   /**
@@ -620,7 +658,7 @@ public function buildOptionsForm(&$form, FormStateInterface $form_state) {
     ];
     $form['element_label_type'] = [
       '#title' => $this->t('Label HTML element'),
-      '#options' => $this->getElements(FALSE),
+      '#options' => $this->getElements(),
       '#type' => 'select',
       '#default_value' => $this->options['element_label_type'],
       '#description' => $this->t('Choose the HTML element to wrap around this label, e.g. H1, H2, etc.'),
@@ -664,7 +702,7 @@ public function buildOptionsForm(&$form, FormStateInterface $form_state) {
     ];
     $form['element_wrapper_type'] = [
       '#title' => $this->t('Wrapper HTML element'),
-      '#options' => $this->getElements(FALSE),
+      '#options' => $this->getElements(),
       '#type' => 'select',
       '#default_value' => $this->options['element_wrapper_type'],
       '#description' => $this->t('Choose the HTML element to wrap around this field and label, e.g. H1, H2, etc. This may not be used if the field and label are not rendered together, such as with a table.'),
@@ -1298,7 +1336,7 @@ public function renderText($alter) {
         // well.
         $base_path = base_path();
         // Checks whether the path starts with the base_path.
-        if (strpos($more_link_path, $base_path) === 0) {
+        if (str_starts_with($more_link_path, $base_path)) {
           $more_link_path = mb_substr($more_link_path, mb_strlen($base_path));
         }
 
@@ -1417,7 +1455,7 @@ protected function renderAsLink($alter, $text, $tokens) {
       // Tokens might have resolved URL's, as is the case for tokens provided by
       // Link fields, so all internal paths will be prefixed by base_path(). For
       // proper further handling reset this to internal:/.
-      if (strpos($path, base_path()) === 0) {
+      if (str_starts_with($path, base_path())) {
         $path = 'internal:/' . substr($path, strlen(base_path()));
       }
 
@@ -1432,7 +1470,7 @@ protected function renderAsLink($alter, $text, $tokens) {
       // 'http://www.example.com'.
       // Only do this when flag for external has been set, $path doesn't contain
       // a scheme and $path doesn't have a leading /.
-      if ($alter['external'] && !parse_url($path, PHP_URL_SCHEME) && strpos($path, '/') !== 0) {
+      if ($alter['external'] && !parse_url($path, PHP_URL_SCHEME) && !str_starts_with($path, '/')) {
         // There is no scheme, add the default 'http://' to the $path.
         $path = "http://" . $path;
       }
diff --git a/web/core/modules/views/src/Plugin/views/field/LinkBase.php b/web/core/modules/views/src/Plugin/views/field/LinkBase.php
index ed8e0ca1..83eec224 100644
--- a/web/core/modules/views/src/Plugin/views/field/LinkBase.php
+++ b/web/core/modules/views/src/Plugin/views/field/LinkBase.php
@@ -164,9 +164,12 @@ public function query() {
    */
   public function render(ResultRow $row) {
     $access = $this->checkUrlAccess($row);
-    $build = ['#markup' => $access->isAllowed() ? $this->renderLink($row) : ''];
-    BubbleableMetadata::createFromObject($access)->applyTo($build);
-    return $build;
+    if ($access) {
+      $build = ['#markup' => $access->isAllowed() ? $this->renderLink($row) : ''];
+      BubbleableMetadata::createFromObject($access)->applyTo($build);
+      return $build;
+    }
+    return '';
   }
 
   /**
@@ -175,12 +178,13 @@ public function render(ResultRow $row) {
    * @param \Drupal\views\ResultRow $row
    *   A view result row.
    *
-   * @return \Drupal\Core\Access\AccessResultInterface
-   *   The access result.
+   * @return \Drupal\Core\Access\AccessResultInterface|null
+   *   The access result, or NULL if the URI elements of the link doesn't exist.
    */
   protected function checkUrlAccess(ResultRow $row) {
-    $url = $this->getUrlInfo($row);
-    return $this->accessManager->checkNamedRoute($url->getRouteName(), $url->getRouteParameters(), $this->currentUser(), TRUE);
+    if ($url = $this->getUrlInfo($row)) {
+      return $this->accessManager->checkNamedRoute($url->getRouteName(), $url->getRouteParameters(), $this->currentUser(), TRUE);
+    }
   }
 
   /**
@@ -189,7 +193,7 @@ protected function checkUrlAccess(ResultRow $row) {
    * @param \Drupal\views\ResultRow $row
    *   A view result row.
    *
-   * @return \Drupal\Core\Url
+   * @return \Drupal\Core\Url|null
    *   The URI elements of the link.
    */
   abstract protected function getUrlInfo(ResultRow $row);
@@ -219,8 +223,8 @@ protected function renderLink(ResultRow $row) {
    */
   protected function addLangcode(ResultRow $row) {
     $entity = $this->getEntity($row);
-    if ($this->languageManager->isMultilingual()) {
-      $this->options['alter']['language'] = $this->getEntityTranslation($entity, $row)->language();
+    if ($entity && $this->languageManager->isMultilingual()) {
+      $this->options['alter']['language'] = $this->getEntityTranslationByRelationship($entity, $row)->language();
     }
   }
 
diff --git a/web/core/modules/views/src/Plugin/views/field/Links.php b/web/core/modules/views/src/Plugin/views/field/Links.php
index 899d0825..af24dfda 100644
--- a/web/core/modules/views/src/Plugin/views/field/Links.php
+++ b/web/core/modules/views/src/Plugin/views/field/Links.php
@@ -4,7 +4,9 @@
 
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\Routing\RedirectDestinationInterface;
 use Drupal\Core\Url as UrlObject;
+use Symfony\Component\DependencyInjection\ContainerInterface;
 
 /**
  * An abstract handler which provides a collection of links.
@@ -13,6 +15,38 @@
  */
 abstract class Links extends FieldPluginBase {
 
+  /**
+   * Constructs a Links object.
+   *
+   * @param array $configuration
+   *   A configuration array containing information about the plugin instance.
+   * @param string $plugin_id
+   *   The plugin_id for the plugin instance.
+   * @param mixed $plugin_definition
+   *   The plugin implementation definition.
+   * @param \Drupal\Core\Routing\RedirectDestinationInterface|null $redirectDestination
+   *   The redirect destination service.
+   */
+  public function __construct(array $configuration, $plugin_id, $plugin_definition, protected ?RedirectDestinationInterface $redirectDestination = NULL) {
+    parent::__construct($configuration, $plugin_id, $plugin_definition);
+    if ($redirectDestination === NULL) {
+      $this->redirectDestination = \Drupal::service('redirect.destination');
+      @trigger_error('Calling' . __METHOD__ . '() without the $redirectDestination argument is deprecated in drupal:10.1.0 and is required in drupal:11.0.0. See https://www.drupal.org/node/3343983', E_USER_DEPRECATED);
+    }
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
+    return new static(
+      $configuration,
+      $plugin_id,
+      $plugin_definition,
+      $container->get('redirect.destination')
+    );
+  }
+
   /**
    * {@inheritdoc}
    */
@@ -84,7 +118,7 @@ protected function getLinks() {
         'title' => $title,
       ];
       if (!empty($this->options['destination'])) {
-        $links[$field]['query'] = \Drupal::destination()->getAsArray();
+        $links[$field]['query'] = $this->redirectDestination->getAsArray();
       }
     }
 
diff --git a/web/core/modules/views/src/Plugin/views/field/Markup.php b/web/core/modules/views/src/Plugin/views/field/Markup.php
index d8f9305e..4fa5df88 100644
--- a/web/core/modules/views/src/Plugin/views/field/Markup.php
+++ b/web/core/modules/views/src/Plugin/views/field/Markup.php
@@ -20,6 +20,11 @@
  */
 class Markup extends FieldPluginBase {
 
+  /**
+   * The format to use for this field.
+   */
+  public string $format;
+
   /**
    * {@inheritdoc}
    */
diff --git a/web/core/modules/views/src/Plugin/views/field/RenderedEntity.php b/web/core/modules/views/src/Plugin/views/field/RenderedEntity.php
index dce5efcd..8c96d87e 100644
--- a/web/core/modules/views/src/Plugin/views/field/RenderedEntity.php
+++ b/web/core/modules/views/src/Plugin/views/field/RenderedEntity.php
@@ -129,15 +129,17 @@ public function buildOptionsForm(&$form, FormStateInterface $form_state) {
    * {@inheritdoc}
    */
   public function render(ResultRow $values) {
-    $entity = $this->getEntityTranslation($this->getEntity($values), $values);
+    $entity = $this->getEntity($values);
+    if ($entity === NULL) {
+      return '';
+    }
+    $entity = $this->getEntityTranslationByRelationship($entity, $values);
     $build = [];
-    if (isset($entity)) {
-      $access = $entity->access('view', NULL, TRUE);
-      $build['#access'] = $access;
-      if ($access->isAllowed()) {
-        $view_builder = $this->entityTypeManager->getViewBuilder($this->getEntityTypeId());
-        $build += $view_builder->view($entity, $this->options['view_mode'], $entity->language()->getId());
-      }
+    $access = $entity->access('view', NULL, TRUE);
+    $build['#access'] = $access;
+    if ($access->isAllowed()) {
+      $view_builder = $this->entityTypeManager->getViewBuilder($this->getEntityTypeId());
+      $build += $view_builder->view($entity, $this->options['view_mode'], $entity->language()->getId());
     }
     return $build;
   }
@@ -163,7 +165,7 @@ public function getCacheTags() {
     foreach ($view_displays as $view_display) {
       $tags[] = $view_display->getCacheTags();
     }
-    return array_merge([], ...$tags);
+    return array_merge(...$tags);
   }
 
   /**
diff --git a/web/core/modules/views/src/Plugin/views/filter/BooleanOperator.php b/web/core/modules/views/src/Plugin/views/filter/BooleanOperator.php
index 4fae0249..81c2f47a 100644
--- a/web/core/modules/views/src/Plugin/views/filter/BooleanOperator.php
+++ b/web/core/modules/views/src/Plugin/views/filter/BooleanOperator.php
@@ -54,6 +54,16 @@ class BooleanOperator extends FilterPluginBase {
    */
   public $accept_null = FALSE;
 
+  /**
+   * The value title.
+   */
+  public string $value_value;
+
+  /**
+   * The value options.
+   */
+  public ?array $valueOptions;
+
   /**
    * {@inheritdoc}
    */
diff --git a/web/core/modules/views/src/Plugin/views/filter/Bundle.php b/web/core/modules/views/src/Plugin/views/filter/Bundle.php
index 703173d7..6ec83835 100644
--- a/web/core/modules/views/src/Plugin/views/filter/Bundle.php
+++ b/web/core/modules/views/src/Plugin/views/filter/Bundle.php
@@ -45,6 +45,11 @@ class Bundle extends InOperator {
    */
   protected $bundleInfoService;
 
+  /**
+   * The bundle key.
+   */
+  public string $real_field;
+
   /**
    * Constructs a Bundle object.
    *
diff --git a/web/core/modules/views/src/Plugin/views/filter/Date.php b/web/core/modules/views/src/Plugin/views/filter/Date.php
index 9aa8168f..e15f0b24 100644
--- a/web/core/modules/views/src/Plugin/views/filter/Date.php
+++ b/web/core/modules/views/src/Plugin/views/filter/Date.php
@@ -111,7 +111,7 @@ protected function hasValidGroupedValue(array $group) {
     // one greater.
     $operators = $this->operators();
     $expected = $operators[$group['operator']]['values'] + 1;
-    $actual = count(array_filter($group['value'], 'static::arrayFilterZero'));
+    $actual = count(array_filter($group['value'], [static::class, 'arrayFilterZero']));
 
     return $actual == $expected;
   }
diff --git a/web/core/modules/views/src/Plugin/views/filter/FilterPluginBase.php b/web/core/modules/views/src/Plugin/views/filter/FilterPluginBase.php
index f95ad61c..9e69cfda 100644
--- a/web/core/modules/views/src/Plugin/views/filter/FilterPluginBase.php
+++ b/web/core/modules/views/src/Plugin/views/filter/FilterPluginBase.php
@@ -83,6 +83,13 @@ abstract class FilterPluginBase extends HandlerBase implements CacheableDependen
    */
   public $always_required = FALSE;
 
+  /**
+   * Keyed array by alias of table relations.
+   *
+   * @var string[]
+   */
+  public ?array $tableAliases;
+
   /**
    * Overrides \Drupal\views\Plugin\views\HandlerBase::init().
    *
@@ -706,7 +713,7 @@ protected function hasValidGroupedValue(array $group) {
         // types). Ensure at least the minimum number of values is present for
         // this entry to be considered valid.
         $min_values = $operators[$group['operator']]['values'];
-        $actual_values = count(array_filter($group['value'], 'static::arrayFilterZero'));
+        $actual_values = count(array_filter($group['value'], [static::class, 'arrayFilterZero']));
         return $actual_values >= $min_values;
       }
     }
@@ -1158,7 +1165,7 @@ protected function buildExposedFiltersGroupForm(&$form, FormStateInterface $form
             }
           }
 
-          if (!empty($this->options['group_info']['group_items'][$item_id]['value'][$child])) {
+          if (isset($this->options['group_info']['group_items'][$item_id]['value'][$child])) {
             $row['value'][$child]['#default_value'] = $this->options['group_info']['group_items'][$item_id]['value'][$child];
           }
         }
diff --git a/web/core/modules/views/src/Plugin/views/filter/ManyToOne.php b/web/core/modules/views/src/Plugin/views/filter/ManyToOne.php
index 313cfe01..5f326be1 100644
--- a/web/core/modules/views/src/Plugin/views/filter/ManyToOne.php
+++ b/web/core/modules/views/src/Plugin/views/filter/ManyToOne.php
@@ -132,7 +132,7 @@ protected function opHelper() {
     }
     // Form API returns unchecked options in the form of option_id => 0. This
     // breaks the generated query for "is all of" filters so we remove them.
-    $this->value = array_filter($this->value, 'static::arrayFilterZero');
+    $this->value = array_filter($this->value, [static::class, 'arrayFilterZero']);
     $this->helper->addFilter();
   }
 
diff --git a/web/core/modules/views/src/Plugin/views/join/FieldOrLanguageJoin.php b/web/core/modules/views/src/Plugin/views/join/FieldOrLanguageJoin.php
index 44734d45..25dcc92b 100644
--- a/web/core/modules/views/src/Plugin/views/join/FieldOrLanguageJoin.php
+++ b/web/core/modules/views/src/Plugin/views/join/FieldOrLanguageJoin.php
@@ -80,7 +80,7 @@ protected function joinAddExtra(&$arguments, &$condition, $table, SelectInterfac
       // Remove and store the langcode OR bundle join condition extra.
       $language_bundle_conditions = [];
       foreach ($extras as $key => $extra) {
-        if (strpos($extra, '.langcode') !== FALSE || strpos($extra, '.bundle') !== FALSE) {
+        if (str_contains($extra, '.langcode') || str_contains($extra, '.bundle')) {
           $language_bundle_conditions[] = $extra;
           unset($extras[$key]);
         }
diff --git a/web/core/modules/views/src/Plugin/views/join/JoinPluginBase.php b/web/core/modules/views/src/Plugin/views/join/JoinPluginBase.php
index 14137a8c..57c18eee 100644
--- a/web/core/modules/views/src/Plugin/views/join/JoinPluginBase.php
+++ b/web/core/modules/views/src/Plugin/views/join/JoinPluginBase.php
@@ -150,7 +150,6 @@
  *
  * Extensions of this class can be used to create more interesting joins.
  */
-#[\AllowDynamicProperties]
 class JoinPluginBase extends PluginBase implements JoinPluginInterface {
 
   /**
diff --git a/web/core/modules/views/src/Plugin/views/join/Subquery.php b/web/core/modules/views/src/Plugin/views/join/Subquery.php
index 8ef5342d..ec9eefd9 100644
--- a/web/core/modules/views/src/Plugin/views/join/Subquery.php
+++ b/web/core/modules/views/src/Plugin/views/join/Subquery.php
@@ -19,6 +19,11 @@
  */
 class Subquery extends JoinPluginBase {
 
+  /**
+   * The left join query.
+   */
+  public string $left_query;
+
   /**
    * Constructs a Subquery object.
    */
diff --git a/web/core/modules/views/src/Plugin/views/pager/Some.php b/web/core/modules/views/src/Plugin/views/pager/Some.php
index 2970b5a5..675c34b5 100644
--- a/web/core/modules/views/src/Plugin/views/pager/Some.php
+++ b/web/core/modules/views/src/Plugin/views/pager/Some.php
@@ -69,4 +69,11 @@ public function query() {
     $this->view->query->setOffset($this->options['offset']);
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public function postExecute(&$result): void {
+    $this->total_items = count($result);
+  }
+
 }
diff --git a/web/core/modules/views/src/Plugin/views/pager/SqlBase.php b/web/core/modules/views/src/Plugin/views/pager/SqlBase.php
index c3b1d999..bf2a328d 100644
--- a/web/core/modules/views/src/Plugin/views/pager/SqlBase.php
+++ b/web/core/modules/views/src/Plugin/views/pager/SqlBase.php
@@ -227,7 +227,7 @@ public function validateOptionsForm(&$form, FormStateInterface $form_state) {
     // Only accept integer values.
     $error = FALSE;
     $exposed_options = $form_state->getValue(['pager_options', 'expose', 'items_per_page_options']);
-    if (strpos($exposed_options, '.') !== FALSE) {
+    if (str_contains($exposed_options, '.')) {
       $error = TRUE;
     }
     $options = explode(',', $exposed_options);
diff --git a/web/core/modules/views/src/Plugin/views/query/MysqlDateSql.php b/web/core/modules/views/src/Plugin/views/query/MysqlDateSql.php
index 00ad873b..07ea4c4a 100644
--- a/web/core/modules/views/src/Plugin/views/query/MysqlDateSql.php
+++ b/web/core/modules/views/src/Plugin/views/query/MysqlDateSql.php
@@ -27,6 +27,7 @@ class MysqlDateSql implements DateSqlInterface {
   protected static $replace = [
     'Y' => '%Y',
     'y' => '%y',
+    'o' => '%x',
     'M' => '%b',
     'm' => '%m',
     'n' => '%c',
diff --git a/web/core/modules/views/src/Plugin/views/query/QueryPluginBase.php b/web/core/modules/views/src/Plugin/views/query/QueryPluginBase.php
index 2d049ad5..1e0740fc 100644
--- a/web/core/modules/views/src/Plugin/views/query/QueryPluginBase.php
+++ b/web/core/modules/views/src/Plugin/views/query/QueryPluginBase.php
@@ -47,6 +47,11 @@ abstract class QueryPluginBase extends PluginBase implements CacheableDependency
    */
   protected $limit;
 
+  /**
+   * The OFFSET on the query.
+   */
+  public int $offset;
+
   /**
    * Controls how the WHERE and HAVING groups are put together.
    *
diff --git a/web/core/modules/views/src/Plugin/views/query/Sql.php b/web/core/modules/views/src/Plugin/views/query/Sql.php
index 12c55e85..0247bf8c 100644
--- a/web/core/modules/views/src/Plugin/views/query/Sql.php
+++ b/web/core/modules/views/src/Plugin/views/query/Sql.php
@@ -135,6 +135,11 @@ class Sql extends QueryPluginBase {
    */
   protected $messenger;
 
+  /**
+   * The count field definition.
+   */
+  public array $count_field;
+
   /**
    * Constructs a Sql object.
    *
@@ -1434,7 +1439,7 @@ public function query($get_count = FALSE) {
    * Get the arguments attached to the WHERE and HAVING clauses of this query.
    */
   public function getWhereArgs() {
-    return array_merge([], ...array_column($this->where, 'args'), ...array_column($this->having, 'args'));
+    return array_merge(...array_column($this->where, 'args'), ...array_column($this->having, 'args'));
   }
 
   /**
diff --git a/web/core/modules/views/src/Plugin/views/relationship/EntityReverse.php b/web/core/modules/views/src/Plugin/views/relationship/EntityReverse.php
index 7f6d26b8..64c3d705 100644
--- a/web/core/modules/views/src/Plugin/views/relationship/EntityReverse.php
+++ b/web/core/modules/views/src/Plugin/views/relationship/EntityReverse.php
@@ -15,6 +15,16 @@
  */
 class EntityReverse extends RelationshipPluginBase {
 
+  /**
+   * The views plugin join manager.
+   */
+  public ViewsHandlerManager $joinManager;
+
+  /**
+   * The alias for the left table.
+   */
+  public string $first_alias;
+
   /**
    * Constructs an EntityReverse object.
    *
@@ -69,13 +79,7 @@ public function query() {
       $first['extra'] = $this->definition['join_extra'];
     }
 
-    if (!empty($def['join_id'])) {
-      $id = $def['join_id'];
-    }
-    else {
-      $id = 'standard';
-    }
-    $first_join = $this->joinManager->createInstance($id, $first);
+    $first_join = $this->joinManager->createInstance('standard', $first);
 
     $this->first_alias = $this->query->addTable($this->definition['field table'], $this->relationship, $first_join);
 
@@ -93,13 +97,7 @@ public function query() {
       $second['type'] = 'INNER';
     }
 
-    if (!empty($def['join_id'])) {
-      $id = $def['join_id'];
-    }
-    else {
-      $id = 'standard';
-    }
-    $second_join = $this->joinManager->createInstance($id, $second);
+    $second_join = $this->joinManager->createInstance('standard', $second);
     $second_join->adjusted = TRUE;
 
     // use a short alias for this:
diff --git a/web/core/modules/views/src/Plugin/views/relationship/GroupwiseMax.php b/web/core/modules/views/src/Plugin/views/relationship/GroupwiseMax.php
index 7c8c5140..be72d1da 100644
--- a/web/core/modules/views/src/Plugin/views/relationship/GroupwiseMax.php
+++ b/web/core/modules/views/src/Plugin/views/relationship/GroupwiseMax.php
@@ -61,6 +61,11 @@
  */
 class GroupwiseMax extends RelationshipPluginBase {
 
+  /**
+   * The namespace of the subquery.
+   */
+  public string $subquery_namespace;
+
   /**
    * {@inheritdoc}
    */
@@ -326,7 +331,7 @@ protected function alterSubqueryCondition(AlterableInterface $query, &$condition
   protected function conditionNamespace($string) {
     $parts = explode(' = ', $string);
     foreach ($parts as &$part) {
-      if (strpos($part, '.') !== FALSE) {
+      if (str_contains($part, '.')) {
         $part = '"' . str_replace('.', $this->subquery_namespace . '".', $part);
       }
     }
diff --git a/web/core/modules/views/src/Plugin/views/row/EntityRow.php b/web/core/modules/views/src/Plugin/views/row/EntityRow.php
index 2bffbcfa..bbcdee89 100644
--- a/web/core/modules/views/src/Plugin/views/row/EntityRow.php
+++ b/web/core/modules/views/src/Plugin/views/row/EntityRow.php
@@ -30,13 +30,6 @@ class EntityRow extends RowPluginBase {
    */
   public $base_table;
 
-  /**
-   * The actual field which is used for the entity id.
-   *
-   * @var string
-   */
-  public $base_field;
-
   /**
    * Stores the entity type ID of the result entities.
    *
@@ -209,7 +202,11 @@ public function summaryTitle() {
    */
   public function query() {
     parent::query();
-    $this->getEntityTranslationRenderer()->query($this->view->getQuery());
+    $relationship_table = NULL;
+    if (isset($this->options['relationship'], $this->view->relationship[$this->options['relationship']])) {
+      $relationship_table = $this->view->relationship[$this->options['relationship']]->alias;
+    }
+    $this->getEntityTranslationRenderer()->query($this->view->getQuery(), $relationship_table);
   }
 
   /**
@@ -218,7 +215,7 @@ public function query() {
   public function preRender($result) {
     parent::preRender($result);
     if ($result) {
-      $this->getEntityTranslationRenderer()->preRender($result);
+      $this->getEntityTranslationRenderer()->preRenderByRelationship($result, isset($this->options['relationship']) ? $this->options['relationship'] : 'none');
     }
   }
 
@@ -226,7 +223,7 @@ public function preRender($result) {
    * {@inheritdoc}
    */
   public function render($row) {
-    return $this->getEntityTranslationRenderer()->render($row);
+    return $this->getEntityTranslationRenderer()->renderByRelationship($row, isset($this->options['relationship']) ? $this->options['relationship'] : 'none');
   }
 
   /**
diff --git a/web/core/modules/views/src/Plugin/views/row/RowPluginBase.php b/web/core/modules/views/src/Plugin/views/row/RowPluginBase.php
index e1aa9ad4..d3deb5b9 100644
--- a/web/core/modules/views/src/Plugin/views/row/RowPluginBase.php
+++ b/web/core/modules/views/src/Plugin/views/row/RowPluginBase.php
@@ -49,6 +49,16 @@ abstract class RowPluginBase extends PluginBase {
    */
   protected $usesFields = FALSE;
 
+  /**
+   * The actual field used.
+   */
+  public string $base_field;
+
+  /**
+   * The field alias.
+   */
+  public string $field_alias;
+
   /**
    * Returns the usesFields property.
    *
@@ -90,7 +100,7 @@ public function buildOptionsForm(&$form, FormStateInterface $form_state) {
         $data = Views::viewsData()->get($relationship['table']);
         $base = $data[$relationship['field']]['relationship']['base'];
         if ($base == $this->base_table) {
-          $relationship_handler->init($executable, $relationship);
+          $relationship_handler->init($executable, $this->displayHandler, $relationship);
           $relationship_options[$relationship['id']] = $relationship_handler->adminLabel();
         }
       }
diff --git a/web/core/modules/views/src/Plugin/views/row/RssFields.php b/web/core/modules/views/src/Plugin/views/row/RssFields.php
index aaa009c4..734e338b 100644
--- a/web/core/modules/views/src/Plugin/views/row/RssFields.php
+++ b/web/core/modules/views/src/Plugin/views/row/RssFields.php
@@ -126,15 +126,6 @@ public function render($row) {
     if (!isset($row_index)) {
       $row_index = 0;
     }
-    if (function_exists('rdf_get_namespaces')) {
-      // Merge RDF namespaces in the XML namespaces in case they are used
-      // further in the RSS content.
-      $xml_rdf_namespaces = [];
-      foreach (rdf_get_namespaces() as $prefix => $uri) {
-        $xml_rdf_namespaces['xmlns:' . $prefix] = $uri;
-      }
-      $this->view->style_plugin->namespaces += $xml_rdf_namespaces;
-    }
 
     // Create the RSS item object.
     $item = new \stdClass();
@@ -215,7 +206,7 @@ public function getField($index, $field_id) {
   protected function getAbsoluteUrl($url_string) {
     // If the given URL already starts with a leading slash, it's been processed
     // and we need to simply make it an absolute path by prepending the host.
-    if (strpos($url_string, '/') === 0) {
+    if (str_starts_with($url_string, '/')) {
       $host = \Drupal::request()->getSchemeAndHttpHost();
       // @todo Views should expect and store a leading /.
       // @see https://www.drupal.org/node/2423913
diff --git a/web/core/modules/views/src/Plugin/views/sort/GroupByNumeric.php b/web/core/modules/views/src/Plugin/views/sort/GroupByNumeric.php
index 33bc78cc..bbfaa63c 100644
--- a/web/core/modules/views/src/Plugin/views/sort/GroupByNumeric.php
+++ b/web/core/modules/views/src/Plugin/views/sort/GroupByNumeric.php
@@ -3,6 +3,7 @@
 namespace Drupal\views\Plugin\views\sort;
 
 use Drupal\views\Plugin\views\display\DisplayPluginBase;
+use Drupal\views\Plugin\views\HandlerBase;
 use Drupal\views\ViewExecutable;
 use Drupal\views\Views;
 
@@ -16,7 +17,7 @@ class GroupByNumeric extends SortPluginBase {
   /**
    * The original handler.
    */
-  protected $handler;
+  protected HandlerBase $handler;
 
   /**
    * {@inheritdoc}
diff --git a/web/core/modules/views/src/Plugin/views/style/Rss.php b/web/core/modules/views/src/Plugin/views/style/Rss.php
index 3bd5fb94..f8973550 100644
--- a/web/core/modules/views/src/Plugin/views/style/Rss.php
+++ b/web/core/modules/views/src/Plugin/views/style/Rss.php
@@ -20,6 +20,16 @@
  */
 class Rss extends StylePluginBase {
 
+  /**
+   * The RSS namespaces.
+   */
+  public array $namespaces;
+
+  /**
+   * The channel elements.
+   */
+  public array $channel_elements;
+
   /**
    * {@inheritdoc}
    */
diff --git a/web/core/modules/views/src/Plugin/views/style/StylePluginBase.php b/web/core/modules/views/src/Plugin/views/style/StylePluginBase.php
index d05a34d5..f0c34b14 100644
--- a/web/core/modules/views/src/Plugin/views/style/StylePluginBase.php
+++ b/web/core/modules/views/src/Plugin/views/style/StylePluginBase.php
@@ -109,6 +109,13 @@ abstract class StylePluginBase extends PluginBase {
    */
   protected $defaultFieldLabels = FALSE;
 
+  /**
+   * Keyed array by placeholder a cached per row tokens to render.
+   *
+   * @var string[]
+   */
+  public array $render_tokens = [];
+
   /**
    * Overrides \Drupal\views\Plugin\views\PluginBase::init().
    *
@@ -191,7 +198,7 @@ public function usesFields() {
   public function usesTokens() {
     if ($this->usesRowClass()) {
       $class = $this->options['row_class'];
-      if (strpos($class, '{{') !== FALSE) {
+      if (str_contains($class, '{{')) {
         return TRUE;
       }
     }
@@ -228,7 +235,7 @@ public function getRowClass($row_index) {
    * Take a value and apply token replacement logic to it.
    */
   public function tokenizeValue($value, $row_index) {
-    if (strpos($value, '{{') !== FALSE) {
+    if (str_contains($value, '{{')) {
       // Row tokens might be empty, for example for node row style.
       $tokens = $this->rowTokens[$row_index] ?? [];
       if (!empty($this->view->build_info['substitutions'])) {
@@ -377,25 +384,6 @@ public function validateOptionsForm(&$form, FormStateInterface $form_state) {
     }
   }
 
-  /**
-   * Provide a form in the views wizard if this style is selected.
-   *
-   * @param array $form
-   *   An associative array containing the structure of the form.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
-   *   The current state of the form.
-   * @param string $type
-   *   The display type, either block or page.
-   *
-   * @deprecated in drupal:9.2.0 and is removed from drupal:10.0.0. No direct
-   *   replacement is provided.
-   *
-   * @see https://www.drupal.org/node/3186502
-   */
-  public function wizardForm(&$form, FormStateInterface $form_state, $type) {
-    @trigger_error(__METHOD__ . '() is deprecated in drupal:9.2.0 and is removed from drupal:10.0.0. No direct replacement is provided. See https://www.drupal.org/node/3186502', E_USER_DEPRECATED);
-  }
-
   /**
    * Alter the options of a display before they are added to the view.
    *
diff --git a/web/core/modules/views/src/Plugin/views/wizard/WizardPluginBase.php b/web/core/modules/views/src/Plugin/views/wizard/WizardPluginBase.php
index 41fa4312..6205b97e 100644
--- a/web/core/modules/views/src/Plugin/views/wizard/WizardPluginBase.php
+++ b/web/core/modules/views/src/Plugin/views/wizard/WizardPluginBase.php
@@ -140,16 +140,12 @@ public static function create(ContainerInterface $container, array $configuratio
   /**
    * Constructs a WizardPluginBase object.
    */
-  public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeBundleInfoInterface $bundle_info_service, MenuParentFormSelectorInterface $parent_form_selector = NULL) {
+  public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeBundleInfoInterface $bundle_info_service, MenuParentFormSelectorInterface $parent_form_selector) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
 
     $this->bundleInfoService = $bundle_info_service;
     $this->base_table = $this->definition['base_table'];
 
-    if (!$parent_form_selector) {
-      @trigger_error('Calling ' . __METHOD__ . '() without the $parent_form_selector argument is deprecated in drupal:9.3.0 and the $parent_form_selector argument will be required in drupal:10.0.0. See https://www.drupal.org/node/3027559', E_USER_DEPRECATED);
-      $parent_form_selector = \Drupal::service('menu.parent_form_selector');
-    }
     $this->parentFormSelector = $parent_form_selector;
 
     $entity_types = \Drupal::entityTypeManager()->getDefinitions();
diff --git a/web/core/modules/views/src/Tests/AssertViewsCacheTagsTrait.php b/web/core/modules/views/src/Tests/AssertViewsCacheTagsTrait.php
index e40fbb95..897290b2 100644
--- a/web/core/modules/views/src/Tests/AssertViewsCacheTagsTrait.php
+++ b/web/core/modules/views/src/Tests/AssertViewsCacheTagsTrait.php
@@ -3,15 +3,12 @@
 namespace Drupal\views\Tests;
 
 use Drupal\Core\Cache\Cache;
-use Drupal\Tests\system\Functional\Cache\AssertPageCacheContextsAndTagsTrait;
 use Drupal\views\Plugin\views\display\DisplayPluginBase;
 use Drupal\views\ViewExecutable;
 use Symfony\Component\HttpFoundation\Request;
 
 trait AssertViewsCacheTagsTrait {
 
-  use AssertPageCacheContextsAndTagsTrait;
-
   /**
    * Asserts a view's result & render cache items' cache tags.
    *
diff --git a/web/core/modules/views/src/Tests/TestHelperPlugin.php b/web/core/modules/views/src/Tests/TestHelperPlugin.php
index 51d20bd6..511fa036 100644
--- a/web/core/modules/views/src/Tests/TestHelperPlugin.php
+++ b/web/core/modules/views/src/Tests/TestHelperPlugin.php
@@ -24,7 +24,7 @@ class TestHelperPlugin extends PluginBase {
    * @see \Drupal\views\Plugin\views\PluginBase::setOptionDefaults()
    */
   public function testSetOptionDefaults(&$storage, $options, $level = 0) {
-    $this->setOptionDefaults($storage, $options, $level);
+    $this->setOptionDefaults($storage, $options);
   }
 
   /**
diff --git a/web/core/modules/views/src/Tests/ViewTestData.php b/web/core/modules/views/src/Tests/ViewTestData.php
index 737f4a23..b5e01d9c 100644
--- a/web/core/modules/views/src/Tests/ViewTestData.php
+++ b/web/core/modules/views/src/Tests/ViewTestData.php
@@ -97,6 +97,7 @@ public static function schemaDefinition() {
           'unsigned' => TRUE,
           'not null' => TRUE,
           'default' => 0,
+          'size' => 'big',
         ],
         'status' => [
           'description' => "The status of this record",
diff --git a/web/core/modules/views/src/ViewExecutable.php b/web/core/modules/views/src/ViewExecutable.php
index 359c9159..674e12ba 100644
--- a/web/core/modules/views/src/ViewExecutable.php
+++ b/web/core/modules/views/src/ViewExecutable.php
@@ -73,6 +73,16 @@ class ViewExecutable {
    */
   protected $ajaxEnabled = FALSE;
 
+  /**
+   * The plugin name.
+   */
+  public ?string $plugin_name;
+
+  /**
+   * The build execution time.
+   */
+  public string|float $build_time;
+
   /**
    * Where the results of a query will go.
    *
@@ -244,7 +254,7 @@ class ViewExecutable {
   public $override_url;
 
   /**
-   * Allow to override the path used for generated urls.
+   * Allow to override the path used for generated URLs.
    *
    * @var string
    */
@@ -695,7 +705,7 @@ public function getExposedInput() {
 
       $this->exposed_input = \Drupal::request()->query->all();
       // unset items that are definitely not our input:
-      foreach (['page', 'q'] as $key) {
+      foreach (['page', 'q', 'ajax_page_state'] as $key) {
         if (isset($this->exposed_input[$key])) {
           unset($this->exposed_input[$key]);
         }
@@ -1962,7 +1972,7 @@ public function getUrl($args = NULL, $display_id = NULL) {
     $path = $this->getPath();
 
     // Don't bother working if there's nothing to do:
-    if (empty($path) || (empty($args) && strpos($path, '%') === FALSE)) {
+    if (empty($path) || (empty($args) && !str_contains($path, '%'))) {
       return $display_handler->getUrlInfo();
     }
 
diff --git a/web/core/modules/views/src/ViewsConfigUpdater.php b/web/core/modules/views/src/ViewsConfigUpdater.php
index 2ddb741c..a140898f 100644
--- a/web/core/modules/views/src/ViewsConfigUpdater.php
+++ b/web/core/modules/views/src/ViewsConfigUpdater.php
@@ -2,23 +2,18 @@
 
 namespace Drupal\views;
 
-use Drupal\Component\Utility\NestedArray;
-use Drupal\Core\Config\Schema\ArrayElement;
+use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Config\TypedConfigManagerInterface;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
-use Drupal\Core\Entity\FieldableEntityInterface;
-use Drupal\Core\Entity\Sql\DefaultTableMapping;
+use Drupal\Core\Field\Plugin\Field\FieldFormatter\TimestampFormatter;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
 /**
  * Provides a BC layer for modules providing old configurations.
  *
  * @internal
- *   This class is only meant to fix outdated views configuration and its
- *   methods should not be invoked directly. It will be removed once all the
- *   deprecated methods have been removed.
  */
 class ViewsConfigUpdater implements ContainerInjectionInterface {
 
@@ -50,6 +45,13 @@ class ViewsConfigUpdater implements ContainerInjectionInterface {
    */
   protected $viewsData;
 
+  /**
+   * The formatter plugin manager service.
+   *
+   * @var \Drupal\Component\Plugin\PluginManagerInterface
+   */
+  protected $formatterPluginManager;
+
   /**
    * An array of helper data for the multivalue base field update.
    *
@@ -82,17 +84,21 @@ class ViewsConfigUpdater implements ContainerInjectionInterface {
    *   The typed config manager.
    * @param \Drupal\views\ViewsData $views_data
    *   The views data service.
+   * @param \Drupal\Component\Plugin\PluginManagerInterface $formatter_plugin_manager
+   *   The formatter plugin manager service.
    */
   public function __construct(
     EntityTypeManagerInterface $entity_type_manager,
     EntityFieldManagerInterface $entity_field_manager,
     TypedConfigManagerInterface $typed_config_manager,
-    ViewsData $views_data
+    ViewsData $views_data,
+    PluginManagerInterface $formatter_plugin_manager
   ) {
     $this->entityTypeManager = $entity_type_manager;
     $this->entityFieldManager = $entity_field_manager;
     $this->typedConfigManager = $typed_config_manager;
     $this->viewsData = $views_data;
+    $this->formatterPluginManager = $formatter_plugin_manager;
   }
 
   /**
@@ -103,7 +109,8 @@ public static function create(ContainerInterface $container) {
       $container->get('entity_type.manager'),
       $container->get('entity_field.manager'),
       $container->get('config.typed'),
-      $container->get('views.views_data')
+      $container->get('views.views_data'),
+      $container->get('plugin.manager.field.formatter')
     );
   }
 
@@ -129,25 +136,63 @@ public function setDeprecationsEnabled($enabled) {
   public function updateAll(ViewEntityInterface $view) {
     return $this->processDisplayHandlers($view, FALSE, function (&$handler, $handler_type, $key, $display_id) use ($view) {
       $changed = FALSE;
-      if ($this->processEntityLinkUrlHandler($handler, $handler_type, $view)) {
-        $changed = TRUE;
-      }
-      if ($this->processOperatorDefaultsHandler($handler, $handler_type, $view)) {
+      if ($this->processResponsiveImageLazyLoadFieldHandler($handler, $handler_type, $view)) {
         $changed = TRUE;
       }
-      if ($this->processMultivalueBaseFieldHandler($handler, $handler_type, $key, $display_id, $view)) {
+      if ($this->processTimestampFormatterTimeDiffUpdateHandler($handler, $handler_type)) {
         $changed = TRUE;
       }
-      if ($this->processSortFieldIdentifierUpdateHandler($handler, $handler_type)) {
-        $changed = TRUE;
-      }
-      if ($this->processImageLazyLoadFieldHandler($handler, $handler_type, $view)) {
+      if ($this->processRevisionFieldHyphenFix($view)) {
         $changed = TRUE;
       }
       return $changed;
     });
   }
 
+  /**
+   * Add lazy load options to all responsive_image type field configurations.
+   *
+   * @param \Drupal\views\ViewEntityInterface $view
+   *   The View to update.
+   *
+   * @return bool
+   *   Whether the view was updated.
+   */
+  public function needsResponsiveImageLazyLoadFieldUpdate(ViewEntityInterface $view): bool {
+    return $this->processDisplayHandlers($view, TRUE, function (&$handler, $handler_type) use ($view) {
+      return $this->processResponsiveImageLazyLoadFieldHandler($handler, $handler_type, $view);
+    });
+  }
+
+  /**
+   * Processes responsive_image type fields.
+   *
+   * @param array $handler
+   *   A display handler.
+   * @param string $handler_type
+   *   The handler type.
+   * @param \Drupal\views\ViewEntityInterface $view
+   *   The View being updated.
+   *
+   * @return bool
+   *   Whether the handler was updated.
+   */
+  protected function processResponsiveImageLazyLoadFieldHandler(array &$handler, string $handler_type, ViewEntityInterface $view): bool {
+    $changed = FALSE;
+
+    // Add any missing settings for lazy loading.
+    if (($handler_type === 'field')
+      && isset($handler['plugin_id'], $handler['type'])
+      && $handler['plugin_id'] === 'field'
+      && $handler['type'] === 'responsive_image'
+      && !isset($handler['settings']['image_loading'])) {
+      $handler['settings']['image_loading'] = ['attribute' => 'eager'];
+      $changed = TRUE;
+    }
+
+    return $changed;
+  }
+
   /**
    * Processes all display handlers.
    *
@@ -190,28 +235,22 @@ protected function processDisplayHandlers(ViewEntityInterface $view, $return_on_
   }
 
   /**
-   * Add additional settings to the entity link field.
+   * Add eager load option to all oembed type field configurations.
    *
    * @param \Drupal\views\ViewEntityInterface $view
    *   The View to update.
    *
    * @return bool
    *   Whether the view was updated.
-   *
-   * @deprecated in drupal:9.0.0 and is removed from drupal:10.0.0.
-   *   Module-provided Views configuration should be updated to accommodate the
-   *   changes described below.
-   *
-   * @see https://www.drupal.org/node/2857891
    */
-  public function needsEntityLinkUrlUpdate(ViewEntityInterface $view) {
+  public function needsOembedEagerLoadFieldUpdate(ViewEntityInterface $view) {
     return $this->processDisplayHandlers($view, TRUE, function (&$handler, $handler_type) use ($view) {
-      return $this->processEntityLinkUrlHandler($handler, $handler_type, $view);
+      return $this->processOembedEagerLoadFieldHandler($handler, $handler_type, $view);
     });
   }
 
   /**
-   * Processes entity link URL fields.
+   * Processes oembed type fields.
    *
    * @param array $handler
    *   A display handler.
@@ -223,342 +262,154 @@ public function needsEntityLinkUrlUpdate(ViewEntityInterface $view) {
    * @return bool
    *   Whether the handler was updated.
    */
-  protected function processEntityLinkUrlHandler(array &$handler, $handler_type, ViewEntityInterface $view) {
+  protected function processOembedEagerLoadFieldHandler(array &$handler, string $handler_type, ViewEntityInterface $view): bool {
     $changed = FALSE;
 
-    if ($handler_type === 'field') {
-      if (isset($handler['plugin_id']) && $handler['plugin_id'] === 'entity_link') {
-        // Add any missing settings for entity_link.
-        if (!isset($handler['output_url_as_text'])) {
-          $handler['output_url_as_text'] = FALSE;
-          $changed = TRUE;
-        }
-        if (!isset($handler['absolute'])) {
-          $handler['absolute'] = FALSE;
-          $changed = TRUE;
-        }
-      }
-      elseif (isset($handler['plugin_id']) && $handler['plugin_id'] === 'node_path') {
-        // Convert the use of node_path to entity_link.
-        $handler['plugin_id'] = 'entity_link';
-        $handler['field'] = 'view_node';
-        $handler['output_url_as_text'] = TRUE;
-        $changed = TRUE;
-      }
+    // Add any missing settings for lazy loading.
+    if (($handler_type === 'field')
+      && isset($handler['plugin_id'], $handler['type'])
+      && $handler['plugin_id'] === 'field'
+      && $handler['type'] === 'oembed'
+      && !array_key_exists('loading', $handler['settings'])) {
+      $handler['settings']['loading'] = ['attribute' => 'eager'];
+      $changed = TRUE;
     }
 
-    $deprecations_triggered = &$this->triggeredDeprecations['2857891'][$view->id()];
+    $deprecations_triggered = &$this->triggeredDeprecations['3212351'][$view->id()];
     if ($this->deprecationsEnabled && $changed && !$deprecations_triggered) {
       $deprecations_triggered = TRUE;
-      @trigger_error(sprintf('The entity link url update for the "%s" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2857891.', $view->id()), E_USER_DEPRECATED);
+      @trigger_error(sprintf('The oEmbed loading attribute update for view "%s" is deprecated in drupal:10.1.0 and is removed from drupal:11.0.0. Profile, module and theme provided configuration should be updated to accommodate the changes described at https://www.drupal.org/node/3275103.', $view->id()), E_USER_DEPRECATED);
     }
 
     return $changed;
   }
 
   /**
-   * Add additional settings to the entity link field.
+   * Updates the timestamp fields settings by adding time diff and tooltip.
    *
    * @param \Drupal\views\ViewEntityInterface $view
    *   The View to update.
    *
    * @return bool
    *   Whether the view was updated.
-   *
-   * @deprecated in drupal:9.0.0 and is removed from drupal:10.0.0.
-   *   Module-provided Views configuration should be updated to accommodate the
-   *   changes described below.
-   *
-   * @see https://www.drupal.org/node/2869168
    */
-  public function needsOperatorDefaultsUpdate(ViewEntityInterface $view) {
-    return $this->processDisplayHandlers($view, TRUE, function (&$handler, $handler_type) use ($view) {
-      return $this->processOperatorDefaultsHandler($handler, $handler_type, $view);
+  public function needsTimestampFormatterTimeDiffUpdate(ViewEntityInterface $view): bool {
+    return $this->processDisplayHandlers($view, TRUE, function (array &$handler, string $handler_type): bool {
+      return $this->processTimestampFormatterTimeDiffUpdateHandler($handler, $handler_type);
     });
   }
 
   /**
-   * Processes operator defaults.
+   * Processes timestamp fields settings by adding time diff and tooltip.
    *
    * @param array $handler
    *   A display handler.
    * @param string $handler_type
    *   The handler type.
-   * @param \Drupal\views\ViewEntityInterface $view
-   *   The View being updated.
    *
    * @return bool
    *   Whether the handler was updated.
    */
-  protected function processOperatorDefaultsHandler(array &$handler, $handler_type, ViewEntityInterface $view) {
-    $changed = FALSE;
-
-    if ($handler_type === 'filter') {
-      if (!isset($handler['expose']['operator_limit_selection'])) {
-        $handler['expose']['operator_limit_selection'] = FALSE;
-        $changed = TRUE;
+  protected function processTimestampFormatterTimeDiffUpdateHandler(array &$handler, string $handler_type): bool {
+    if ($handler_type === 'field' && isset($handler['type'])) {
+      $plugin_definition = $this->formatterPluginManager->getDefinition($handler['type'], FALSE);
+      // Check also potential plugins extending TimestampFormatter.
+      if (!$plugin_definition || !is_a($plugin_definition['class'], TimestampFormatter::class, TRUE)) {
+        return FALSE;
       }
-      if (!isset($handler['expose']['operator_list'])) {
-        $handler['expose']['operator_list'] = [];
-        $changed = TRUE;
-      }
-    }
 
-    $deprecations_triggered = &$this->triggeredDeprecations['2869168'][$view->id()];
-    if ($this->deprecationsEnabled && $changed && !$deprecations_triggered) {
-      $deprecations_triggered = TRUE;
-      @trigger_error(sprintf('The operator defaults update for the "%s" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.', $view->id()), E_USER_DEPRECATED);
+      if (!isset($handler['settings']['tooltip']) || !isset($handler['settings']['time_diff'])) {
+        $handler['settings'] += $plugin_definition['class']::defaultSettings();
+        // Existing timestamp formatters don't have tooltip.
+        $handler['settings']['tooltip'] = [
+          'date_format' => '',
+          'custom_date_format' => '',
+        ];
+        return TRUE;
+      }
     }
-
-    return $changed;
+    return FALSE;
   }
 
   /**
-   * Update field names for multi-value base fields.
+   * Replaces hyphen on historical data (revision) fields.
+   *
+   * This replaces hyphens with double underscores in twig assertions.
    *
    * @param \Drupal\views\ViewEntityInterface $view
-   *   The View to update.
+   *   The view entity.
    *
    * @return bool
-   *   Whether the view was updated.
-   *
-   * @deprecated in drupal:9.0.0 and is removed from drupal:10.0.0.
-   *   Module-provided Views configuration should be updated to accommodate the
-   *   changes described below.
-   *
-   * @see https://www.drupal.org/node/2900684
-   */
-  public function needsMultivalueBaseFieldUpdate(ViewEntityInterface $view) {
-    if ($this->getMultivalueBaseFieldUpdateTableInfo()) {
-      return $this->processDisplayHandlers($view, TRUE, function (&$handler, $handler_type, $key, $display_id) use ($view) {
-        return $this->processMultivalueBaseFieldHandler($handler, $handler_type, $key, $display_id, $view);
-      });
-    }
-    return FALSE;
-  }
-
-  /**
-   * Returns the multivalue base fields update table info.
+   *   Whether the handler was updated.
    *
-   * @return array
-   *   An array of multivalue base field info.
+   * @see https://www.drupal.org/project/drupal/issues/2831233
    */
-  protected function getMultivalueBaseFieldUpdateTableInfo() {
-    $table_info = &$this->multivalueBaseFieldsUpdateTableInfo;
-
-    if (!isset($table_info)) {
-      $table_info = [];
-
-      foreach ($this->entityTypeManager->getDefinitions() as $entity_type_id => $entity_type) {
-        if ($entity_type->hasHandlerClass('views_data') && $entity_type->entityClassImplements(FieldableEntityInterface::class)) {
-          $base_field_definitions = $this->entityFieldManager->getBaseFieldDefinitions($entity_type_id);
-
-          $entity_storage = $this->entityTypeManager->getStorage($entity_type_id);
-          $table_mapping = $entity_storage->getTableMapping($base_field_definitions);
-          if (!$table_mapping instanceof DefaultTableMapping) {
-            continue;
+  public function processRevisionFieldHyphenFix(ViewEntityInterface $view): bool {
+    // Regex to search only for token with machine name '-revision_id'.
+    $old_part = '/{{([^}]+)(-revision_id)/';
+    $new_part = '{{$1__revision_id';
+    $old_field = '-revision_id';
+    $new_field = '__revision_id';
+    /** @var \Drupal\views\ViewEntityInterface $view */
+    $is_update = FALSE;
+    $displays = $view->get('display');
+    foreach ($displays as &$display) {
+      if (isset($display['display_options']['fields'])) {
+        foreach ($display['display_options']['fields'] as $field_name => $field) {
+          if (!empty($field['alter']['text'])) {
+            // Fixes replacement token references in rewritten fields.
+            $alter_text = $field['alter']['text'];
+            if (preg_match($old_part, $alter_text) === 1) {
+              $is_update = TRUE;
+              $field['alter']['text'] = preg_replace($old_part, $new_part, $alter_text);
+            }
           }
 
-          foreach ($base_field_definitions as $field_name => $base_field_definition) {
-            $base_field_storage_definition = $base_field_definition->getFieldStorageDefinition();
-
-            // Skip single value and custom storage base fields.
-            if (!$base_field_storage_definition->isMultiple() || $base_field_storage_definition->hasCustomStorage()) {
-              continue;
+          if (!empty($field['alter']['path'])) {
+            // Fixes replacement token references in link paths.
+            $alter_path = $field['alter']['path'];
+            if (preg_match($old_part, $alter_path) === 1) {
+              $is_update = TRUE;
+              $field['alter']['path'] = preg_replace($old_part, $new_part, $alter_path);
             }
-
-            // Get the actual table, as well as the column for the main property
-            // name, so we can perform an update on the views in
-            // ::updateFieldNamesForMultivalueBaseFields().
-            $table_name = $table_mapping->getFieldTableName($field_name);
-            $main_property_name = $base_field_storage_definition->getMainPropertyName();
-
-            $table_info[$table_name][$field_name] = $table_mapping->getFieldColumnName($base_field_storage_definition, $main_property_name);
           }
-        }
-      }
-    }
-
-    return $table_info;
-  }
-
-  /**
-   * Processes handlers affected by the multivalue base field update.
-   *
-   * @param array $handler
-   *   A display handler.
-   * @param string $handler_type
-   *   The handler type.
-   * @param string $key
-   *   The handler key.
-   * @param string $display_id
-   *   The handler display ID.
-   * @param \Drupal\views\ViewEntityInterface $view
-   *   The view being updated.
-   *
-   * @return bool
-   *   Whether the handler was updated.
-   */
-  protected function processMultivalueBaseFieldHandler(array &$handler, $handler_type, $key, $display_id, ViewEntityInterface $view) {
-    $changed = FALSE;
-
-    // If there are no multivalue base fields we have nothing to do.
-    $table_info = $this->getMultivalueBaseFieldUpdateTableInfo();
-    if (!$table_info) {
-      return $changed;
-    }
-
-    // Only if the wrong field name is set do we process the field. It
-    // could already be using the correct field. Like "user__roles" vs
-    // "roles_target_id".
-    if (isset($handler['table']) && isset($table_info[$handler['table']]) && isset($table_info[$handler['table']][$handler['field']])) {
-      $changed = TRUE;
-      $original_field_name = $handler['field'];
-      $handler['field'] = $table_info[$handler['table']][$original_field_name];
-      $handler['plugin_id'] = $this->viewsData->get($handler['table'])[$table_info[$handler['table']][$original_field_name]][$handler_type]['id'];
-
-      // Retrieve type data information about the handler to clean it up
-      // reliably. We need to manually create a typed view rather than
-      // instantiating the current one, as the schema will be affected by the
-      // updated values.
-      $id = 'views.view.' . $view->id();
-      $path_to_handler = "display.$display_id.display_options.{$handler_type}s.$key";
-      $view_config = $view->toArray();
-      $keys = explode('.', $path_to_handler);
-      NestedArray::setValue($view_config, $keys, $handler);
-      /** @var \Drupal\Core\Config\Schema\TypedConfigInterface $typed_view */
-      $typed_view = $this->typedConfigManager->createFromNameAndData($id, $view_config);
-      /** @var \Drupal\Core\Config\Schema\ArrayElement $typed_handler */
-      $typed_handler = $typed_view->get($path_to_handler);
-
-      // Filter values we want to convert from a string to an array.
-      if ($handler_type === 'filter' && $typed_handler->get('value') instanceof ArrayElement && is_string($handler['value'])) {
-        // An empty string cast to an array is an array with one element.
-        if ($handler['value'] === '') {
-          $handler['value'] = [];
-        }
-        else {
-          $handler['value'] = (array) $handler['value'];
-        }
-        $handler['operator'] = $this->mapOperatorFromSingleToMultiple($handler['operator']);
-      }
 
-      // For all the other fields we try to determine the fields using config
-      // schema and remove everything not being defined in the new handler.
-      foreach (array_keys($handler) as $handler_key) {
-        if (!isset($typed_handler->getDataDefinition()['mapping'][$handler_key])) {
-          unset($handler[$handler_key]);
+          if (str_contains($field_name, $old_field)) {
+            // Replaces the field name and the view id.
+            $is_update = TRUE;
+            $field['id'] = str_replace($old_field, $new_field, $field['id']);
+            $field['field'] = str_replace($old_field, $new_field, $field['field']);
+
+            // Replace key with save order.
+            $field_name_update = str_replace($old_field, $new_field, $field_name);
+            $fields = $display['display_options']['fields'];
+            $keys = array_keys($fields);
+            $keys[array_search($field_name, $keys)] = $field_name_update;
+            $display['display_options']['fields'] = array_combine($keys, $fields);
+            $display['display_options']['fields'][$field_name_update] = $field;
+          }
         }
       }
     }
-
-    $deprecations_triggered = &$this->triggeredDeprecations['2900684'][$view->id()];
-    if ($this->deprecationsEnabled && $changed && !$deprecations_triggered) {
-      $deprecations_triggered = TRUE;
-      @trigger_error(sprintf('The multivalue base field update for the "%s" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2900684.', $view->id()), E_USER_DEPRECATED);
-    }
-
-    return $changed;
-  }
-
-  /**
-   * Maps a single operator to a multiple one, if possible.
-   *
-   * @param string $single_operator
-   *   A single operator.
-   *
-   * @return string
-   *   A multiple operator or the original one if no mapping was available.
-   */
-  protected function mapOperatorFromSingleToMultiple($single_operator) {
-    switch ($single_operator) {
-      case '=':
-        return 'or';
-
-      case '!=':
-        return 'not';
-
-      default:
-        return $single_operator;
+    if ($is_update) {
+      $view->set('display', $displays);
     }
+    return $is_update;
   }
 
   /**
-   * Updates the sort handlers by adding default sort field identifiers.
+   * Checks each display in a view to see if it needs the hyphen fix.
    *
    * @param \Drupal\views\ViewEntityInterface $view
-   *   The View to update.
+   *   The view entity.
    *
    * @return bool
-   *   Whether the view was updated.
+   *   TRUE if the view has any displays that needed to be updated.
    */
-  public function needsSortFieldIdentifierUpdate(ViewEntityInterface $view): bool {
-    return $this->processDisplayHandlers($view, TRUE, function (array &$handler, string $handler_type): bool {
-      return $this->processSortFieldIdentifierUpdateHandler($handler, $handler_type);
-    });
-  }
-
-  /**
-   * Add lazy load options to all image type field configurations.
-   *
-   * @param \Drupal\views\ViewEntityInterface $view
-   *   The View to update.
-   *
-   * @return bool
-   *   Whether the view was updated.
-   */
-  public function needsImageLazyLoadFieldUpdate(ViewEntityInterface $view) {
+  public function needsRevisionFieldHyphenFix(ViewEntityInterface $view): bool {
     return $this->processDisplayHandlers($view, TRUE, function (&$handler, $handler_type) use ($view) {
-      return $this->processImageLazyLoadFieldHandler($handler, $handler_type, $view);
+      return $this->processRevisionFieldHyphenFix($view);
     });
   }
 
-  /**
-   * Processes image type fields.
-   *
-   * @param array $handler
-   *   A display handler.
-   * @param string $handler_type
-   *   The handler type.
-   * @param \Drupal\views\ViewEntityInterface $view
-   *   The View being updated.
-   *
-   * @return bool
-   *   Whether the handler was updated.
-   */
-  protected function processImageLazyLoadFieldHandler(array &$handler, string $handler_type, ViewEntityInterface $view) {
-    $changed = FALSE;
-
-    // Add any missing settings for lazy loading.
-    if (($handler_type === 'field')
-      && isset($handler['plugin_id'], $handler['type'])
-      && $handler['plugin_id'] === 'field'
-      && $handler['type'] === 'image'
-      && !isset($handler['settings']['image_loading'])) {
-      $handler['settings']['image_loading'] = ['attribute' => 'lazy'];
-      $changed = TRUE;
-    }
-
-    return $changed;
-  }
-
-  /**
-   * Processes sort handlers by adding the sort identifier.
-   *
-   * @param array $handler
-   *   A display handler.
-   * @param string $handler_type
-   *   The handler type.
-   *
-   * @return bool
-   *   Whether the handler was updated.
-   */
-  protected function processSortFieldIdentifierUpdateHandler(array &$handler, string $handler_type): bool {
-    if ($handler_type === 'sort' && !isset($handler['expose']['field_identifier'])) {
-      $handler['expose']['field_identifier'] = $handler['id'];
-      return TRUE;
-    }
-    return FALSE;
-  }
-
 }
diff --git a/web/core/modules/views/src/ViewsDataHelper.php b/web/core/modules/views/src/ViewsDataHelper.php
index c977882d..9f561b75 100644
--- a/web/core/modules/views/src/ViewsDataHelper.php
+++ b/web/core/modules/views/src/ViewsDataHelper.php
@@ -148,7 +148,7 @@ public function fetchFields($base, $type, $grouping = FALSE, $sub_type = NULL) {
           $strings += $this->fields[$base_table][$type];
         }
       }
-      uasort($strings, ['self', 'fetchedFieldSort']);
+      uasort($strings, [$this, 'fetchedFieldSort']);
       return $strings;
     }
 
diff --git a/web/core/modules/views/tests/fixtures/update/multi_value_fields.php b/web/core/modules/views/tests/fixtures/update/multi_value_fields.php
deleted file mode 100644
index eb1fa6f2..00000000
--- a/web/core/modules/views/tests/fixtures/update/multi_value_fields.php
+++ /dev/null
@@ -1,35 +0,0 @@
-<?php
-
-/**
- * @file
- * Text fixture.
- */
-
-use Drupal\Core\Database\Database;
-use Drupal\Core\Serialization\Yaml;
-
-$connection = Database::getConnection();
-
-$connection->insert('config')
-  ->fields([
-    'collection' => '',
-    'name' => 'views.view.test_user_multi_value',
-    'data' => serialize(Yaml::decode(file_get_contents(__DIR__ . '/views.view.test_user_multi_value.yml'))),
-  ])
-  ->execute();
-
-$connection->insert('config')
-  ->fields([
-    'collection' => '',
-    'name' => 'views.view.test_broken_config_multi_value',
-    'data' => serialize(Yaml::decode(file_get_contents(__DIR__ . '/views.view.test_broken_config_multi_value.yml'))),
-  ])
-  ->execute();
-
-$connection->insert('config')
-  ->fields([
-    'collection' => '',
-    'name' => 'views.view.test_another_broken_config_multi_value',
-    'data' => serialize(Yaml::decode(file_get_contents(__DIR__ . '/views.view.test_another_broken_config_multi_value.yml'))),
-  ])
-  ->execute();
diff --git a/web/core/modules/views/tests/fixtures/update/views.view.node_link_update_test.yml b/web/core/modules/views/tests/fixtures/update/views.view.node_link_update_test.yml
deleted file mode 100644
index 5f8d89ed..00000000
--- a/web/core/modules/views/tests/fixtures/update/views.view.node_link_update_test.yml
+++ /dev/null
@@ -1,225 +0,0 @@
-langcode: en
-status: true
-dependencies:
-  module:
-    - node
-    - user
-id: node_link_update_test
-label: 'node link update test'
-module: views
-description: ''
-tag: ''
-base_table: node_field_data
-base_field: nid
-display:
-  default:
-    display_plugin: default
-    id: default
-    display_title: Default
-    position: 0
-    display_options:
-      access:
-        type: perm
-        options:
-          perm: 'access content'
-      cache:
-        type: tag
-        options: {  }
-      query:
-        type: views_query
-        options:
-          disable_sql_rewrite: false
-          distinct: false
-          replica: false
-          query_comment: ''
-          query_tags: {  }
-      exposed_form:
-        type: basic
-        options:
-          submit_button: Apply
-          reset_button: false
-          reset_button_label: Reset
-          exposed_sorts_label: 'Sort by'
-          expose_sort_order: true
-          sort_asc_label: Asc
-          sort_desc_label: Desc
-      pager:
-        type: mini
-        options:
-          items_per_page: 10
-          offset: 0
-          id: 0
-          total_pages: null
-          expose:
-            items_per_page: false
-            items_per_page_label: 'Items per page'
-            items_per_page_options: '5, 10, 25, 50'
-            items_per_page_options_all: false
-            items_per_page_options_all_label: '- All -'
-            offset: false
-            offset_label: Offset
-          tags:
-            previous: ‹‹
-            next: ››
-      style:
-        type: default
-        options:
-          grouping: {  }
-          row_class: ''
-          default_row_class: true
-          uses_fields: false
-      row:
-        type: fields
-        options:
-          inline: {  }
-          separator: ''
-          hide_empty: false
-          default_field_elements: true
-      fields:
-        title:
-          id: title
-          table: node_field_data
-          field: title
-          entity_type: node
-          entity_field: title
-          label: ''
-          alter:
-            alter_text: false
-            make_link: false
-            absolute: false
-            trim: false
-            word_boundary: false
-            ellipsis: false
-            strip_tags: false
-            html: false
-          hide_empty: false
-          empty_zero: false
-          settings:
-            link_to_entity: true
-          plugin_id: field
-          relationship: none
-          group_type: group
-          admin_label: ''
-          exclude: false
-          element_type: ''
-          element_class: ''
-          element_label_type: ''
-          element_label_class: ''
-          element_label_colon: true
-          element_wrapper_type: ''
-          element_wrapper_class: ''
-          element_default_classes: true
-          empty: ''
-          hide_alter_empty: true
-          click_sort_column: value
-          type: string
-          group_column: value
-          group_columns: {  }
-          group_rows: true
-          delta_limit: 0
-          delta_offset: 0
-          delta_reversed: false
-          delta_first_last: false
-          multi_type: separator
-          separator: ', '
-          field_api_classes: false
-        path:
-          id: path
-          table: node
-          field: path
-          entity_type: node
-          plugin_id: node_path
-        view_node:
-          id: view_node
-          table: node
-          field: view_node
-          relationship: none
-          group_type: group
-          admin_label: ''
-          label: ''
-          exclude: false
-          alter:
-            alter_text: false
-            text: ''
-            make_link: false
-            path: ''
-            absolute: false
-            external: false
-            replace_spaces: false
-            path_case: none
-            trim_whitespace: false
-            alt: ''
-            rel: ''
-            link_class: ''
-            prefix: ''
-            suffix: ''
-            target: ''
-            nl2br: false
-            max_length: 0
-            word_boundary: true
-            ellipsis: true
-            more_link: false
-            more_link_text: ''
-            more_link_path: ''
-            strip_tags: false
-            trim: false
-            preserve_tags: ''
-            html: false
-          element_type: ''
-          element_class: ''
-          element_label_type: ''
-          element_label_class: ''
-          element_label_colon: false
-          element_wrapper_type: ''
-          element_wrapper_class: ''
-          element_default_classes: true
-          empty: ''
-          hide_empty: false
-          empty_zero: false
-          hide_alter_empty: true
-          text: view
-          entity_type: node
-          plugin_id: entity_link
-      filters:
-        status:
-          value: '1'
-          table: node_field_data
-          field: status
-          plugin_id: boolean
-          entity_type: node
-          entity_field: status
-          id: status
-          expose:
-            operator: ''
-          group: 1
-      sorts:
-        created:
-          id: created
-          table: node_field_data
-          field: created
-          order: DESC
-          entity_type: node
-          entity_field: created
-          plugin_id: date
-          relationship: none
-          group_type: group
-          admin_label: ''
-          exposed: false
-          expose:
-            label: ''
-          granularity: second
-      header: {  }
-      footer: {  }
-      empty: {  }
-      relationships: {  }
-      arguments: {  }
-      display_extenders: {  }
-    cache_metadata:
-      max-age: -1
-      contexts:
-        - 'languages:language_content'
-        - 'languages:language_interface'
-        - url.query_args
-        - 'user.node_grants:view'
-        - user.permissions
-      tags: {  }
diff --git a/web/core/modules/views/tests/fixtures/update/views.view.test_another_broken_config_multi_value.yml b/web/core/modules/views/tests/fixtures/update/views.view.test_another_broken_config_multi_value.yml
deleted file mode 100644
index 3686a78f..00000000
--- a/web/core/modules/views/tests/fixtures/update/views.view.test_another_broken_config_multi_value.yml
+++ /dev/null
@@ -1,239 +0,0 @@
-langcode: en
-status: true
-dependencies:
-  module:
-    - user
-id: test_another_broken_config_multi_value
-label: test_another_broken_config_multi_value
-module: views
-description: ''
-tag: ''
-base_table: users_field_data
-base_field: uid
-display:
-  default:
-    display_plugin: default
-    id: default
-    display_title: Default
-    position: 0
-    display_options:
-      access:
-        type: perm
-        options:
-          perm: 'access user profiles'
-      cache:
-        type: tag
-        options: {  }
-      query:
-        type: views_query
-        options:
-          disable_sql_rewrite: false
-          distinct: false
-          replica: false
-          query_comment: ''
-          query_tags: {  }
-      exposed_form:
-        type: basic
-        options:
-          submit_button: Filter
-          reset_button: false
-          reset_button_label: Reset
-          exposed_sorts_label: 'Sort by'
-          expose_sort_order: true
-          sort_asc_label: Asc
-          sort_desc_label: Desc
-      pager:
-        type: mini
-        options:
-          items_per_page: 10
-          offset: 0
-          id: 0
-          total_pages: null
-          expose:
-            items_per_page: false
-            items_per_page_label: 'Items per page'
-            items_per_page_options: '5, 10, 25, 50'
-            items_per_page_options_all: false
-            items_per_page_options_all_label: '- All -'
-            offset: false
-            offset_label: Offset
-          tags:
-            previous: ‹‹
-            next: ››
-      style:
-        type: default
-        options:
-          grouping: {  }
-          row_class: ''
-          default_row_class: true
-          uses_fields: false
-      row:
-        type: fields
-        options:
-          inline: {  }
-          separator: ''
-          hide_empty: false
-          default_field_elements: true
-      fields:
-        roles:
-          id: roles
-          table: user__roles
-          field: roles
-          relationship: none
-          group_type: group
-          admin_label: ''
-          label: ''
-          exclude: false
-          alter:
-            alter_text: false
-            text: ''
-            make_link: false
-            path: ''
-            absolute: false
-            external: false
-            replace_spaces: false
-            path_case: none
-            trim_whitespace: false
-            alt: ''
-            rel: ''
-            link_class: ''
-            prefix: ''
-            suffix: ''
-            target: ''
-            nl2br: false
-            max_length: 0
-            word_boundary: true
-            ellipsis: true
-            more_link: false
-            more_link_text: ''
-            more_link_path: ''
-            strip_tags: false
-            trim: false
-            preserve_tags: ''
-            html: false
-          element_type: ''
-          element_class: ''
-          element_label_type: ''
-          element_label_class: ''
-          element_label_colon: false
-          element_wrapper_type: ''
-          element_wrapper_class: ''
-          element_default_classes: true
-          empty: ''
-          hide_empty: false
-          empty_zero: false
-          hide_alter_empty: true
-          click_sort_column: target_id
-          type: entity_reference_label
-          settings:
-            link: true
-          group_column: target_id
-          group_columns: {  }
-          group_rows: true
-          delta_limit: 0
-          delta_offset: 0
-          delta_reversed: false
-          delta_first_last: false
-          multi_type: separator
-          separator: ', '
-          field_api_classes: false
-          entity_type: user
-          entity_field: roles
-          plugin_id: field
-        rendered_entity: null
-      filters:
-        roles:
-          id: roles
-          table: user__roles
-          field: roles
-          relationship: none
-          group_type: group
-          admin_label: ''
-          operator: '='
-          value: ''
-          group: 1
-          exposed: false
-          expose:
-            operator_id: ''
-            label: ''
-            description: ''
-            use_operator: false
-            operator: ''
-            identifier: ''
-            required: false
-            remember: false
-            multiple: false
-            remember_roles:
-              authenticated: authenticated
-          is_grouped: false
-          group_info:
-            label: ''
-            description: ''
-            identifier: ''
-            optional: true
-            widget: select
-            multiple: false
-            remember: false
-            default_group: All
-            default_group_multiple: {  }
-            group_items: {  }
-          entity_type: user
-          entity_field: roles
-          plugin_id: string
-      sorts: {  }
-      header: {  }
-      footer: {  }
-      empty: {  }
-      relationships: {  }
-      arguments:
-        roles:
-          id: roles
-          table: user__roles
-          field: roles
-          relationship: none
-          group_type: group
-          admin_label: ''
-          default_action: ignore
-          exception:
-            value: all
-            title_enable: false
-            title: All
-          title_enable: false
-          title: ''
-          default_argument_type: fixed
-          default_argument_options:
-            argument: ''
-          default_argument_skip_url: false
-          summary_options:
-            base_path: ''
-            count: true
-            items_per_page: 25
-            override: false
-          summary:
-            sort_order: asc
-            number_of_records: 0
-            format: default_summary
-          specify_validation: false
-          validate:
-            type: none
-            fail: 'not found'
-          validate_options: {  }
-          glossary: false
-          limit: 0
-          case: none
-          path_case: none
-          transform_dash: false
-          break_phrase: false
-          entity_type: user
-          entity_field: roles
-          plugin_id: string
-      display_extenders: {  }
-    cache_metadata:
-      max-age: -1
-      contexts:
-        - 'languages:language_content'
-        - 'languages:language_interface'
-        - url
-        - url.query_args
-        - user.permissions
-      tags: {  }
diff --git a/web/core/modules/views/tests/fixtures/update/views.view.test_broken_config_multi_value.yml b/web/core/modules/views/tests/fixtures/update/views.view.test_broken_config_multi_value.yml
deleted file mode 100644
index 1f340f02..00000000
--- a/web/core/modules/views/tests/fixtures/update/views.view.test_broken_config_multi_value.yml
+++ /dev/null
@@ -1,240 +0,0 @@
-uuid: d96b5368-de0a-4a84-af12-9535d4ad4c6f
-langcode: en
-status: true
-dependencies:
-  module:
-    - user
-id: test_broken_config_multi_value
-label: test_broken_config_multi_value
-module: views
-description: ''
-tag: ''
-base_table: users_field_data
-base_field: uid
-display:
-  default:
-    display_plugin: default
-    id: default
-    display_title: Default
-    position: 0
-    display_options:
-      access:
-        type: perm
-        options:
-          perm: 'access user profiles'
-      cache:
-        type: tag
-        options: {  }
-      query:
-        type: views_query
-        options:
-          disable_sql_rewrite: false
-          distinct: false
-          replica: false
-          query_comment: ''
-          query_tags: {  }
-      exposed_form:
-        type: basic
-        options:
-          submit_button: Filter
-          reset_button: false
-          reset_button_label: Reset
-          exposed_sorts_label: 'Sort by'
-          expose_sort_order: true
-          sort_asc_label: Asc
-          sort_desc_label: Desc
-      pager:
-        type: mini
-        options:
-          items_per_page: 10
-          offset: 0
-          id: 0
-          total_pages: null
-          expose:
-            items_per_page: false
-            items_per_page_label: 'Items per page'
-            items_per_page_options: '5, 10, 25, 50'
-            items_per_page_options_all: false
-            items_per_page_options_all_label: '- All -'
-            offset: false
-            offset_label: Offset
-          tags:
-            previous: ‹‹
-            next: ››
-      style:
-        type: default
-        options:
-          grouping: {  }
-          row_class: ''
-          default_row_class: true
-          uses_fields: false
-      row:
-        type: fields
-        options:
-          inline: {  }
-          separator: ''
-          hide_empty: false
-          default_field_elements: true
-      fields:
-        roles:
-          id: roles
-          table: user__roles
-          field: roles
-          relationship: none
-          group_type: group
-          admin_label: ''
-          label: ''
-          exclude: false
-          alter:
-            alter_text: false
-            text: ''
-            make_link: false
-            path: ''
-            absolute: false
-            external: false
-            replace_spaces: false
-            path_case: none
-            trim_whitespace: false
-            alt: ''
-            rel: ''
-            link_class: ''
-            prefix: ''
-            suffix: ''
-            target: ''
-            nl2br: false
-            max_length: 0
-            word_boundary: true
-            ellipsis: true
-            more_link: false
-            more_link_text: ''
-            more_link_path: ''
-            strip_tags: false
-            trim: false
-            preserve_tags: ''
-            html: false
-          element_type: ''
-          element_class: ''
-          element_label_type: ''
-          element_label_class: ''
-          element_label_colon: false
-          element_wrapper_type: ''
-          element_wrapper_class: ''
-          element_default_classes: true
-          empty: ''
-          hide_empty: false
-          empty_zero: false
-          hide_alter_empty: true
-          click_sort_column: target_id
-          type: entity_reference_label
-          settings:
-            link: true
-          group_column: target_id
-          group_columns: {  }
-          group_rows: true
-          delta_limit: 0
-          delta_offset: 0
-          delta_reversed: false
-          delta_first_last: false
-          multi_type: separator
-          separator: ', '
-          field_api_classes: false
-          entity_type: user
-          entity_field: roles
-          plugin_id: field
-        rendered_entity: null
-      filters:
-        roles:
-          id: roles
-          table: user__roles
-          field: roles
-          relationship: none
-          group_type: group
-          admin_label: ''
-          operator: '='
-          value: ''
-          group: 1
-          exposed: false
-          expose:
-            operator_id: ''
-            label: ''
-            description: ''
-            use_operator: false
-            operator: ''
-            identifier: ''
-            required: false
-            remember: false
-            multiple: false
-            remember_roles:
-              authenticated: authenticated
-          is_grouped: false
-          group_info:
-            label: ''
-            description: ''
-            identifier: ''
-            optional: true
-            widget: select
-            multiple: false
-            remember: false
-            default_group: All
-            default_group_multiple: {  }
-            group_items: {  }
-          entity_type: user
-          entity_field: roles
-          plugin_id: string
-      sorts: {  }
-      header: {  }
-      footer: {  }
-      empty: {  }
-      relationships: {  }
-      arguments:
-        roles:
-          id: roles
-          table: user__roles
-          field: roles
-          relationship: none
-          group_type: group
-          admin_label: ''
-          default_action: ignore
-          exception:
-            value: all
-            title_enable: false
-            title: All
-          title_enable: false
-          title: ''
-          default_argument_type: fixed
-          default_argument_options:
-            argument: ''
-          default_argument_skip_url: false
-          summary_options:
-            base_path: ''
-            count: true
-            items_per_page: 25
-            override: false
-          summary:
-            sort_order: asc
-            number_of_records: 0
-            format: default_summary
-          specify_validation: false
-          validate:
-            type: none
-            fail: 'not found'
-          validate_options: {  }
-          glossary: false
-          limit: 0
-          case: none
-          path_case: none
-          transform_dash: false
-          break_phrase: false
-          entity_type: user
-          entity_field: roles
-          plugin_id: string
-      display_extenders: {  }
-    cache_metadata:
-      max-age: -1
-      contexts:
-        - 'languages:language_content'
-        - 'languages:language_interface'
-        - url
-        - url.query_args
-        - user.permissions
-      tags: {  }
diff --git a/web/core/modules/views/tests/fixtures/update/views.view.test_exposed_filters.yml b/web/core/modules/views/tests/fixtures/update/views.view.test_exposed_filters.yml
deleted file mode 100644
index 4965de56..00000000
--- a/web/core/modules/views/tests/fixtures/update/views.view.test_exposed_filters.yml
+++ /dev/null
@@ -1,271 +0,0 @@
-langcode: en
-status: true
-dependencies:
-  module:
-    - node
-    - user
-id: test_exposed_filters
-label: 'Test Exposed filters'
-module: views
-description: ''
-tag: ''
-base_table: node_field_data
-base_field: nid
-display:
-  default:
-    display_plugin: default
-    id: default
-    display_title: Default
-    position: 0
-    display_options:
-      access:
-        type: perm
-        options:
-          perm: 'access content'
-      cache:
-        type: tag
-        options: {  }
-      query:
-        type: views_query
-        options:
-          disable_sql_rewrite: false
-          distinct: false
-          replica: false
-          query_comment: ''
-          query_tags: {  }
-      exposed_form:
-        type: basic
-        options:
-          submit_button: Apply
-          reset_button: false
-          reset_button_label: Reset
-          exposed_sorts_label: 'Sort by'
-          expose_sort_order: true
-          sort_asc_label: Asc
-          sort_desc_label: Desc
-      pager:
-        type: mini
-        options:
-          items_per_page: 10
-          offset: 0
-          id: 0
-          total_pages: null
-          expose:
-            items_per_page: false
-            items_per_page_label: 'Items per page'
-            items_per_page_options: '5, 10, 25, 50'
-            items_per_page_options_all: false
-            items_per_page_options_all_label: '- All -'
-            offset: false
-            offset_label: Offset
-          tags:
-            previous: ‹‹
-            next: ››
-      style:
-        type: default
-      row:
-        type: fields
-        options:
-          default_field_elements: true
-          inline: {  }
-          separator: ''
-          hide_empty: false
-      fields:
-        title:
-          id: title
-          table: node_field_data
-          field: title
-          entity_type: node
-          entity_field: title
-          label: ''
-          alter:
-            alter_text: false
-            make_link: false
-            absolute: false
-            trim: false
-            word_boundary: false
-            ellipsis: false
-            strip_tags: false
-            html: false
-          hide_empty: false
-          empty_zero: false
-          settings:
-            link_to_entity: true
-          plugin_id: field
-          relationship: none
-          group_type: group
-          admin_label: ''
-          exclude: false
-          element_type: ''
-          element_class: ''
-          element_label_type: ''
-          element_label_class: ''
-          element_label_colon: true
-          element_wrapper_type: ''
-          element_wrapper_class: ''
-          element_default_classes: true
-          empty: ''
-          hide_alter_empty: true
-          click_sort_column: value
-          type: string
-          group_column: value
-          group_columns: {  }
-          group_rows: true
-          delta_limit: 0
-          delta_offset: 0
-          delta_reversed: false
-          delta_first_last: false
-          multi_type: separator
-          separator: ', '
-          field_api_classes: false
-      filters:
-        status:
-          value: '1'
-          table: node_field_data
-          field: status
-          plugin_id: boolean
-          entity_type: node
-          entity_field: status
-          id: status
-          expose:
-            operator: ''
-          group: 1
-        title:
-          id: title
-          table: node_field_data
-          field: title
-          relationship: none
-          group_type: group
-          admin_label: ''
-          operator: '='
-          value: ''
-          group: 1
-          exposed: true
-          expose:
-            operator_id: title_op
-            label: Title
-            description: ''
-            use_operator: true
-            operator: title_op
-            identifier: title
-            required: false
-            remember: false
-            multiple: false
-            remember_roles:
-              authenticated: authenticated
-              anonymous: '0'
-              administrator: '0'
-            placeholder: ''
-          is_grouped: false
-          group_info:
-            label: ''
-            description: ''
-            identifier: ''
-            optional: true
-            widget: select
-            multiple: false
-            remember: false
-            default_group: All
-            default_group_multiple: {  }
-            group_items: {  }
-          entity_type: node
-          entity_field: title
-          plugin_id: string
-        created:
-          id: created
-          table: node_field_data
-          field: created
-          relationship: none
-          group_type: group
-          admin_label: ''
-          operator: '='
-          value:
-            min: ''
-            max: ''
-            value: ''
-            type: date
-          group: 1
-          exposed: true
-          expose:
-            operator_id: created_op
-            label: 'Authored on'
-            description: ''
-            use_operator: true
-            operator: created_op
-            identifier: created
-            required: false
-            remember: false
-            multiple: false
-            remember_roles:
-              authenticated: authenticated
-              anonymous: '0'
-              administrator: '0'
-            placeholder: ''
-            min_placeholder: ''
-            max_placeholder: ''
-          is_grouped: false
-          group_info:
-            label: ''
-            description: ''
-            identifier: ''
-            optional: true
-            widget: select
-            multiple: false
-            remember: false
-            default_group: All
-            default_group_multiple: {  }
-            group_items: {  }
-          entity_type: node
-          entity_field: created
-          plugin_id: date
-      sorts:
-        created:
-          id: created
-          table: node_field_data
-          field: created
-          order: DESC
-          entity_type: node
-          entity_field: created
-          plugin_id: date
-          relationship: none
-          group_type: group
-          admin_label: ''
-          exposed: false
-          expose:
-            label: ''
-          granularity: second
-      title: 'Test Exposed filters'
-      header: {  }
-      footer: {  }
-      empty: {  }
-      relationships: {  }
-      arguments: {  }
-      display_extenders: {  }
-    cache_metadata:
-      max-age: -1
-      contexts:
-        - 'languages:language_content'
-        - 'languages:language_interface'
-        - url
-        - url.query_args
-        - 'user.node_grants:view'
-        - user.permissions
-      tags: {  }
-  page_1:
-    display_plugin: page
-    id: page_1
-    display_title: Page
-    position: 1
-    display_options:
-      display_extenders: {  }
-      path: test-exposed-filters
-    cache_metadata:
-      max-age: -1
-      contexts:
-        - 'languages:language_content'
-        - 'languages:language_interface'
-        - url
-        - url.query_args
-        - 'user.node_grants:view'
-        - user.permissions
-      tags: {  }
diff --git a/web/core/modules/views/tests/fixtures/update/views.view.test_user_multi_value.yml b/web/core/modules/views/tests/fixtures/update/views.view.test_user_multi_value.yml
deleted file mode 100644
index 76684c71..00000000
--- a/web/core/modules/views/tests/fixtures/update/views.view.test_user_multi_value.yml
+++ /dev/null
@@ -1,307 +0,0 @@
-uuid: 001475a0-daec-4e8a-8ca7-97b0d24100a6
-langcode: en
-status: true
-dependencies:
-  config:
-    - field.storage.user.user_picture
-  module:
-    - image
-    - user
-id: test_user_multi_value
-label: test_user_multi_value
-module: views
-description: ''
-tag: ''
-base_table: users_field_data
-base_field: uid
-display:
-  default:
-    display_plugin: default
-    id: default
-    display_title: Default
-    position: 0
-    display_options:
-      access:
-        type: perm
-        options:
-          perm: 'access user profiles'
-      cache:
-        type: tag
-        options: {  }
-      query:
-        type: views_query
-        options:
-          disable_sql_rewrite: false
-          distinct: false
-          replica: false
-          query_comment: ''
-          query_tags: {  }
-      exposed_form:
-        type: basic
-        options:
-          submit_button: Filter
-          reset_button: false
-          reset_button_label: Reset
-          exposed_sorts_label: 'Sort by'
-          expose_sort_order: true
-          sort_asc_label: Asc
-          sort_desc_label: Desc
-      pager:
-        type: mini
-        options:
-          items_per_page: 10
-          offset: 0
-          id: 0
-          total_pages: null
-          expose:
-            items_per_page: false
-            items_per_page_label: 'Items per page'
-            items_per_page_options: '5, 10, 25, 50'
-            items_per_page_options_all: false
-            items_per_page_options_all_label: '- All -'
-            offset: false
-            offset_label: Offset
-          tags:
-            previous: ‹‹
-            next: ››
-      style:
-        type: default
-        options:
-          grouping: {  }
-          row_class: ''
-          default_row_class: true
-          uses_fields: false
-      row:
-        type: fields
-        options:
-          inline: {  }
-          separator: ''
-          hide_empty: false
-          default_field_elements: true
-      fields:
-        roles:
-          id: roles
-          table: user__roles
-          field: roles
-          relationship: none
-          group_type: group
-          admin_label: ''
-          label: ''
-          exclude: false
-          alter:
-            alter_text: false
-            text: ''
-            make_link: false
-            path: ''
-            absolute: false
-            external: false
-            replace_spaces: false
-            path_case: none
-            trim_whitespace: false
-            alt: ''
-            rel: ''
-            link_class: ''
-            prefix: ''
-            suffix: ''
-            target: ''
-            nl2br: false
-            max_length: 0
-            word_boundary: true
-            ellipsis: true
-            more_link: false
-            more_link_text: ''
-            more_link_path: ''
-            strip_tags: false
-            trim: false
-            preserve_tags: ''
-            html: false
-          element_type: ''
-          element_class: ''
-          element_label_type: ''
-          element_label_class: ''
-          element_label_colon: false
-          element_wrapper_type: ''
-          element_wrapper_class: ''
-          element_default_classes: true
-          empty: ''
-          hide_empty: false
-          empty_zero: false
-          hide_alter_empty: true
-          click_sort_column: target_id
-          type: entity_reference_label
-          settings:
-            link: true
-          group_column: target_id
-          group_columns: {  }
-          group_rows: true
-          delta_limit: 0
-          delta_offset: 0
-          delta_reversed: false
-          delta_first_last: false
-          multi_type: separator
-          separator: ', '
-          field_api_classes: false
-          entity_type: user
-          entity_field: roles
-          plugin_id: field
-        user_picture:
-          id: user_picture
-          table: user__user_picture
-          field: user_picture
-          relationship: none
-          group_type: group
-          admin_label: ''
-          label: ''
-          exclude: false
-          alter:
-            alter_text: false
-            text: ''
-            make_link: false
-            path: ''
-            absolute: false
-            external: false
-            replace_spaces: false
-            path_case: none
-            trim_whitespace: false
-            alt: ''
-            rel: ''
-            link_class: ''
-            prefix: ''
-            suffix: ''
-            target: ''
-            nl2br: false
-            max_length: 0
-            word_boundary: true
-            ellipsis: true
-            more_link: false
-            more_link_text: ''
-            more_link_path: ''
-            strip_tags: false
-            trim: false
-            preserve_tags: ''
-            html: false
-          element_type: ''
-          element_class: ''
-          element_label_type: ''
-          element_label_class: ''
-          element_label_colon: false
-          element_wrapper_type: ''
-          element_wrapper_class: ''
-          element_default_classes: true
-          empty: ''
-          hide_empty: false
-          empty_zero: false
-          hide_alter_empty: true
-          click_sort_column: target_id
-          type: image
-          settings:
-            image_style: ''
-            image_link: ''
-          group_column: ''
-          group_columns: { }
-          group_rows: true
-          delta_limit: 0
-          delta_offset: 0
-          delta_reversed: false
-          delta_first_last: false
-          multi_type: separator
-          separator: ', '
-          field_api_classes: false
-          plugin_id: field
-      filters:
-        roles:
-          id: roles
-          table: user__roles
-          field: roles
-          relationship: none
-          group_type: group
-          admin_label: ''
-          operator: '='
-          value: ''
-          group: 1
-          exposed: false
-          expose:
-            operator_id: ''
-            label: ''
-            description: ''
-            use_operator: false
-            operator: ''
-            identifier: ''
-            required: false
-            remember: false
-            multiple: false
-            remember_roles:
-              authenticated: authenticated
-          is_grouped: false
-          group_info:
-            label: ''
-            description: ''
-            identifier: ''
-            optional: true
-            widget: select
-            multiple: false
-            remember: false
-            default_group: All
-            default_group_multiple: {  }
-            group_items: {  }
-          entity_type: user
-          entity_field: roles
-          plugin_id: string
-      sorts: {  }
-      header: {  }
-      footer: {  }
-      empty: {  }
-      relationships: {  }
-      arguments:
-        roles:
-          id: roles
-          table: user__roles
-          field: roles
-          relationship: none
-          group_type: group
-          admin_label: ''
-          default_action: ignore
-          exception:
-            value: all
-            title_enable: false
-            title: All
-          title_enable: false
-          title: ''
-          default_argument_type: fixed
-          default_argument_options:
-            argument: ''
-          default_argument_skip_url: false
-          summary_options:
-            base_path: ''
-            count: true
-            items_per_page: 25
-            override: false
-          summary:
-            sort_order: asc
-            number_of_records: 0
-            format: default_summary
-          specify_validation: false
-          validate:
-            type: none
-            fail: 'not found'
-          validate_options: {  }
-          glossary: false
-          limit: 0
-          case: none
-          path_case: none
-          transform_dash: false
-          break_phrase: false
-          entity_type: user
-          entity_field: roles
-          plugin_id: string
-      display_extenders: {  }
-    cache_metadata:
-      max-age: -1
-      contexts:
-        - 'languages:language_content'
-        - 'languages:language_interface'
-        - url
-        - url.query_args
-        - user.permissions
-      tags:
-        - 'config:field.storage.user.user_picture'
diff --git a/web/core/modules/views/tests/modules/views_config_entity_test/src/Entity/ViewsConfigEntityTest.php b/web/core/modules/views/tests/modules/views_config_entity_test/src/Entity/ViewsConfigEntityTest.php
index 2649e76a..0c4c09ac 100644
--- a/web/core/modules/views/tests/modules/views_config_entity_test/src/Entity/ViewsConfigEntityTest.php
+++ b/web/core/modules/views/tests/modules/views_config_entity_test/src/Entity/ViewsConfigEntityTest.php
@@ -19,6 +19,10 @@
  *   entity_keys = {
  *     "id" = "id",
  *     "label" = "name"
+ *   },
+ *   config_export = {
+ *     "id",
+ *     "label",
  *   }
  * )
  */
diff --git a/web/core/modules/views/tests/modules/views_test_config/test_views/views.view.test_content_ajax.yml b/web/core/modules/views/tests/modules/views_test_config/test_views/views.view.test_content_ajax.yml
index f4e85f3e..6b5261de 100644
--- a/web/core/modules/views/tests/modules/views_test_config/test_views/views.view.test_content_ajax.yml
+++ b/web/core/modules/views/tests/modules/views_test_config/test_views/views.view.test_content_ajax.yml
@@ -310,6 +310,15 @@ display:
             date_format: short
             custom_date_format: ''
             timezone: ''
+            tooltip:
+              date_format: long
+              custom_date_format: ''
+            time_diff:
+              enabled: false
+              future_format: '@interval hence'
+              past_format: '@interval ago'
+              granularity: 2
+              refresh: 60
           plugin_id: field
           entity_type: node
           entity_field: changed
diff --git a/web/core/modules/views/tests/modules/views_test_config/test_views/views.view.test_destroy.yml b/web/core/modules/views/tests/modules/views_test_config/test_views/views.view.test_destroy.yml
index 75e8177f..52fb6414 100644
--- a/web/core/modules/views/tests/modules/views_test_config/test_views/views.view.test_destroy.yml
+++ b/web/core/modules/views/tests/modules/views_test_config/test_views/views.view.test_destroy.yml
@@ -77,10 +77,11 @@ display:
           entity_type: node
           entity_field: nid
         path:
-          field: path
+          field: view_node
           id: path
           table: node
-          plugin_id: node_path
+          output_url_as_text: true
+          plugin_id: entity_link
           entity_type: node
       filters:
         nid:
diff --git a/web/core/modules/views/tests/modules/views_test_config/test_views/views.view.test_entity_row.yml b/web/core/modules/views/tests/modules/views_test_config/test_views/views.view.test_entity_row.yml
index 6eafce72..58189a30 100644
--- a/web/core/modules/views/tests/modules/views_test_config/test_views/views.view.test_entity_row.yml
+++ b/web/core/modules/views/tests/modules/views_test_config/test_views/views.view.test_entity_row.yml
@@ -6,8 +6,8 @@ label: ''
 module: views
 description: ''
 tag: ''
-base_table: taxonomy_term_field_data
-base_field: nid
+base_table: entity_test
+base_field: id
 display:
   default:
     display_options:
@@ -20,10 +20,17 @@ display:
           offset: 0
         type: none
       row:
-        type: 'entity:taxonomy_term'
+        type: 'entity:entity_test'
         options:
           relationship: none
           view_mode: full
+      relationships:
+        user_id:
+          table: entity_test
+          field: user_id
+          id: user_id
+          relationship: none
+          plugin_id: standard
     display_plugin: default
     display_title: Default
     id: default
diff --git a/web/core/modules/views/tests/modules/views_test_config/test_views/views.view.test_entity_row_renderers.yml b/web/core/modules/views/tests/modules/views_test_config/test_views/views.view.test_entity_row_renderers.yml
index 9fcf52d2..3947592d 100644
--- a/web/core/modules/views/tests/modules/views_test_config/test_views/views.view.test_entity_row_renderers.yml
+++ b/web/core/modules/views/tests/modules/views_test_config/test_views/views.view.test_entity_row_renderers.yml
@@ -69,3 +69,272 @@ display:
         row: false
       row:
         type: fields
+  page_3:
+    display_plugin: page
+    id: page_3
+    display_title: 'Page 3'
+    position: 3
+    display_options:
+      rendering_language: '***LANGUAGE_entity_translation***'
+      path: test_entity_row_renderers/entities_relationship
+      display_extenders: { }
+      display_description: ''
+      relationships:
+        field_reference:
+          id: field_reference
+          table: node__field_reference
+          field: field_reference
+          relationship: none
+          group_type: group
+          admin_label: 'field_reference: Content'
+          required: false
+          plugin_id: standard
+      defaults:
+        relationships: false
+        filters: false
+        filter_groups: false
+        sorts: false
+        row: false
+      filters:
+        langcode:
+          id: langcode
+          table: node_field_data
+          field: langcode
+          relationship: none
+          group_type: group
+          admin_label: ''
+          operator: in
+          value:
+            en: en
+          group: 1
+          exposed: false
+          expose:
+            operator_id: ''
+            label: ''
+            description: ''
+            use_operator: false
+            operator: ''
+            operator_limit_selection: false
+            operator_list: { }
+            identifier: ''
+            required: false
+            remember: false
+            multiple: false
+            remember_roles:
+              authenticated: authenticated
+            reduce: false
+          is_grouped: false
+          group_info:
+            label: ''
+            description: ''
+            identifier: ''
+            optional: true
+            widget: select
+            multiple: false
+            remember: false
+            default_group: All
+            default_group_multiple: { }
+            group_items: { }
+          entity_type: node
+          entity_field: langcode
+          plugin_id: language
+      filter_groups:
+        operator: AND
+        groups:
+          1: AND
+      sorts:
+        title:
+          id: title
+          table: node_field_data
+          field: title
+          plugin_id: standard
+          entity_type: node
+          entity_field: title
+          expose:
+            field_identifier: title
+        title_1:
+          id: title_1
+          table: node_field_data
+          field: title
+          relationship: field_reference
+          group_type: group
+          admin_label: ''
+          order: ASC
+          exposed: false
+          expose:
+            label: ''
+            field_identifier: ''
+          entity_type: node
+          entity_field: title
+          plugin_id: standard
+      row:
+        type: 'entity:node'
+        options:
+          relationship: field_reference
+          view_mode: teaser
+  page_4:
+    display_plugin: page
+    id: page_4
+    display_title: 'Page 4'
+    position: 3
+    display_options:
+      rendering_language: '***LANGUAGE_entity_default***'
+      path: test_entity_row_renderers/fields_relationship
+      display_description: ''
+      relationships:
+        field_reference:
+          id: field_reference
+          table: node__field_reference
+          field: field_reference
+          relationship: none
+          group_type: group
+          admin_label: 'field_reference: Content'
+          required: false
+          plugin_id: standard
+      defaults:
+        relationships: false
+        filters: false
+        filter_groups: false
+        sorts: false
+        row: false
+        fields: false
+      filters:
+        langcode:
+          id: langcode
+          table: node_field_data
+          field: langcode
+          relationship: none
+          group_type: group
+          admin_label: ''
+          operator: in
+          value:
+            en: en
+          group: 1
+          exposed: false
+          expose:
+            operator_id: ''
+            label: ''
+            description: ''
+            use_operator: false
+            operator: ''
+            operator_limit_selection: false
+            operator_list: { }
+            identifier: ''
+            required: false
+            remember: false
+            multiple: false
+            remember_roles:
+              authenticated: authenticated
+            reduce: false
+          is_grouped: false
+          group_info:
+            label: ''
+            description: ''
+            identifier: ''
+            optional: true
+            widget: select
+            multiple: false
+            remember: false
+            default_group: All
+            default_group_multiple: { }
+            group_items: { }
+          entity_type: node
+          entity_field: langcode
+          plugin_id: language
+      filter_groups:
+        operator: AND
+        groups:
+          1: AND
+      sorts:
+        title:
+          id: title
+          table: node_field_data
+          field: title
+          plugin_id: standard
+          entity_type: node
+          entity_field: title
+          expose:
+            field_identifier: title
+        title_1:
+          id: title_1
+          table: node_field_data
+          field: title
+          relationship: field_reference
+          group_type: group
+          admin_label: ''
+          order: ASC
+          exposed: false
+          expose:
+            label: ''
+            field_identifier: ''
+          entity_type: node
+          entity_field: title
+          plugin_id: standard
+      row:
+        type: fields
+      fields:
+        title:
+          id: title
+          table: node_field_data
+          field: title
+          relationship: field_reference
+          group_type: group
+          admin_label: ''
+          label: ''
+          exclude: false
+          alter:
+            alter_text: false
+            text: ''
+            make_link: false
+            path: ''
+            absolute: false
+            external: false
+            replace_spaces: false
+            path_case: none
+            trim_whitespace: false
+            alt: ''
+            rel: ''
+            link_class: ''
+            prefix: ''
+            suffix: ''
+            target: ''
+            nl2br: false
+            max_length: 0
+            word_boundary: true
+            ellipsis: true
+            more_link: false
+            more_link_text: ''
+            more_link_path: ''
+            strip_tags: false
+            trim: false
+            preserve_tags: ''
+            html: false
+          element_type: ''
+          element_class: ''
+          element_label_type: ''
+          element_label_class: ''
+          element_label_colon: false
+          element_wrapper_type: ''
+          element_wrapper_class: ''
+          element_default_classes: true
+          empty: ''
+          hide_empty: false
+          empty_zero: false
+          hide_alter_empty: true
+          click_sort_column: value
+          type: string
+          settings:
+            link_to_entity: false
+          group_column: value
+          group_columns: { }
+          group_rows: true
+          delta_limit: 0
+          delta_offset: 0
+          delta_reversed: false
+          delta_first_last: false
+          multi_type: separator
+          separator: ', '
+          field_api_classes: false
+          entity_type: node
+          entity_field: title
+          plugin_id: field
diff --git a/web/core/modules/views/tests/modules/views_test_config/test_views/views.view.test_exposed_form_sort_items_per_page.yml b/web/core/modules/views/tests/modules/views_test_config/test_views/views.view.test_exposed_form_sort_items_per_page.yml
index af946f8c..ad9a6412 100644
--- a/web/core/modules/views/tests/modules/views_test_config/test_views/views.view.test_exposed_form_sort_items_per_page.yml
+++ b/web/core/modules/views/tests/modules/views_test_config/test_views/views.view.test_exposed_form_sort_items_per_page.yml
@@ -50,6 +50,7 @@ display:
           order: asc
           expose:
             label: 'id'
+            field_identifier: id
           exposed: true
           plugin_id: standard
     display_plugin: default
diff --git a/web/core/modules/views/tests/modules/views_test_config/test_views/views.view.test_field_field_revision_test.yml b/web/core/modules/views/tests/modules/views_test_config/test_views/views.view.test_field_field_revision_test.yml
index 63c74410..889b80ef 100644
--- a/web/core/modules/views/tests/modules/views_test_config/test_views/views.view.test_field_field_revision_test.yml
+++ b/web/core/modules/views/tests/modules/views_test_config/test_views/views.view.test_field_field_revision_test.yml
@@ -6,7 +6,7 @@ module: views
 description: ''
 tag: ''
 base_table: entity_test_rev_revision
-base_field: id
+base_field: revision_id
 display:
   default:
     display_options:
@@ -36,6 +36,70 @@ display:
           plugin_id: field
           entity_type: entity_test_rev
           entity_field: field_test
+        field_test__revision_id_1:
+          id: field_test__revision_id_1
+          table: entity_test_rev_revision__field_test
+          field: field_test__revision_id
+          relationship: none
+          group_type: group
+          admin_label: ''
+          label: ''
+          exclude: false
+          alter:
+            alter_text: true
+            text: 'Replace: {{ field_test__revision_id_1 }}'
+            make_link: false
+            path: ''
+            absolute: false
+            external: false
+            replace_spaces: false
+            path_case: none
+            trim_whitespace: false
+            alt: ''
+            rel: ''
+            link_class: ''
+            prefix: ''
+            suffix: ''
+            target: ''
+            nl2br: false
+            max_length: 0
+            word_boundary: true
+            ellipsis: true
+            more_link: false
+            more_link_text: ''
+            more_link_path: ''
+            strip_tags: false
+            trim: false
+            preserve_tags: ''
+            html: false
+          element_type: ''
+          element_class: ''
+          element_label_type: ''
+          element_label_class: ''
+          element_label_colon: false
+          element_wrapper_type: ''
+          element_wrapper_class: ''
+          element_default_classes: true
+          empty: ''
+          hide_empty: false
+          empty_zero: false
+          hide_alter_empty: true
+          click_sort_column: value
+          type: number_integer
+          settings:
+            thousand_separator: ''
+            prefix_suffix: true
+          group_column: value
+          group_columns: {  }
+          group_rows: true
+          delta_limit: 0
+          delta_offset: 0
+          delta_reversed: false
+          delta_first_last: false
+          multi_type: separator
+          separator: ', '
+          field_api_classes: false
+          plugin_id: field
         name:
           id: name
           table: entity_test_rev_revision
diff --git a/web/core/modules/views/tests/modules/views_test_config/test_views/views.view.test_tokens.yml b/web/core/modules/views/tests/modules/views_test_config/test_views/views.view.test_tokens.yml
index 717ea727..0aa83083 100644
--- a/web/core/modules/views/tests/modules/views_test_config/test_views/views.view.test_tokens.yml
+++ b/web/core/modules/views/tests/modules/views_test_config/test_views/views.view.test_tokens.yml
@@ -107,3 +107,35 @@ display:
             value: "Total rows: [view:total-rows] - Page count: [view:page-count]"
             format: basic_html
           plugin_id: text
+  page_4:
+    display_plugin: page
+    id: page_4
+    display_title: Specific items page
+    position: 5
+    display_options:
+      defaults:
+        title: false
+        pager: false
+        header: false
+      pager:
+        type: some
+        options:
+          offset: 0
+          items_per_page: 3
+      title: 'Test token page with "Display a specified number of items" pager plugin.'
+      path: test_tokens_display_specific_items
+      display_extenders: { }
+      header:
+        area:
+          id: area
+          table: views
+          field: area
+          relationship: none
+          group_type: group
+          admin_label: ''
+          empty: false
+          tokenize: false
+          content:
+            value: "Total rows: [view:total-rows]"
+            format: basic_html
+          plugin_id: text
diff --git a/web/core/modules/views/tests/modules/views_test_data/views_cache.test.es6.js b/web/core/modules/views/tests/modules/views_test_data/views_cache.test.es6.js
deleted file mode 100644
index 4089267f..00000000
--- a/web/core/modules/views/tests/modules/views_test_data/views_cache.test.es6.js
+++ /dev/null
@@ -1,8 +0,0 @@
-/**
- * @file
- * Just a placeholder file for the test.
- *
- * @see ViewsCacheTest::testHeaderStorage
- *
- * @ignore
- */
diff --git a/web/core/modules/views/tests/modules/views_test_data/views_cache.test.js b/web/core/modules/views/tests/modules/views_test_data/views_cache.test.js
index 9d11a7c1..4089267f 100644
--- a/web/core/modules/views/tests/modules/views_test_data/views_cache.test.js
+++ b/web/core/modules/views/tests/modules/views_test_data/views_cache.test.js
@@ -1,6 +1,8 @@
 /**
-* DO NOT EDIT THIS FILE.
-* See the following change record for more information,
-* https://www.drupal.org/node/2815083
-* @preserve
-**/
\ No newline at end of file
+ * @file
+ * Just a placeholder file for the test.
+ *
+ * @see ViewsCacheTest::testHeaderStorage
+ *
+ * @ignore
+ */
diff --git a/web/core/modules/views/tests/src/Functional/BulkFormTest.php b/web/core/modules/views/tests/src/Functional/BulkFormTest.php
index 4e515c6a..0f4c53d7 100644
--- a/web/core/modules/views/tests/src/Functional/BulkFormTest.php
+++ b/web/core/modules/views/tests/src/Functional/BulkFormTest.php
@@ -116,7 +116,7 @@ public function testBulkForm() {
 
     $this->drupalGet('test_bulk_form');
     $options = $this->assertSession()->selectExists('edit-action')->findAll('css', 'option');
-    $this->assertCount(2, $options);
+    $this->assertCount(3, $options);
     $this->assertSession()->optionExists('edit-action', 'node_make_sticky_action');
     $this->assertSession()->optionExists('edit-action', 'node_make_unsticky_action');
 
@@ -134,6 +134,11 @@ public function testBulkForm() {
     $this->drupalGet('test_bulk_form');
     $this->assertSession()->elementTextEquals('xpath', '//label[@for="edit-action"]', 'Action');
 
+    // There should be an error message if no action is selected.
+    $edit = ['node_bulk_form[0]' => TRUE, 'action' => ''];
+    $this->submitForm($edit, 'Apply to selected items');
+    $this->assertSession()->pageTextContains('No Action option selected.');
+
     // Setup up a different bulk form title.
     $view = Views::getView('test_bulk_form');
     $display = &$view->storage->getDisplay('default');
@@ -143,6 +148,11 @@ public function testBulkForm() {
     $this->drupalGet('test_bulk_form');
     $this->assertSession()->elementTextEquals('xpath', '//label[@for="edit-action"]', 'Test title');
 
+    // The error message when no action is selected should reflect the new form
+    // title.
+    $this->submitForm($edit, 'Apply to selected items');
+    $this->assertSession()->pageTextContains('No Test title option selected.');
+
     $this->drupalGet('test_bulk_form');
     // Call the node delete action.
     $edit = [];
diff --git a/web/core/modules/views/tests/src/Functional/Entity/EntityQueryAccessTest.php b/web/core/modules/views/tests/src/Functional/Entity/EntityQueryAccessTest.php
index 2cf2a830..1298796f 100644
--- a/web/core/modules/views/tests/src/Functional/Entity/EntityQueryAccessTest.php
+++ b/web/core/modules/views/tests/src/Functional/Entity/EntityQueryAccessTest.php
@@ -99,11 +99,11 @@ public function testBlockContentEntityQueryAccess() {
     $accessible_block->save();
 
     $account = $this->drupalCreateUser([
-      'administer blocks',
+      'access block library',
     ]);
     $this->drupalLogin($account);
 
-    $this->drupalGet('/admin/structure/block/block-content');
+    $this->drupalGet('/admin/content/block');
     $assert_session = $this->assertSession();
     $assert_session->statusCodeEquals(200);
     $assert_session->pageTextContains($accessible_block->label());
diff --git a/web/core/modules/views/tests/src/Functional/Entity/FieldEntityTest.php b/web/core/modules/views/tests/src/Functional/Entity/FieldEntityTest.php
index 5385121e..14898848 100644
--- a/web/core/modules/views/tests/src/Functional/Entity/FieldEntityTest.php
+++ b/web/core/modules/views/tests/src/Functional/Entity/FieldEntityTest.php
@@ -3,7 +3,11 @@
 namespace Drupal\Tests\views\Functional\Entity;
 
 use Drupal\comment\Tests\CommentTestTrait;
+use Drupal\Core\Logger\LoggerChannelFactoryInterface;
+use Drupal\field\Entity\FieldConfig;
+use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\node\Entity\Node;
+use Drupal\node\NodeInterface;
 use Drupal\user\Entity\User;
 use Drupal\Tests\views\Functional\ViewTestBase;
 use Drupal\views\Tests\ViewTestData;
@@ -24,7 +28,10 @@ class FieldEntityTest extends ViewTestBase {
    *
    * @var array
    */
-  public static $testViews = ['test_field_get_entity'];
+  public static $testViews = [
+    'test_field_get_entity',
+    'test_field_get_entity_null',
+  ];
 
   /**
    * Modules to enable.
@@ -47,6 +54,30 @@ protected function setUp($import_test_views = TRUE, $modules = ['views_test_conf
     $this->drupalCreateContentType(['type' => 'page']);
     $this->addDefaultCommentField('node', 'page');
 
+    // Add an entity reference field for the test_field_get_entity_null view.
+    FieldStorageConfig::create([
+      'field_name' => 'field_test_reference',
+      'type' => 'entity_reference',
+      'entity_type' => 'node',
+      'cardinality' => 1,
+      'settings' => [
+        'target_type' => 'node',
+      ],
+    ])->save();
+    FieldConfig::create([
+      'field_name' => 'field_test_reference',
+      'entity_type' => 'node',
+      'bundle' => 'page',
+      'label' => 'field_test_reference',
+      'settings' => [
+        'handler' => 'default',
+        'handler_settings' => [
+          'target_bundles' => [
+            'page' => 'page',
+          ],
+        ],
+      ],
+    ])->save();
     ViewTestData::createTestViews(static::class, $modules);
   }
 
@@ -92,4 +123,51 @@ public function testGetEntity() {
     $this->assertEquals($account->id(), $entity->id(), 'Make sure the right user entity got loaded.');
   }
 
+  /**
+   * Tests the getEntity method returning NULL for an optional relationship.
+   */
+  public function testGetEntityNullEntityOptionalRelationship(): void {
+    $nodeReference = Node::create([
+      'type' => 'page',
+      'title' => $this->randomString(),
+      'status' => NodeInterface::PUBLISHED,
+    ]);
+    $nodeReference->save();
+    $node = Node::create([
+      'type' => 'page',
+      'title' => $this->randomString(),
+      'status' => NodeInterface::PUBLISHED,
+      'field_test_reference' => [
+        'target_id' => $nodeReference->id(),
+      ],
+    ]);
+    $node->save();
+
+    $this->drupalLogin($this->drupalCreateUser(['access content']));
+    $view = Views::getView('test_field_get_entity_null');
+    $this->executeView($view);
+    // Second row will be $node.
+    $row = $view->result[1];
+
+    $entity = $view->field['nid']->getEntity($row);
+    $this->assertEquals($nodeReference->id(), $entity->id());
+
+    // Tests optional relationships with NULL entities don't log an error.
+    $nodeReference->delete();
+
+    // Use a mock logger so we can check that no errors were logged.
+    $loggerFactory = $this->createMock(LoggerChannelFactoryInterface::class);
+    $loggerFactory->expects($this->never())
+      ->method('get');
+    $container = \Drupal::getContainer();
+    $container->set('logger.factory', $loggerFactory);
+    \Drupal::setContainer($container);
+
+    $view = Views::getView('test_field_get_entity_null');
+    $this->executeView($view);
+    // First row will be $node since the other is now deleted.
+    $row = $view->result[0];
+    $this->assertNull($view->field['nid']->getEntity($row));
+  }
+
 }
diff --git a/web/core/modules/views/tests/src/Functional/GlossaryTest.php b/web/core/modules/views/tests/src/Functional/GlossaryTest.php
index 3b1b8966..3b896632 100644
--- a/web/core/modules/views/tests/src/Functional/GlossaryTest.php
+++ b/web/core/modules/views/tests/src/Functional/GlossaryTest.php
@@ -4,6 +4,7 @@
 
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\Core\Url;
+use Drupal\Tests\system\Functional\Cache\AssertPageCacheContextsAndTagsTrait;
 use Drupal\views\Tests\AssertViewsCacheTagsTrait;
 use Drupal\views\Views;
 
@@ -14,6 +15,7 @@
  */
 class GlossaryTest extends ViewTestBase {
 
+  use AssertPageCacheContextsAndTagsTrait;
   use AssertViewsCacheTagsTrait;
 
   /**
diff --git a/web/core/modules/views/tests/src/Functional/Handler/FieldWebTest.php b/web/core/modules/views/tests/src/Functional/Handler/FieldWebTest.php
index bd589fe9..cfc3ff39 100644
--- a/web/core/modules/views/tests/src/Functional/Handler/FieldWebTest.php
+++ b/web/core/modules/views/tests/src/Functional/Handler/FieldWebTest.php
@@ -317,19 +317,19 @@ public function testAlterUrl() {
     // Tests the external flag.
     // Switch on the external flag should output an external URL as well.
     $id_field->options['alter']['external'] = TRUE;
-    $id_field->options['alter']['path'] = $path = 'www.drupal.org';
+    $id_field->options['alter']['path'] = $path = 'www.example.com';
     $output = $renderer->executeInRenderContext(new RenderContext(), function () use ($id_field, $row) {
       return $id_field->theme($row);
     });
-    $this->assertSubString($output, 'http://www.drupal.org');
+    $this->assertSubString($output, 'http://www.example.com');
 
     // Setup a not external URL, which shouldn't lead to an external URL.
     $id_field->options['alter']['external'] = FALSE;
-    $id_field->options['alter']['path'] = $path = 'www.drupal.org';
+    $id_field->options['alter']['path'] = $path = 'www.example.com';
     $output = $renderer->executeInRenderContext(new RenderContext(), function () use ($id_field, $row) {
       return $id_field->theme($row);
     });
-    $this->assertNotSubString($output, 'http://www.drupal.org');
+    $this->assertNotSubString($output, 'http://www.example.com');
 
     // Tests the transforming of the case setting.
     $id_field->options['alter']['path'] = $path = $this->randomMachineName();
diff --git a/web/core/modules/views/tests/src/Functional/Handler/FilterDateTest.php b/web/core/modules/views/tests/src/Functional/Handler/FilterDateTest.php
index 1634fb3f..5e2614d6 100644
--- a/web/core/modules/views/tests/src/Functional/Handler/FilterDateTest.php
+++ b/web/core/modules/views/tests/src/Functional/Handler/FilterDateTest.php
@@ -46,12 +46,12 @@ class FilterDateTest extends ViewTestBase {
   /**
    * @var array
    */
-  protected $nodes;
+  protected array $nodes;
 
   /**
    * @var array
    */
-  protected $map;
+  protected array $map;
 
   /**
    * {@inheritdoc}
diff --git a/web/core/modules/views/tests/src/Functional/Handler/HandlerAllTest.php b/web/core/modules/views/tests/src/Functional/Handler/HandlerAllTest.php
index 52925792..d2c352c3 100644
--- a/web/core/modules/views/tests/src/Functional/Handler/HandlerAllTest.php
+++ b/web/core/modules/views/tests/src/Functional/Handler/HandlerAllTest.php
@@ -32,13 +32,11 @@ class HandlerAllTest extends ViewTestBase {
     'field',
     'filter',
     'file',
-    'forum',
     'history',
     'language',
     'locale',
     'node',
     'search',
-    'statistics',
     'taxonomy',
     'user',
   ];
@@ -70,7 +68,7 @@ public function testHandlers() {
 
       // Go through all fields and there through all handler types.
       foreach ($info as $field => $field_info) {
-        // Table is a reserved key for the metainformation.
+        // Table is a reserved key for the meta-information.
         if ($field != 'table' && !in_array("$base_table:$field", $exclude)) {
           $item = [
             'table' => $base_table,
diff --git a/web/core/modules/views/tests/src/Functional/Handler/HandlerTest.php b/web/core/modules/views/tests/src/Functional/Handler/HandlerTest.php
index 9d158979..65810230 100644
--- a/web/core/modules/views/tests/src/Functional/Handler/HandlerTest.php
+++ b/web/core/modules/views/tests/src/Functional/Handler/HandlerTest.php
@@ -258,6 +258,12 @@ public function testRelationshipUI() {
     $expected_options = ['none', 'nid'];
     $this->assertEquals($expected_options, $options);
 
+    // Change the Row plugin to display "Content".
+    $this->drupalGet('admin/structure/views/nojs/display/test_handler_relationships/default/row');
+    $this->submitForm(['row[type]' => 'entity:node'], 'Apply');
+    $this->assertSession()->fieldExists('row_options[relationship]');
+    $this->submitForm(['row_options[view_mode]' => 'default'], 'Apply');
+
     // Remove the relationship and make sure no relationship option appears.
     $this->drupalGet('admin/structure/views/nojs/handler/test_handler_relationships/default/relationship/nid');
     $this->submitForm([], 'Remove');
diff --git a/web/core/modules/views/tests/src/Functional/Plugin/ContextualFiltersBlockContextTest.php b/web/core/modules/views/tests/src/Functional/Plugin/ContextualFiltersBlockContextTest.php
index d79c1c5b..b28fb701 100644
--- a/web/core/modules/views/tests/src/Functional/Plugin/ContextualFiltersBlockContextTest.php
+++ b/web/core/modules/views/tests/src/Functional/Plugin/ContextualFiltersBlockContextTest.php
@@ -31,7 +31,7 @@ class ContextualFiltersBlockContextTest extends ViewTestBase {
   /**
    * {@inheritdoc}
    */
-  protected $defaultTheme = 'starterkit_theme';
+  protected $defaultTheme = 'stark';
 
   /**
    * Views used by this test.
@@ -103,7 +103,7 @@ public function testBlockContext() {
 
     // Place test block via block UI to check if contexts are correctly exposed.
     $this->drupalGet(
-      'admin/structure/block/add/views_block:test_view_block_with_context-block_1/starterkit_theme',
+      'admin/structure/block/add/views_block:test_view_block_with_context-block_1/stark',
       ['query' => ['region' => 'content']]
     );
     $edit = [
@@ -115,7 +115,7 @@ public function testBlockContext() {
     /** @var \Drupal\block\BlockInterface $block */
     $block = $this->container->get('entity_type.manager')
       ->getStorage('block')
-      ->load('views_block__test_view_block_with_context_block_1');
+      ->load('stark_views_block__test_view_block_with_context_block_1');
     $expected_settings = [
       'id' => 'views_block:test_view_block_with_context-block_1',
       'label' => '',
diff --git a/web/core/modules/views/tests/src/Functional/Plugin/DisplayPageWebTest.php b/web/core/modules/views/tests/src/Functional/Plugin/DisplayPageWebTest.php
index e6b97da7..1cc6c9f0 100644
--- a/web/core/modules/views/tests/src/Functional/Plugin/DisplayPageWebTest.php
+++ b/web/core/modules/views/tests/src/Functional/Plugin/DisplayPageWebTest.php
@@ -147,6 +147,37 @@ public function testPagePaths() {
     $this->assertPagePath('☺');
   }
 
+  /**
+   * Tests the 'use_admin_theme' page display option.
+   */
+  public function testAdminTheme(): void {
+    $account = $this->drupalCreateUser(['view the administration theme']);
+    $this->drupalLogin($account);
+    // Use distinct default and administrative themes for this test.
+    /** @var \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler */
+    $theme_handler = $this->container->get('theme_handler');
+    /** @var \Drupal\Core\Extension\ThemeInstallerInterface $theme_installer */
+    $theme_installer = $this->container->get('theme_installer');
+    $theme_installer->install(['claro']);
+    $this->container->get('config.factory')
+      ->getEditable('system.theme')
+      ->set('admin', 'claro')
+      ->set('default', 'stable')
+      ->save();
+    $theme_handler->refreshInfo();
+    // Check that the page has been served with the default theme.
+    $this->drupalGet('test_page_display_200');
+    $this->assertSession()->responseNotContains('core/themes/claro/css/base/elements.css');
+
+    $view = $this->config('views.view.test_page_display');
+    $view->set('display.page_3.display_options.use_admin_theme', TRUE)->save();
+    $this->container->get('router.builder')->rebuild();
+
+    // Check that the page was served with the administrative theme.
+    $this->drupalGet('test_page_display_200');
+    $this->assertSession()->responseContains('core/themes/claro/css/base/elements.css');
+  }
+
   /**
    * Tests that we can successfully change a view page display path.
    *
diff --git a/web/core/modules/views/tests/src/Functional/Plugin/DisplayTest.php b/web/core/modules/views/tests/src/Functional/Plugin/DisplayTest.php
index 2e99e8f5..97d2ffc2 100644
--- a/web/core/modules/views/tests/src/Functional/Plugin/DisplayTest.php
+++ b/web/core/modules/views/tests/src/Functional/Plugin/DisplayTest.php
@@ -229,15 +229,15 @@ public function testReadMoreCustomURL() {
     $output = $renderer->renderRoot($output);
     $this->assertStringContainsString('/node', $output, 'The read more link with href "/node" was found.');
 
-    // Test more link with absolute url.
+    // Test more link with absolute URL.
     $view->display_handler->setOption('link_display', 'custom_url');
-    $view->display_handler->setOption('link_url', 'http://drupal.org');
+    $view->display_handler->setOption('link_url', 'http://example.com');
     $this->executeView($view);
     $output = $view->preview();
     $output = $renderer->renderRoot($output);
-    $this->assertStringContainsString('http://drupal.org', $output, 'The read more link with href "http://drupal.org" was found.');
+    $this->assertStringContainsString('http://example.com', $output, 'The read more link with href "http://example.com" was found.');
 
-    // Test more link with query parameters in the url.
+    // Test more link with query parameters in the URL.
     $view->display_handler->setOption('link_display', 'custom_url');
     $view->display_handler->setOption('link_url', 'node?page=1&foo=bar');
     $this->executeView($view);
@@ -245,7 +245,7 @@ public function testReadMoreCustomURL() {
     $output = $renderer->renderRoot($output);
     $this->assertStringContainsString('/node?page=1&amp;foo=bar', $output, 'The read more link with href "/node?page=1&foo=bar" was found.');
 
-    // Test more link with fragment in the url.
+    // Test more link with fragment in the URL.
     $view->display_handler->setOption('link_display', 'custom_url');
     $view->display_handler->setOption('link_url', 'node#target');
     $this->executeView($view);
diff --git a/web/core/modules/views/tests/src/Functional/Plugin/ExposedFormCheckboxesTest.php b/web/core/modules/views/tests/src/Functional/Plugin/ExposedFormCheckboxesTest.php
index e4b1b541..aa22353f 100644
--- a/web/core/modules/views/tests/src/Functional/Plugin/ExposedFormCheckboxesTest.php
+++ b/web/core/modules/views/tests/src/Functional/Plugin/ExposedFormCheckboxesTest.php
@@ -109,7 +109,7 @@ public function testExposedFormRenderCheckboxes() {
     // checked.
     $this->clickLink('Page 2');
     $this->assertSession()->elementsCount('xpath', "//div[contains(@class, 'views-row')]", 1);
-    $this->assertSession()->pageTextNotContains('An illegal choice has been detected. Please contact the site administrator.');
+    $this->assertSession()->pageTextNotContains('The submitted value in the Type element is not allowed.');
   }
 
   /**
@@ -134,7 +134,7 @@ public function testExposedIsAllOfFilter() {
       ],
       'auto_create' => FALSE,
     ];
-    $this->createEntityReferenceField('node', 'article', $field_name, NULL, 'taxonomy_term', 'default', $handler_settings, FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED);
+    $this->createEntityReferenceField('node', 'article', $field_name, 'Reference Field', 'taxonomy_term', 'default', $handler_settings, FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED);
 
     // Add some test nodes.
     $this->createNode([
@@ -158,14 +158,14 @@ public function testExposedIsAllOfFilter() {
     // All rows are displayed by default on the first page when no options are
     // checked.
     $this->assertSession()->elementsCount('xpath', "//div[contains(@class, 'views-row')]", 8);
-    $this->assertSession()->pageTextNotContains('An illegal choice has been detected. Please contact the site administrator.');
+    $this->assertSession()->pageTextNotContains('The submitted value in the Reference Field element is not allowed.');
 
     // Select one option and ensure we still have results.
     $tid = $this->terms[0]->id();
     $this->submitForm(["tid[$tid]" => $tid], 'Apply');
     // Ensure only nodes tagged with $tid are displayed.
     $this->assertSession()->elementsCount('xpath', "//div[contains(@class, 'views-row')]", 2);
-    $this->assertSession()->pageTextNotContains('An illegal choice has been detected. Please contact the site administrator.');
+    $this->assertSession()->pageTextNotContains('The submitted value in the Reference Field element is not allowed.');
   }
 
 }
diff --git a/web/core/modules/views/tests/src/Functional/Plugin/ExposedFormTest.php b/web/core/modules/views/tests/src/Functional/Plugin/ExposedFormTest.php
index b653c352..4f6dd5b8 100644
--- a/web/core/modules/views/tests/src/Functional/Plugin/ExposedFormTest.php
+++ b/web/core/modules/views/tests/src/Functional/Plugin/ExposedFormTest.php
@@ -234,7 +234,7 @@ public function testExposedBlock($display) {
     $block->getPlugin()->setConfigurationValue('views_label', '<strong>Custom</strong> title<script>alert("hacked!");</script>');
     $block->save();
 
-    // Test that the custom block label is found.
+    // Test that the content block label is found.
     $this->drupalGet('test_exposed_block');
     $this->assertSession()->responseContains('<strong>Custom</strong> titlealert("hacked!");');
 
diff --git a/web/core/modules/views/tests/src/Functional/Plugin/FilterTest.php b/web/core/modules/views/tests/src/Functional/Plugin/FilterTest.php
index 5d9501c5..9f6bb32a 100644
--- a/web/core/modules/views/tests/src/Functional/Plugin/FilterTest.php
+++ b/web/core/modules/views/tests/src/Functional/Plugin/FilterTest.php
@@ -172,7 +172,7 @@ public function testInOperatorSelectAllOptions() {
     $this->drupalGet('admin/structure/views/view/test_filter_in_operator_ui/edit/default');
     $this->submitForm([], 'Save');
     $this->submitForm([], 'Update preview');
-    $this->assertSession()->pageTextNotContains('An illegal choice has been detected.');
+    $this->assertSession()->pageTextNotContains('The submitted value "page" in the Type element is not allowed.');
   }
 
   /**
diff --git a/web/core/modules/views/tests/src/Functional/Plugin/MonthDatePluginTest.php b/web/core/modules/views/tests/src/Functional/Plugin/MonthDatePluginTest.php
index 270b1f88..b9281a82 100644
--- a/web/core/modules/views/tests/src/Functional/Plugin/MonthDatePluginTest.php
+++ b/web/core/modules/views/tests/src/Functional/Plugin/MonthDatePluginTest.php
@@ -48,7 +48,7 @@ class MonthDatePluginTest extends ViewTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp($import_test_views = TRUE, $modules = ['views_test_config']): void {
+  protected function setUp($import_test_views = TRUE, $modules = ['views_test_config']): void {
     parent::setUp($import_test_views, $modules);
     $utc = new \DateTimeZone('UTC');
     $format = 'Y-m-d h:i:s';
diff --git a/web/core/modules/views/tests/src/Functional/Plugin/PagerTest.php b/web/core/modules/views/tests/src/Functional/Plugin/PagerTest.php
index 686e06b6..f9c70be0 100644
--- a/web/core/modules/views/tests/src/Functional/Plugin/PagerTest.php
+++ b/web/core/modules/views/tests/src/Functional/Plugin/PagerTest.php
@@ -351,6 +351,22 @@ public function testNormalPager() {
     // Test pager cache contexts.
     $this->drupalGet('test_pager_full');
     $this->assertCacheContexts(['languages:language_interface', 'theme', 'timezone', 'url.query_args', 'user.node_grants:view']);
+
+    // Set "Number of pager links visible" to 1 and check the active page number
+    // on the last page.
+    $view = Views::getView('test_pager_full');
+    $view->setDisplay();
+    $pager = [
+      'type' => 'full',
+      'options' => [
+        'items_per_page' => 5,
+        'quantity' => 1,
+      ],
+    ];
+    $view->display_handler->setOption('pager', $pager);
+    $view->save();
+    $this->drupalGet('test_pager_full', ['query' => ['page' => 2]]);
+    $this->assertEquals('Current page 3', $this->assertSession()->elementExists('css', '.pager__items li.is-active')->getText());
   }
 
   /**
diff --git a/web/core/modules/views/tests/src/Functional/Plugin/ViewsBulkTest.php b/web/core/modules/views/tests/src/Functional/Plugin/ViewsBulkTest.php
index ba207541..899d47bf 100644
--- a/web/core/modules/views/tests/src/Functional/Plugin/ViewsBulkTest.php
+++ b/web/core/modules/views/tests/src/Functional/Plugin/ViewsBulkTest.php
@@ -16,7 +16,7 @@ class ViewsBulkTest extends ViewTestBase {
    *
    * @var \Drupal\user\UserInterface
    */
-  protected $admin_user;
+  protected $adminUser;
 
   /**
    * Modules to enable.
@@ -33,11 +33,11 @@ class ViewsBulkTest extends ViewTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp($import_test_views = TRUE, $modules = ['views_test_config']): void {
+  protected function setUp($import_test_views = TRUE, $modules = ['views_test_config']): void {
     parent::setUp($import_test_views, $modules);
 
     $this->drupalCreateContentType(['type' => 'page']);
-    $this->admin_user = $this->createUser(['bypass node access', 'administer nodes', 'access content overview']);
+    $this->adminUser = $this->createUser(['bypass node access', 'administer nodes', 'access content overview']);
   }
 
   /**
@@ -53,7 +53,7 @@ public function testBulkSelection() {
     ]);
 
     // Login as administrator and go to admin/content.
-    $this->drupalLogin($this->admin_user);
+    $this->drupalLogin($this->adminUser);
     $this->drupalGet('admin/content');
     $this->assertSession()->pageTextContains($node_1->getTitle());
 
@@ -64,6 +64,11 @@ public function testBulkSelection() {
       'changed' => \Drupal::time()->getRequestTime() - 120,
     ]);
 
+    // Select the node deletion action.
+    $action_select = $this->getSession()->getPage()->findField('edit-action');
+    $action_select_name = $action_select->getAttribute('name');
+    $this->getSession()->getPage()->selectFieldOption($action_select_name, 'node_delete_action');
+
     // Now click 'Apply to selected items' and assert the first node is selected
     // on the confirm form.
     $this->submitForm(['node_bulk_form[0]' => TRUE], 'Apply to selected items');
@@ -82,6 +87,9 @@ public function testBulkSelection() {
       'title' => 'The third node',
     ]);
 
+    // Select the node deletion action.
+    $this->getSession()->getPage()->selectFieldOption($action_select_name, 'node_delete_action');
+
     // Now click 'Apply to selected items' and assert the second node is
     // selected on the confirm form.
     $this->submitForm(['node_bulk_form[1]' => TRUE], 'Apply to selected items');
diff --git a/web/core/modules/views/tests/src/Functional/Update/GlossaryStatusFilterTest.php b/web/core/modules/views/tests/src/Functional/Update/GlossaryStatusFilterTest.php
deleted file mode 100644
index aee7f502..00000000
--- a/web/core/modules/views/tests/src/Functional/Update/GlossaryStatusFilterTest.php
+++ /dev/null
@@ -1,38 +0,0 @@
-<?php
-
-namespace Drupal\Tests\views\Functional\Update;
-
-use Drupal\FunctionalTests\Update\UpdatePathTestBase;
-use Drupal\views\Entity\View;
-
-/**
- * Tests that the status filter is added to the glossary view.
- *
- * @group Update
- */
-class GlossaryStatusFilterTest extends UpdatePathTestBase {
-
-  /**
-   * {@inheritdoc}
-   */
-  protected function setDatabaseDumpFiles() {
-    $this->databaseDumpFiles = [
-      __DIR__ . '/../../../../../system/tests/fixtures/update/drupal-9.0.0.filled.standard.php.gz',
-    ];
-  }
-
-  /**
-   * Tests the default glossary view.
-   */
-  public function testGlossaryView() {
-    $view = View::load('glossary');
-
-    $this->assertTrue(empty($view->getDisplay('default')['display_options']['filters']['status']));
-
-    $this->runUpdates();
-
-    $view = View::load('glossary');
-    $this->assertNotEmpty($view->getDisplay('default')['display_options']['filters']['status']);
-  }
-
-}
diff --git a/web/core/modules/views/tests/src/Functional/Update/ViewsMultiValueFieldUpdateTest.php b/web/core/modules/views/tests/src/Functional/Update/ViewsMultiValueFieldUpdateTest.php
deleted file mode 100644
index 00cc57c9..00000000
--- a/web/core/modules/views/tests/src/Functional/Update/ViewsMultiValueFieldUpdateTest.php
+++ /dev/null
@@ -1,56 +0,0 @@
-<?php
-
-namespace Drupal\Tests\views\Functional\Update;
-
-use Drupal\FunctionalTests\Update\UpdatePathTestBase;
-
-/**
- * Tests the update path base class.
- *
- * @group Update
- * @group legacy
- */
-class ViewsMultiValueFieldUpdateTest extends UpdatePathTestBase {
-
-  /**
-   * {@inheritdoc}
-   */
-  protected static $modules = ['update_test_schema'];
-
-  /**
-   * {@inheritdoc}
-   */
-  protected static $configSchemaCheckerExclusions = [
-    // This config is broken intentionally.
-    'views.view.test_broken_config_multi_value',
-    'views.view.test_another_broken_config_multi_value',
-  ];
-
-  /**
-   * {@inheritdoc}
-   */
-  protected function setDatabaseDumpFiles() {
-    $this->databaseDumpFiles = [
-      __DIR__ . '/../../../../../system/tests/fixtures/update/drupal-9.3.0.bare.standard.php.gz',
-      __DIR__ . '/../../../fixtures/update/multi_value_fields.php',
-    ];
-  }
-
-  /**
-   * Tests views_post_update_field_names_for_multivalue_fields().
-   */
-  public function testViewsPostUpdateFieldNamesForMultiValueFields() {
-    $key_value_store = \Drupal::keyValue('post_update');
-    $existing_update_functions = $key_value_store->get('existing_updates', []);
-    $existing_update_functions = array_diff($existing_update_functions, ['views_post_update_field_names_for_multivalue_fields']);
-    $key_value_store->set('existing_updates', $existing_update_functions);
-
-    $this->runUpdates();
-
-    $this->assertSession()->pageTextContainsOnce('Updates failed for the entity type View, for test_another_broken_config_multi_value, test_broken_config_multi_value. Check the logs.');
-    $this->drupalLogin($this->rootUser);
-    $this->drupalGet('admin/reports/dblog', ['query' => ['type[]' => 'update']]);
-    $this->assertSession()->pageTextMatchesCount(2, '/Unable to update view test_broken_config_multi_value/');
-  }
-
-}
diff --git a/web/core/modules/views/tests/src/Functional/Update/ViewsSettingsRenameTest.php b/web/core/modules/views/tests/src/Functional/Update/ViewsSettingsRenameTest.php
deleted file mode 100644
index ed8431e3..00000000
--- a/web/core/modules/views/tests/src/Functional/Update/ViewsSettingsRenameTest.php
+++ /dev/null
@@ -1,48 +0,0 @@
-<?php
-
-namespace Drupal\Tests\views\Functional\Update;
-
-use Drupal\FunctionalTests\Update\UpdatePathTestBase;
-
-/**
- * Tests renaming views module's configuration.
- *
- * @group Update
- */
-class ViewsSettingsRenameTest extends UpdatePathTestBase {
-
-  /**
-   * {@inheritdoc}
-   */
-  protected $defaultTheme = 'stark';
-
-  /**
-   * {@inheritdoc}
-   */
-  protected function setDatabaseDumpFiles() {
-    $this->databaseDumpFiles = [
-      __DIR__ . '/../../../../../system/tests/fixtures/update/drupal-8.8.0.bare.standard.php.gz',
-    ];
-  }
-
-  /**
-   * Tests upgrading views settings.
-   *
-   * @covers \views_post_update_rename_default_display_setting
-   */
-  public function testRenameViewsSettings() {
-    $config = $this->config('views.settings')->get('ui.show');
-    $this->assertArrayHasKey('master_display', $config);
-    $this->assertArrayNotHasKey('default_display', $config);
-    $this->assertFalse($config['master_display']);
-
-    // Run updates.
-    $this->runUpdates();
-
-    $config = $this->config('views.settings')->get('ui.show');
-    $this->assertArrayHasKey('default_display', $config);
-    $this->assertArrayNotHasKey('master_display', $config);
-    $this->assertFalse($config['default_display']);
-  }
-
-}
diff --git a/web/core/modules/views/tests/src/Functional/Update/ViewsSortIdentifiersUpdateTest.php b/web/core/modules/views/tests/src/Functional/Update/ViewsSortIdentifiersUpdateTest.php
deleted file mode 100644
index e7b0cbdc..00000000
--- a/web/core/modules/views/tests/src/Functional/Update/ViewsSortIdentifiersUpdateTest.php
+++ /dev/null
@@ -1,42 +0,0 @@
-<?php
-
-namespace Drupal\Tests\views\Functional\Update;
-
-use Drupal\FunctionalTests\Update\UpdatePathTestBase;
-
-/**
- * Tests the views_post_update_sort_identifier() post update.
- *
- * @group views
- * @group legacy
- */
-class ViewsSortIdentifiersUpdateTest extends UpdatePathTestBase {
-
-  /**
-   * {@inheritdoc}
-   */
-  protected function setDatabaseDumpFiles() {
-    $this->databaseDumpFiles = [
-      __DIR__ . '/../../../../../system/tests/fixtures/update/drupal-8.8.0.bare.standard.php.gz',
-    ];
-  }
-
-  /**
-   * Tests views_post_update_sort_identifier().
-   *
-   * @see views_post_update_sort_identifier()
-   */
-  public function testSortIdentifierPostUpdate(): void {
-    $config_factory = \Drupal::configFactory();
-    $view = $config_factory->get('views.view.comments_recent');
-    $trail = 'display.default.display_options.sorts.created';
-    $this->assertArrayNotHasKey('field_identifier', $view->get("{$trail}.expose"));
-
-    $this->runUpdates();
-
-    $view = $config_factory->get('views.view.comments_recent');
-    $sort_handler = $view->get($trail);
-    $this->assertSame($sort_handler['id'], $sort_handler['expose']['field_identifier']);
-  }
-
-}
diff --git a/web/core/modules/views/tests/src/Functional/UserBatchActionTest.php b/web/core/modules/views/tests/src/Functional/UserBatchActionTest.php
index 4db2f422..d8a1870d 100644
--- a/web/core/modules/views/tests/src/Functional/UserBatchActionTest.php
+++ b/web/core/modules/views/tests/src/Functional/UserBatchActionTest.php
@@ -18,8 +18,6 @@ class UserBatchActionTest extends BrowserTestBase {
    * @var array
    */
   protected static $modules = [
-    // @todo Remove this in https://www.drupal.org/node/3219959
-    'block',
     'user',
     'user_batch_action_test',
     'views',
diff --git a/web/core/modules/views/tests/src/Functional/ViewTestBase.php b/web/core/modules/views/tests/src/Functional/ViewTestBase.php
index 86eec8c0..de7eeb08 100644
--- a/web/core/modules/views/tests/src/Functional/ViewTestBase.php
+++ b/web/core/modules/views/tests/src/Functional/ViewTestBase.php
@@ -39,7 +39,7 @@ abstract class ViewTestBase extends BrowserTestBase {
    * @param array $modules
    *   The module directories to look in for test views.
    */
-  protected function setUp($import_test_views = TRUE, $modules = ['views_test_config']) {
+  protected function setUp($import_test_views = TRUE, $modules = ['views_test_config']): void {
     parent::setUp();
     if ($import_test_views) {
       ViewTestData::createTestViews(static::class, $modules);
diff --git a/web/core/modules/views/tests/src/Functional/ViewTranslationTest.php b/web/core/modules/views/tests/src/Functional/ViewTranslationTest.php
index 62cd09b1..b29df6c6 100644
--- a/web/core/modules/views/tests/src/Functional/ViewTranslationTest.php
+++ b/web/core/modules/views/tests/src/Functional/ViewTranslationTest.php
@@ -31,7 +31,7 @@ class ViewTranslationTest extends ViewTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp($import_test_views = TRUE, $modules = ['views_test_config']): void {
+  protected function setUp($import_test_views = TRUE, $modules = ['views_test_config']): void {
     parent::setUp($import_test_views, $modules);
 
     $this->enableViewsTestModule();
diff --git a/web/core/modules/views/tests/src/Functional/Wizard/WizardTestBase.php b/web/core/modules/views/tests/src/Functional/Wizard/WizardTestBase.php
index e85540a7..8bf877ce 100644
--- a/web/core/modules/views/tests/src/Functional/Wizard/WizardTestBase.php
+++ b/web/core/modules/views/tests/src/Functional/Wizard/WizardTestBase.php
@@ -19,7 +19,7 @@ abstract class WizardTestBase extends ViewTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp($import_test_views = TRUE, $modules = []) {
+  protected function setUp($import_test_views = TRUE, $modules = []): void {
     parent::setUp($import_test_views, $modules);
 
     // Create and log in a user with administer views permission.
diff --git a/web/core/modules/views/tests/src/FunctionalJavascript/BlockExposedFilterAJAXTest.php b/web/core/modules/views/tests/src/FunctionalJavascript/BlockExposedFilterAJAXTest.php
index 8a8e8641..27b39943 100644
--- a/web/core/modules/views/tests/src/FunctionalJavascript/BlockExposedFilterAJAXTest.php
+++ b/web/core/modules/views/tests/src/FunctionalJavascript/BlockExposedFilterAJAXTest.php
@@ -32,7 +32,7 @@ class BlockExposedFilterAJAXTest extends WebDriverTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp(): void {
+  protected function setUp(): void {
     parent::setUp();
     ViewTestData::createTestViews(self::class, ['views_test_config']);
     $this->createContentType(['type' => 'page']);
diff --git a/web/core/modules/views/tests/src/FunctionalJavascript/PaginationAJAXTest.php b/web/core/modules/views/tests/src/FunctionalJavascript/PaginationAJAXTest.php
index 00454912..42aacebc 100644
--- a/web/core/modules/views/tests/src/FunctionalJavascript/PaginationAJAXTest.php
+++ b/web/core/modules/views/tests/src/FunctionalJavascript/PaginationAJAXTest.php
@@ -46,7 +46,11 @@ protected function setUp(): void {
     // Create a Content type and eleven test nodes.
     $this->createContentType(['type' => 'page']);
     for ($i = 1; $i <= 11; $i++) {
-      $this->createNode(['title' => 'Node ' . $i . ' content', 'changed' => $i * 1000]);
+      $fields = [
+        'title' => $i > 6 ? 'Node ' . $i . ' content' : 'Node ' . $i . ' content default_value',
+        'changed' => $i * 1000,
+      ];
+      $this->createNode($fields);
     }
 
     // Create a user privileged enough to view content.
@@ -90,18 +94,19 @@ public function testBasicPagination() {
     /** @var \Behat\Mink\Element\NodeElement[] $rows */
     $rows = $page->findAll('css', 'tbody tr');
     $this->assertCount(5, $rows);
-    $this->assertStringContainsString('Node 1 content', $rows[0]->getHtml());
+    $this->assertStringContainsString('Node 1 content default_value', $rows[0]->getHtml());
 
     $this->clickLink('Go to page 2');
     $session_assert->assertWaitOnAjaxRequest();
     $rows = $page->findAll('css', 'tbody tr');
     $this->assertCount(5, $rows);
-    $this->assertStringContainsString('Node 6 content', $rows[0]->getHtml());
+    $this->assertStringContainsString('Node 6 content default_value', $rows[0]->getHtml());
     $link = $page->findLink('Go to page 3');
-    // Test that no unwanted parameters are added to the URL.
-    $this->assertEquals('?status=All&type=All&langcode=All&items_per_page=5&order=changed&sort=asc&page=2', $link->getAttribute('href'));
     $this->assertNoDuplicateAssetsOnPage();
 
+    // Test that no unwanted parameters are added to the URL.
+    $this->assertEquals('?status=All&type=All&title=&langcode=All&items_per_page=5&order=changed&sort=asc&page=2', $link->getAttribute('href'));
+
     $this->clickLink('Go to page 3');
     $session_assert->assertWaitOnAjaxRequest();
     $rows = $page->findAll('css', 'tbody tr');
@@ -113,14 +118,14 @@ public function testBasicPagination() {
     $session_assert->assertWaitOnAjaxRequest();
     $rows = $page->findAll('css', 'tbody tr');
     $this->assertCount(5, $rows);
-    $this->assertStringContainsString('Node 1 content', $rows[0]->getHtml());
+    $this->assertStringContainsString('Node 1 content default_value', $rows[0]->getHtml());
 
     // Navigate using the 'next' link.
     $this->clickLink('Go to next page');
     $session_assert->assertWaitOnAjaxRequest();
     $rows = $page->findAll('css', 'tbody tr');
     $this->assertCount(5, $rows);
-    $this->assertStringContainsString('Node 6 content', $rows[0]->getHtml());
+    $this->assertStringContainsString('Node 6 content default_value', $rows[0]->getHtml());
 
     // Navigate using the 'last' link.
     $this->clickLink('Go to last page');
@@ -134,6 +139,104 @@ public function testBasicPagination() {
     $this->assertEquals($expected_view_path, current($settings['views']['ajaxViews'])['view_path']);
   }
 
+  /**
+   * Tests if pagination via AJAX works for the filter with default value.
+   */
+  public function testDefaultFilterPagination() {
+    // Add default value to the title filter.
+    $view = \Drupal::configFactory()->getEditable('views.view.test_content_ajax');
+    $display = $view->get('display');
+    $display['default']['display_options']['filters']['title']['value'] = 'default_value';
+    $view->set('display', $display);
+    $view->save();
+
+    // Visit the content page.
+    $this->drupalGet('test-content-ajax');
+
+    $session_assert = $this->assertSession();
+
+    $page = $this->getSession()->getPage();
+
+    $settings = $this->getDrupalSettings();
+
+    // Make sure that the view_path is set correctly.
+    $expected_view_path = '/test-content-ajax';
+    $this->assertEquals($expected_view_path, current($settings['views']['ajaxViews'])['view_path']);
+
+    // Set the number of items displayed per page to 5 using the exposed pager.
+    $page->selectFieldOption('edit-items-per-page', 5);
+    $page->pressButton('Filter');
+    $session_assert->assertWaitOnAjaxRequest();
+
+    // Change 'Updated' sorting from descending to ascending.
+    $page->clickLink('Updated');
+    $session_assert->assertWaitOnAjaxRequest();
+
+    // Use the pager by clicking on the links and test if we see the expected
+    // number of rows on each page. For easy targeting the titles of the pager
+    // links are used.
+    /** @var \Behat\Mink\Element\NodeElement[] $rows */
+    $rows = $page->findAll('css', 'tbody tr');
+    $this->assertCount(5, $rows);
+    $this->assertStringContainsString('Node 1 content default_value', $rows[0]->getHtml());
+
+    $this->clickLink('Go to page 2');
+    $session_assert->assertWaitOnAjaxRequest();
+    $rows = $page->findAll('css', 'tbody tr');
+    $this->assertCount(1, $rows);
+    $this->assertStringContainsString('Node 6 content default_value', $rows[0]->getHtml());
+    $link = $page->findLink('Go to page 1');
+    $this->assertNoDuplicateAssetsOnPage();
+
+    // Test that no unwanted parameters are added to the URL.
+    $this->assertEquals('?status=All&type=All&title=default_value&langcode=All&items_per_page=5&order=changed&sort=asc&page=0', $link->getAttribute('href'));
+
+    // Set the title filter to empty string using the exposed pager.
+    $page->fillField('title', '');
+    $page->pressButton('Filter');
+    $session_assert->assertWaitOnAjaxRequest();
+    $rows = $page->findAll('css', 'tbody tr');
+    $this->assertCount(5, $rows);
+    $this->assertStringContainsString('Node 11 content', $rows[0]->getHtml());
+
+    // Navigate to the second page.
+    $this->clickLink('Go to page 2');
+    $session_assert->assertWaitOnAjaxRequest();
+    $rows = $page->findAll('css', 'tbody tr');
+    $this->assertCount(5, $rows);
+    $this->assertStringContainsString('Node 6 content default_value', $rows[0]->getHtml());
+    $link = $page->findLink('Go to page 1');
+    $this->assertNoDuplicateAssetsOnPage();
+
+    // Test that no unwanted parameters are added to the URL.
+    $this->assertEquals('?status=All&type=All&title=&langcode=All&items_per_page=5&page=0', $link->getAttribute('href'));
+
+    // Navigate back to the first page.
+    $this->clickLink('Go to first page');
+    $session_assert->assertWaitOnAjaxRequest();
+    $rows = $page->findAll('css', 'tbody tr');
+    $this->assertCount(5, $rows);
+    $this->assertStringContainsString('Node 11 content', $rows[0]->getHtml());
+
+    // Navigate using the 'next' link.
+    $this->clickLink('Go to next page');
+    $session_assert->assertWaitOnAjaxRequest();
+    $rows = $page->findAll('css', 'tbody tr');
+    $this->assertCount(5, $rows);
+    $this->assertStringContainsString('Node 6 content default_value', $rows[0]->getHtml());
+
+    // Navigate using the 'last' link.
+    $this->clickLink('Go to last page');
+    $session_assert->assertWaitOnAjaxRequest();
+    $rows = $page->findAll('css', 'tbody tr');
+    $this->assertCount(1, $rows);
+    $this->assertStringContainsString('Node 1 content default_value', $rows[0]->getHtml());
+
+    // Make sure the AJAX calls don't change the view_path.
+    $settings = $this->getDrupalSettings();
+    $this->assertEquals($expected_view_path, current($settings['views']['ajaxViews'])['view_path']);
+  }
+
   /**
    * Assert that assets are not loaded twice on a page.
    *
diff --git a/web/core/modules/views/tests/src/FunctionalJavascript/Plugin/views/Handler/FilterTest.php b/web/core/modules/views/tests/src/FunctionalJavascript/Plugin/views/Handler/FilterTest.php
index e669e14c..08c1394b 100644
--- a/web/core/modules/views/tests/src/FunctionalJavascript/Plugin/views/Handler/FilterTest.php
+++ b/web/core/modules/views/tests/src/FunctionalJavascript/Plugin/views/Handler/FilterTest.php
@@ -151,7 +151,7 @@ protected function waitForOnlyContentRows($timeout = 10000) {
 
       foreach ($handler_rows as $handler_row) {
         // Test that all the visible rows are of the 'content' type.
-        if (strpos($handler_row->getAttribute('class'), 'content') === FALSE) {
+        if (!str_contains($handler_row->getAttribute('class'), 'content')) {
           return FALSE;
         }
       }
diff --git a/web/core/modules/views/tests/src/FunctionalJavascript/Plugin/views/Handler/GroupedExposedFilterTest.php b/web/core/modules/views/tests/src/FunctionalJavascript/Plugin/views/Handler/GroupedExposedFilterTest.php
index 9df73f43..79297f3a 100644
--- a/web/core/modules/views/tests/src/FunctionalJavascript/Plugin/views/Handler/GroupedExposedFilterTest.php
+++ b/web/core/modules/views/tests/src/FunctionalJavascript/Plugin/views/Handler/GroupedExposedFilterTest.php
@@ -111,6 +111,23 @@ public function testGroupedFilterValuesUI() {
       $this->assertNotEmpty($weight->find('named', ['option', $value]));
     }
     $this->assertEmpty($weight->find('named', ['option', 5]));
+
+    // Set the date value to a zero value and make sure it's stored.
+    $between_from = $page->findField('options[group_info][group_items][1][value][min]');
+    $between_from->setValue('0');
+    $apply_button = $page->find('css', '.views-ui-dialog button.button--primary');
+    $this->assertNotEmpty($apply_button);
+    $apply_button->press();
+    $web_assert->assertWaitOnAjaxRequest();
+
+    // Open the dialog for the grouped filter.
+    $page->clickLink('Content: Authored on (grouped)');
+    $web_assert->assertWaitOnAjaxRequest();
+
+    // Test that the 'min' field is shown and that it contains the right value.
+    $between_from = $page->findField('options[group_info][group_items][1][value][min]');
+    $this->assertNotEmpty($between_from->isVisible());
+    $this->assertEquals('0', $between_from->getValue());
   }
 
 }
diff --git a/web/core/modules/views/tests/src/Kernel/Entity/RowEntityRenderersTest.php b/web/core/modules/views/tests/src/Kernel/Entity/RowEntityRenderersTest.php
index 881ac391..62f4f0e4 100644
--- a/web/core/modules/views/tests/src/Kernel/Entity/RowEntityRenderersTest.php
+++ b/web/core/modules/views/tests/src/Kernel/Entity/RowEntityRenderersTest.php
@@ -2,10 +2,13 @@
 
 namespace Drupal\Tests\views\Kernel\Entity;
 
+use Drupal\field\Entity\FieldConfig;
+use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\node\Entity\NodeType;
 use Drupal\Tests\views\Kernel\ViewsKernelTestBase;
 use Drupal\user\Entity\User;
+use Drupal\views\Tests\ViewTestData;
 use Drupal\views\Views;
 
 /**
@@ -72,18 +75,18 @@ class RowEntityRenderersTest extends ViewsKernelTestBase {
   /**
    * @var array
    */
-  protected $values;
+  protected array $values;
 
   /**
    * @var array
    */
-  protected $ids;
+  protected array $ids;
 
   /**
    * {@inheritdoc}
    */
   protected function setUp($import_test_views = TRUE): void {
-    parent::setUp();
+    parent::setUp(FALSE);
 
     $this->installEntitySchema('node');
     $this->installEntitySchema('user');
@@ -107,6 +110,17 @@ protected function setUp($import_test_views = TRUE): void {
     $node_type->setDisplaySubmitted(FALSE);
     $node_type->save();
 
+    FieldStorageConfig::create([
+      'entity_type' => 'node',
+      'type' => 'entity_reference',
+      'field_name' => 'field_reference',
+    ])->save();
+    FieldConfig::create([
+      'entity_type' => 'node',
+      'bundle' => 'test',
+      'field_name' => 'field_reference',
+    ])->save();
+
     $this->values = [];
     $this->ids = [];
     $controller = \Drupal::entityTypeManager()->getStorage('node');
@@ -116,6 +130,7 @@ protected function setUp($import_test_views = TRUE): void {
       // Create a node with a different default language each time.
       $default_langcode = $this->langcodes[$langcode_index++];
       $node = $controller->create(['type' => 'test', 'uid' => $this->testAuthor->id(), 'langcode' => $default_langcode]);
+
       // Ensure the default language is processed first.
       $langcodes = array_merge([$default_langcode], array_diff($this->langcodes, [$default_langcode]));
 
@@ -124,10 +139,14 @@ protected function setUp($import_test_views = TRUE): void {
         $this->values[$i][$langcode] = $i . '-' . $langcode . '-' . $this->randomMachineName();
 
         if ($langcode != $default_langcode) {
-          $node->addTranslation($langcode, ['title' => $this->values[$i][$langcode]]);
+          $node->addTranslation($langcode, [
+            'title' => $this->values[$i][$langcode],
+            'field_reference' => ($i + 1) % 3 + 1,
+          ]);
         }
         else {
           $node->setTitle($this->values[$i][$langcode]);
+          $node->set('field_reference', ($i + 1) % 3 + 1);
         }
 
         $node->save();
@@ -138,6 +157,7 @@ protected function setUp($import_test_views = TRUE): void {
         ];
       }
     }
+    ViewTestData::createTestViews(static::class, ['views_test_config']);
   }
 
   /**
@@ -154,6 +174,20 @@ public function testFieldRenderers() {
     $this->checkLanguageRenderers('page_2', $this->values);
   }
 
+  /**
+   * Tests the entity row renderers for relationships.
+   */
+  public function testEntityRenderersRelationship() {
+    $this->checkLanguageRenderersRelationship('page_3', $this->values);
+  }
+
+  /**
+   * Tests the field row renderers for relationships.
+   */
+  public function testFieldRenderersRelationship() {
+    $this->checkLanguageRenderersRelationship('page_4', $this->values);
+  }
+
   /**
    * Tests the row renderer with a revision base table.
    */
@@ -240,6 +274,90 @@ protected function checkLanguageRenderers($display, $values) {
     $this->assertTranslations($display, 'l0', $expected, 'The language specific renderer behaves as expected.');
   }
 
+  /**
+   * Checks language renderer configurations work with relationships.
+   *
+   * The Views with relationships filter and sort a little differently.
+   * First, they filter such that we only consider English nodes when finding
+   * relationships. If we didn't do this, we'd get 27 results in these Views,
+   * which is just way too much. Second, after sorting by the node title, we
+   * sort by the title of the referenced translation to have a predictable
+   * order.
+   *
+   * @param string $display
+   *   Name of display to test with.
+   * @param array $values
+   *   An array of node information which are each an array of node titles
+   *   associated with language keys appropriate for the translation of that
+   *   node.
+   */
+  protected function checkLanguageRenderersRelationship($display, $values) {
+    $expected = [
+      $values[1]['en'],
+      $values[1]['en'],
+      $values[1]['en'],
+      $values[2]['en'],
+      $values[2]['en'],
+      $values[2]['en'],
+      $values[0]['en'],
+      $values[0]['en'],
+      $values[0]['en'],
+    ];
+    $this->assertTranslations($display, '***LANGUAGE_language_content***', $expected, 'The current language renderer behaves as expected.');
+
+    $expected = [
+      $values[1]['l0'],
+      $values[1]['l0'],
+      $values[1]['l0'],
+      $values[2]['l1'],
+      $values[2]['l1'],
+      $values[2]['l1'],
+      $values[0]['en'],
+      $values[0]['en'],
+      $values[0]['en'],
+    ];
+    $this->assertTranslations($display, '***LANGUAGE_entity_default***', $expected, 'The default language renderer behaves as expected.');
+
+    $expected = [
+      $values[1]['en'],
+      $values[1]['l0'],
+      $values[1]['l1'],
+      $values[2]['en'],
+      $values[2]['l0'],
+      $values[2]['l1'],
+      $values[0]['en'],
+      $values[0]['l0'],
+      $values[0]['l1'],
+    ];
+    $this->assertTranslations($display, '***LANGUAGE_entity_translation***', $expected, 'The translation language renderer behaves as expected.');
+
+    $expected = [
+      $values[1][$this->langcodes[0]],
+      $values[1][$this->langcodes[0]],
+      $values[1][$this->langcodes[0]],
+      $values[2][$this->langcodes[0]],
+      $values[2][$this->langcodes[0]],
+      $values[2][$this->langcodes[0]],
+      $values[0][$this->langcodes[0]],
+      $values[0][$this->langcodes[0]],
+      $values[0][$this->langcodes[0]],
+    ];
+    $this->assertTranslations($display, '***LANGUAGE_site_default***', $expected, 'The site default language renderer behaves as expected.');
+
+    $expected = [
+      $values[1]['l0'],
+      $values[1]['l0'],
+      $values[1]['l0'],
+      $values[2]['l0'],
+      $values[2]['l0'],
+      $values[2]['l0'],
+      $values[0]['l0'],
+      $values[0]['l0'],
+      $values[0]['l0'],
+    ];
+    $this->assertTranslations($display, 'l0', $expected, 'The language specific renderer behaves as expected.');
+  }
+
   /**
    * Checks that the view results match the expected values.
    *
@@ -266,7 +384,7 @@ protected function assertTranslations(string $display, string $renderer_id, arra
       if (!empty($view->result[$index])) {
         $build = $view->rowPlugin->render($view->result[$index]);
         $output = \Drupal::service('renderer')->renderRoot($build);
-        $result = strpos($output, $expected_output) !== FALSE;
+        $result = str_contains($output, $expected_output);
         if (!$result) {
           break;
         }
diff --git a/web/core/modules/views/tests/src/Kernel/Entity/ViewEntityDependenciesTest.php b/web/core/modules/views/tests/src/Kernel/Entity/ViewEntityDependenciesTest.php
index 8bf1de11..dd248e21 100644
--- a/web/core/modules/views/tests/src/Kernel/Entity/ViewEntityDependenciesTest.php
+++ b/web/core/modules/views/tests/src/Kernel/Entity/ViewEntityDependenciesTest.php
@@ -80,7 +80,10 @@ protected function setUp($import_test_views = TRUE): void {
       'field_storage' => FieldStorageConfig::loadByName('node', 'body'),
       'bundle' => $content_type->id(),
       'label' => $this->randomMachineName() . '_body',
-      'settings' => ['display_summary' => TRUE],
+      'settings' => [
+        'display_summary' => TRUE,
+        'allowed_formats' => [],
+      ],
     ])->save();
 
     ViewTestData::createTestViews(static::class, ['views_test_config']);
diff --git a/web/core/modules/views/tests/src/Kernel/EventSubscriber/ViewsEntitySchemaSubscriberIntegrationTest.php b/web/core/modules/views/tests/src/Kernel/EventSubscriber/ViewsEntitySchemaSubscriberIntegrationTest.php
index 9164cb3d..8f7f5307 100644
--- a/web/core/modules/views/tests/src/Kernel/EventSubscriber/ViewsEntitySchemaSubscriberIntegrationTest.php
+++ b/web/core/modules/views/tests/src/Kernel/EventSubscriber/ViewsEntitySchemaSubscriberIntegrationTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\views\Kernel\EventSubscriber;
 
+use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeEvent;
 use Drupal\Core\Entity\EntityTypeEvents;
 use Drupal\Tests\system\Functional\Entity\Traits\EntityDefinitionTestTrait;
@@ -83,7 +84,9 @@ protected function setUp($import_test_views = TRUE): void {
     // Install every entity type's schema that wasn't installed in the parent
     // method.
     foreach (array_diff_key($this->entityTypeManager->getDefinitions(), array_flip(['user', 'entity_test'])) as $entity_type_id => $entity_type) {
-      $this->installEntitySchema($entity_type_id);
+      if ($entity_type instanceof ContentEntityTypeInterface) {
+        $this->installEntitySchema($entity_type_id);
+      }
     }
   }
 
diff --git a/web/core/modules/views/tests/src/Kernel/Handler/AreaDisplayLinkTest.php b/web/core/modules/views/tests/src/Kernel/Handler/AreaDisplayLinkTest.php
index 659e1490..c0d22081 100644
--- a/web/core/modules/views/tests/src/Kernel/Handler/AreaDisplayLinkTest.php
+++ b/web/core/modules/views/tests/src/Kernel/Handler/AreaDisplayLinkTest.php
@@ -308,7 +308,9 @@ public function testAreaDisplayLink() {
   protected function assertFormOptions(ViewExecutable $view, string $display_link_id): void {
     $form = [];
     $form_state = new FormState();
-    $view->display_handler->getHandler('header', $display_link_id)->buildOptionsForm($form, $form_state);
+    /** @var \Drupal\views\Plugin\views\area\DisplayLink $display_handler */
+    $display_handler = $view->display_handler->getHandler('header', $display_link_id);
+    $display_handler->buildOptionsForm($form, $form_state);
     $this->assertTrue(isset($form['display_id']['#options']['page_1']));
     $this->assertTrue(isset($form['display_id']['#options']['page_2']));
     $this->assertFalse(isset($form['display_id']['#options']['block_1']));
diff --git a/web/core/modules/views/tests/src/Kernel/Handler/AreaEntityTest.php b/web/core/modules/views/tests/src/Kernel/Handler/AreaEntityTest.php
index 786ebbb7..ba181188 100644
--- a/web/core/modules/views/tests/src/Kernel/Handler/AreaEntityTest.php
+++ b/web/core/modules/views/tests/src/Kernel/Handler/AreaEntityTest.php
@@ -179,7 +179,9 @@ public function doTestRender($entities) {
     $form = [];
     $form_state = (new FormState())
       ->set('type', 'header');
-    $view->display_handler->getHandler('header', 'entity_entity_test')->buildOptionsForm($form, $form_state);
+    /** @var \Drupal\views\Plugin\views\area\DisplayLink $display_handler */
+    $display_handler = $view->display_handler->getHandler('header', 'entity_entity_test');
+    $display_handler->buildOptionsForm($form, $form_state);
     $this->assertTrue(isset($form['view_mode']['#options']['test']), 'Ensure that the test view mode is available.');
     $this->assertTrue(isset($form['view_mode']['#options']['default']), 'Ensure that the default view mode is available.');
   }
diff --git a/web/core/modules/views/tests/src/Kernel/Handler/ArgumentStringTest.php b/web/core/modules/views/tests/src/Kernel/Handler/ArgumentStringTest.php
index 59ab9466..4fbb1f0a 100644
--- a/web/core/modules/views/tests/src/Kernel/Handler/ArgumentStringTest.php
+++ b/web/core/modules/views/tests/src/Kernel/Handler/ArgumentStringTest.php
@@ -50,13 +50,13 @@ public function testGlossary() {
 
     $count_field = 'nid';
     foreach ($view->result as &$row) {
-      if (strpos($view->field['title']->getValue($row), 'a') === 0) {
+      if (str_starts_with($view->field['title']->getValue($row), 'a')) {
         $this->assertEquals(1, $row->{$count_field});
       }
-      if (strpos($view->field['title']->getValue($row), 'b') === 0) {
+      if (str_starts_with($view->field['title']->getValue($row), 'b')) {
         $this->assertEquals(2, $row->{$count_field});
       }
-      if (strpos($view->field['title']->getValue($row), 'c') === 0) {
+      if (str_starts_with($view->field['title']->getValue($row), 'c')) {
         $this->assertEquals(3, $row->{$count_field});
       }
     }
diff --git a/web/core/modules/views/tests/src/Kernel/Handler/FieldCustomTest.php b/web/core/modules/views/tests/src/Kernel/Handler/FieldCustomTest.php
index 2d654592..682d9daf 100644
--- a/web/core/modules/views/tests/src/Kernel/Handler/FieldCustomTest.php
+++ b/web/core/modules/views/tests/src/Kernel/Handler/FieldCustomTest.php
@@ -52,7 +52,7 @@ public function testFieldCustom() {
 
     $this->executeView($view);
 
-    $this->assertEquals($random, $view->style_plugin->getField(0, 'name'));
+    $this->assertSame($random, (string) $view->style_plugin->getField(0, 'name'));
   }
 
   /**
diff --git a/web/core/modules/views/tests/src/Kernel/Handler/FieldDateTest.php b/web/core/modules/views/tests/src/Kernel/Handler/FieldDateTest.php
index cd584e68..40ef275d 100644
--- a/web/core/modules/views/tests/src/Kernel/Handler/FieldDateTest.php
+++ b/web/core/modules/views/tests/src/Kernel/Handler/FieldDateTest.php
@@ -31,6 +31,7 @@ public function schemaDefinition() {
       'unsigned' => TRUE,
       'not null' => FALSE,
       'default' => 0,
+      'size' => 'big',
     ];
     return $schema;
   }
diff --git a/web/core/modules/views/tests/src/Kernel/Handler/FieldEntityLinkTest.php b/web/core/modules/views/tests/src/Kernel/Handler/FieldEntityLinkTest.php
index 7fa2a6a6..51ff1880 100644
--- a/web/core/modules/views/tests/src/Kernel/Handler/FieldEntityLinkTest.php
+++ b/web/core/modules/views/tests/src/Kernel/Handler/FieldEntityLinkTest.php
@@ -143,11 +143,11 @@ protected function doTestEntityLink(AccountInterface $account, $expected_results
             $expected_link = '<a href="' . $path . $destination . '" hreflang="en">' . $info[$template]['label'] . '</a>';
           }
           else {
-            $expected_link = $path;
+            $expected_link = (string) $path;
           }
         }
         $link = $view->style_plugin->getField($index, $info[$template]['field_id']);
-        $this->assertEquals($expected_link, $link);
+        $this->assertSame($expected_link, (string) $link);
       }
       $index++;
     }
diff --git a/web/core/modules/views/tests/src/Kernel/Handler/FieldFieldAccessTestBase.php b/web/core/modules/views/tests/src/Kernel/Handler/FieldFieldAccessTestBase.php
index 6c515446..b963c8d5 100644
--- a/web/core/modules/views/tests/src/Kernel/Handler/FieldFieldAccessTestBase.php
+++ b/web/core/modules/views/tests/src/Kernel/Handler/FieldFieldAccessTestBase.php
@@ -35,7 +35,7 @@ abstract class FieldFieldAccessTestBase extends ViewsKernelTestBase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp($import_test_views = TRUE) {
+  protected function setUp($import_test_views = TRUE): void {
     parent::setUp($import_test_views);
 
     $this->installEntitySchema('user');
diff --git a/web/core/modules/views/tests/src/Kernel/Handler/FieldFieldTest.php b/web/core/modules/views/tests/src/Kernel/Handler/FieldFieldTest.php
index 27428107..d893234e 100644
--- a/web/core/modules/views/tests/src/Kernel/Handler/FieldFieldTest.php
+++ b/web/core/modules/views/tests/src/Kernel/Handler/FieldFieldTest.php
@@ -404,41 +404,41 @@ public function testComplexRender() {
     $this->assertEquals("1, 3", $executable->getStyle()->getField(0, 'field_test_multiple'));
     $this->assertEquals("1", $executable->getStyle()->getField(0, 'field_test_multiple_1'));
     $this->assertEquals("3", $executable->getStyle()->getField(0, 'field_test_multiple_2'));
-    $this->assertEquals($date_formatter->format($this->testUsers[0]->getCreatedTime(), 'custom', 'Y'), $executable->getStyle()->getField(0, 'created'));
-    $this->assertEquals($date_formatter->format($this->testUsers[0]->getCreatedTime(), 'custom', 'H:i:s'), $executable->getStyle()->getField(0, 'created_1'));
-    $this->assertEquals($date_formatter->format($this->testUsers[0]->getCreatedTime(), 'fallback'), $executable->getStyle()->getField(0, 'created_2'));
+    $this->assertEquals($date_formatter->format($this->testUsers[0]->getCreatedTime(), 'custom', 'Y'), trim(strip_tags($executable->getStyle()->getField(0, 'created'))));
+    $this->assertEquals($date_formatter->format($this->testUsers[0]->getCreatedTime(), 'custom', 'H:i:s'), trim(strip_tags($executable->getStyle()->getField(0, 'created_1'))));
+    $this->assertEquals($date_formatter->format($this->testUsers[0]->getCreatedTime(), 'fallback'), trim(strip_tags($executable->getStyle()->getField(0, 'created_2'))));
 
     $this->assertEquals($this->testUsers[1]->getTimeZone(), $executable->getStyle()->getField(1, 'timezone'));
     $this->assertEquals("7, 0", $executable->getStyle()->getField(1, 'field_test_multiple'));
     $this->assertEquals("7", $executable->getStyle()->getField(1, 'field_test_multiple_1'));
     $this->assertEquals("0", $executable->getStyle()->getField(1, 'field_test_multiple_2'));
-    $this->assertEquals($date_formatter->format($this->testUsers[1]->getCreatedTime(), 'custom', 'Y'), $executable->getStyle()->getField(1, 'created'));
-    $this->assertEquals($date_formatter->format($this->testUsers[1]->getCreatedTime(), 'custom', 'H:i:s'), $executable->getStyle()->getField(1, 'created_1'));
-    $this->assertEquals($date_formatter->format($this->testUsers[1]->getCreatedTime(), 'fallback'), $executable->getStyle()->getField(1, 'created_2'));
+    $this->assertEquals($date_formatter->format($this->testUsers[1]->getCreatedTime(), 'custom', 'Y'), trim(strip_tags($executable->getStyle()->getField(1, 'created'))));
+    $this->assertEquals($date_formatter->format($this->testUsers[1]->getCreatedTime(), 'custom', 'H:i:s'), trim(strip_tags($executable->getStyle()->getField(1, 'created_1'))));
+    $this->assertEquals($date_formatter->format($this->testUsers[1]->getCreatedTime(), 'fallback'), trim(strip_tags($executable->getStyle()->getField(1, 'created_2'))));
 
     $this->assertEquals($this->testUsers[2]->getTimeZone(), $executable->getStyle()->getField(2, 'timezone'));
     $this->assertEquals("3, 5", $executable->getStyle()->getField(2, 'field_test_multiple'));
     $this->assertEquals("3", $executable->getStyle()->getField(2, 'field_test_multiple_1'));
     $this->assertEquals("5", $executable->getStyle()->getField(2, 'field_test_multiple_2'));
-    $this->assertEquals($date_formatter->format($this->testUsers[2]->getCreatedTime(), 'custom', 'Y'), $executable->getStyle()->getField(2, 'created'));
-    $this->assertEquals($date_formatter->format($this->testUsers[2]->getCreatedTime(), 'custom', 'H:i:s'), $executable->getStyle()->getField(2, 'created_1'));
-    $this->assertEquals($date_formatter->format($this->testUsers[2]->getCreatedTime(), 'fallback'), $executable->getStyle()->getField(2, 'created_2'));
+    $this->assertEquals($date_formatter->format($this->testUsers[2]->getCreatedTime(), 'custom', 'Y'), trim(strip_tags($executable->getStyle()->getField(2, 'created'))));
+    $this->assertEquals($date_formatter->format($this->testUsers[2]->getCreatedTime(), 'custom', 'H:i:s'), trim(strip_tags($executable->getStyle()->getField(2, 'created_1'))));
+    $this->assertEquals($date_formatter->format($this->testUsers[2]->getCreatedTime(), 'fallback'), trim(strip_tags($executable->getStyle()->getField(2, 'created_2'))));
 
     $this->assertEquals($this->testUsers[3]->getTimeZone(), $executable->getStyle()->getField(3, 'timezone'));
     $this->assertEquals("9, 9", $executable->getStyle()->getField(3, 'field_test_multiple'));
     $this->assertEquals("9", $executable->getStyle()->getField(3, 'field_test_multiple_1'));
     $this->assertEquals("9", $executable->getStyle()->getField(3, 'field_test_multiple_2'));
-    $this->assertEquals($date_formatter->format($this->testUsers[3]->getCreatedTime(), 'custom', 'Y'), $executable->getStyle()->getField(3, 'created'));
-    $this->assertEquals($date_formatter->format($this->testUsers[3]->getCreatedTime(), 'custom', 'H:i:s'), $executable->getStyle()->getField(3, 'created_1'));
-    $this->assertEquals($date_formatter->format($this->testUsers[3]->getCreatedTime(), 'fallback'), $executable->getStyle()->getField(3, 'created_2'));
+    $this->assertEquals($date_formatter->format($this->testUsers[3]->getCreatedTime(), 'custom', 'Y'), trim(strip_tags($executable->getStyle()->getField(3, 'created'))));
+    $this->assertEquals($date_formatter->format($this->testUsers[3]->getCreatedTime(), 'custom', 'H:i:s'), trim(strip_tags($executable->getStyle()->getField(3, 'created_1'))));
+    $this->assertEquals($date_formatter->format($this->testUsers[3]->getCreatedTime(), 'fallback'), trim(strip_tags($executable->getStyle()->getField(3, 'created_2'))));
 
     $this->assertEquals($this->testUsers[4]->getTimeZone(), $executable->getStyle()->getField(4, 'timezone'));
     $this->assertEquals("9, 0", $executable->getStyle()->getField(4, 'field_test_multiple'));
     $this->assertEquals("9", $executable->getStyle()->getField(4, 'field_test_multiple_1'));
     $this->assertEquals("0", $executable->getStyle()->getField(4, 'field_test_multiple_2'));
-    $this->assertEquals($date_formatter->format($this->testUsers[4]->getCreatedTime(), 'custom', 'Y'), $executable->getStyle()->getField(4, 'created'));
-    $this->assertEquals($date_formatter->format($this->testUsers[4]->getCreatedTime(), 'custom', 'H:i:s'), $executable->getStyle()->getField(4, 'created_1'));
-    $this->assertEquals($date_formatter->format($this->testUsers[4]->getCreatedTime(), 'fallback'), $executable->getStyle()->getField(4, 'created_2'));
+    $this->assertEquals($date_formatter->format($this->testUsers[4]->getCreatedTime(), 'custom', 'Y'), trim(strip_tags($executable->getStyle()->getField(4, 'created'))));
+    $this->assertEquals($date_formatter->format($this->testUsers[4]->getCreatedTime(), 'custom', 'H:i:s'), trim(strip_tags($executable->getStyle()->getField(4, 'created_1'))));
+    $this->assertEquals($date_formatter->format($this->testUsers[4]->getCreatedTime(), 'fallback'), trim(strip_tags($executable->getStyle()->getField(4, 'created_2'))));
   }
 
   /**
@@ -490,6 +490,19 @@ public function testRevisionRender() {
     $this->assertEquals('next entity value', $executable->getStyle()->getField(3, 'name'));
   }
 
+  /**
+   * Tests the token replacement for revision fields.
+   */
+  public function testRevisionTokenRender() {
+    $view = Views::getView('test_field_field_revision_test');
+    $this->executeView($view);
+
+    $this->assertEquals('Replace: 1', $view->getStyle()->getField(0, 'field_test__revision_id_1'));
+    $this->assertEquals('Replace: 2', $view->getStyle()->getField(1, 'field_test__revision_id_1'));
+    $this->assertEquals('Replace: 3', $view->getStyle()->getField(2, 'field_test__revision_id_1'));
+    $this->assertEquals('Replace: 4', $view->getStyle()->getField(3, 'field_test__revision_id_1'));
+  }
+
   /**
    * Tests the result set of a complex revision view.
    */
diff --git a/web/core/modules/views/tests/src/Kernel/Handler/FieldKernelTest.php b/web/core/modules/views/tests/src/Kernel/Handler/FieldKernelTest.php
index fa37204e..7dda16f0 100644
--- a/web/core/modules/views/tests/src/Kernel/Handler/FieldKernelTest.php
+++ b/web/core/modules/views/tests/src/Kernel/Handler/FieldKernelTest.php
@@ -333,7 +333,7 @@ public function testFieldTokens() {
     $output = $renderer->executeInRenderContext(new RenderContext(), function () use ($job_field, $row) {
       return $job_field->advancedRender($row);
     });
-    $this->assertEquals('<h1>&lt;span&gt;' . $random_text . '&lt;/span&gt;</h1>', $output, 'Valid tags are allowed in rewrite templates and token replacements.');
+    $this->assertSame('<h1>&lt;span&gt;' . $random_text . '&lt;/span&gt;</h1>', (string) $output, 'Valid tags are allowed in rewrite templates and token replacements.');
 
     // Verify <script> tags are correctly removed from rewritten text.
     $rewrite_template = '<script>alert("malicious");</script>';
diff --git a/web/core/modules/views/tests/src/Kernel/Handler/FieldRenderedEntityTest.php b/web/core/modules/views/tests/src/Kernel/Handler/FieldRenderedEntityTest.php
index 1c598edc..a1971abf 100644
--- a/web/core/modules/views/tests/src/Kernel/Handler/FieldRenderedEntityTest.php
+++ b/web/core/modules/views/tests/src/Kernel/Handler/FieldRenderedEntityTest.php
@@ -129,7 +129,7 @@ public function testRenderedEntityWithoutField() {
     $renderer->renderPlain($build);
     for ($i = 1; $i <= 3; $i++) {
       $view_field = $view->style_plugin->getField($i - 1, 'rendered_entity');
-      $search_result = strpos($view_field, "Test $i") !== FALSE;
+      $search_result = str_contains($view_field, "Test $i");
       $this->assertFalse($search_result, "The text 'Test $i' not found in the view.");
     }
 
@@ -202,7 +202,7 @@ public function testRenderedEntityWithField() {
     $renderer->renderPlain($build);
     for ($i = 1; $i <= 3; $i++) {
       $view_field = $view->style_plugin->getField($i - 1, 'rendered_entity');
-      $search_result = strpos($view_field, "Test $i") !== FALSE;
+      $search_result = str_contains($view_field, "Test $i");
       $this->assertTrue($search_result, "The text 'Test $i' found in the view.");
     }
 
diff --git a/web/core/modules/views/tests/src/Kernel/Handler/FilterCombineTest.php b/web/core/modules/views/tests/src/Kernel/Handler/FilterCombineTest.php
index 3eaa70af..3afeafd0 100644
--- a/web/core/modules/views/tests/src/Kernel/Handler/FilterCombineTest.php
+++ b/web/core/modules/views/tests/src/Kernel/Handler/FilterCombineTest.php
@@ -285,7 +285,7 @@ public function testNonFieldsRow() {
   /**
    * Tests the Combine field filter using the 'equal' operator.
    *
-   * @covers::opEqual
+   * @covers ::opEqual
    */
   public function testFilterCombineEqual() {
     $view = Views::getView('test_view');
@@ -333,7 +333,7 @@ public function testFilterCombineEqual() {
   /**
    * Tests the Combine field filter using the 'not equal' operator.
    *
-   * @covers::opEqual
+   * @covers ::opEqual
    */
   public function testFilterCombineNotEqual(): void {
     $view = Views::getView('test_view');
diff --git a/web/core/modules/views/tests/src/Kernel/Handler/FilterStringTest.php b/web/core/modules/views/tests/src/Kernel/Handler/FilterStringTest.php
index 291e6585..98e05876 100644
--- a/web/core/modules/views/tests/src/Kernel/Handler/FilterStringTest.php
+++ b/web/core/modules/views/tests/src/Kernel/Handler/FilterStringTest.php
@@ -71,7 +71,7 @@ protected function dataSet() {
   /**
    * Build and return a Page view of the views_test_data table.
    *
-   * @return view
+   * @return \Drupal\views\ViewExecutable
    */
   protected function getBasicPageView() {
     $view = Views::getView('test_view');
diff --git a/web/core/modules/views/tests/src/Kernel/Handler/SortRandomTest.php b/web/core/modules/views/tests/src/Kernel/Handler/SortRandomTest.php
index a1ad7d31..235beb06 100644
--- a/web/core/modules/views/tests/src/Kernel/Handler/SortRandomTest.php
+++ b/web/core/modules/views/tests/src/Kernel/Handler/SortRandomTest.php
@@ -133,7 +133,9 @@ public function testRandomOrderingWithRenderCaching() {
     $result2 = $renderer->renderPlain($build);
 
     // Ensure that the random ordering works and don't produce the same result.
-    $this->assertNotEquals($result, $result2);
+    // We use assertNotSame and cast values to strings since HTML tags are
+    // significant.
+    $this->assertNotSame((string) $result, (string) $result2);
   }
 
 }
diff --git a/web/core/modules/views/tests/src/Kernel/Plugin/DisplayPageTest.php b/web/core/modules/views/tests/src/Kernel/Plugin/DisplayPageTest.php
index d596ea33..86579c6c 100644
--- a/web/core/modules/views/tests/src/Kernel/Plugin/DisplayPageTest.php
+++ b/web/core/modules/views/tests/src/Kernel/Plugin/DisplayPageTest.php
@@ -32,8 +32,6 @@ class DisplayPageTest extends ViewsKernelTestBase {
    * @var array
    */
   protected static $modules = [
-    // @todo Remove this in https://www.drupal.org/node/3219959
-    'block',
     'system',
     'user',
     'field',
diff --git a/web/core/modules/views/tests/src/Kernel/Plugin/RowEntityTest.php b/web/core/modules/views/tests/src/Kernel/Plugin/RowEntityTest.php
index 6b7ebe25..fe1d54a0 100644
--- a/web/core/modules/views/tests/src/Kernel/Plugin/RowEntityTest.php
+++ b/web/core/modules/views/tests/src/Kernel/Plugin/RowEntityTest.php
@@ -3,10 +3,10 @@
 namespace Drupal\Tests\views\Kernel\Plugin;
 
 use Drupal\Core\Form\FormState;
+use Drupal\entity_test\Entity\EntityTest;
+use Drupal\user\Entity\User;
 use Drupal\views\Views;
 use Drupal\Tests\views\Kernel\ViewsKernelTestBase;
-use Drupal\taxonomy\Entity\Vocabulary;
-use Drupal\taxonomy\Entity\Term;
 
 /**
  * Tests the generic entity row plugin.
@@ -22,12 +22,9 @@ class RowEntityTest extends ViewsKernelTestBase {
    * @var array
    */
   protected static $modules = [
-    'taxonomy',
-    'text',
-    'filter',
+    'entity_test',
     'field',
     'system',
-    'node',
     'user',
   ];
 
@@ -42,26 +39,55 @@ class RowEntityTest extends ViewsKernelTestBase {
    * {@inheritdoc}
    */
   protected function setUp($import_test_views = TRUE): void {
-    parent::setUp();
+    parent::setUp($import_test_views);
 
-    $this->installEntitySchema('taxonomy_term');
-    $this->installConfig(['taxonomy']);
+    $this->installEntitySchema('entity_test');
+    $this->installEntitySchema('user');
   }
 
   /**
    * Tests the entity row handler.
    */
   public function testEntityRow() {
-    $vocab = Vocabulary::create(['name' => $this->randomMachineName(), 'vid' => strtolower($this->randomMachineName())]);
-    $vocab->save();
-    $term = Term::create(['name' => $this->randomMachineName(), 'vid' => $vocab->id()]);
-    $term->save();
+    $user = User::create([
+      'name' => 'test user',
+    ]);
+    $user->save();
 
+    $entity_test = EntityTest::create([
+      'user_id' => $user->id(),
+      'name' => 'test entity test',
+    ]);
+    $entity_test->save();
+
+    // Ensure entities have different ids.
+    if ($entity_test->id() == $user->id()) {
+      $entity_test->delete();
+      $entity_test = EntityTest::create([
+        'user_id' => $user->id(),
+        'name' => 'test entity test',
+      ]);
+      $entity_test->save();
+    }
+
+    $view = Views::getView('test_entity_row');
+    $build = $view->preview();
+    $this->render($build);
+
+    $this->assertText('test entity test');
+    $this->assertNoText('Member for');
+
+    // Change the view to use a relationship to render the row.
     $view = Views::getView('test_entity_row');
+    $display = &$view->storage->getDisplay('default');
+    $display['display_options']['row']['type'] = 'entity:user';
+    $display['display_options']['row']['options']['relationship'] = 'user_id';
+    $view->setDisplay('default');
     $build = $view->preview();
     $this->render($build);
 
-    $this->assertText($term->getName(), 'The rendered entity appears as row in the view.');
+    $this->assertNoText('test entity test');
+    $this->assertText('Member for');
 
     // Tests the available view mode options.
     $form = [];
diff --git a/web/core/modules/views/tests/src/Kernel/Plugin/RowRenderCacheTest.php b/web/core/modules/views/tests/src/Kernel/Plugin/RowRenderCacheTest.php
index 6523c40c..2f05f662 100644
--- a/web/core/modules/views/tests/src/Kernel/Plugin/RowRenderCacheTest.php
+++ b/web/core/modules/views/tests/src/Kernel/Plugin/RowRenderCacheTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\views\Kernel\Plugin;
 
+use Drupal\Component\Serialization\Json;
+use Drupal\Component\Utility\Html;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\node\Entity\Node;
 use Drupal\node\Entity\NodeType;
@@ -165,26 +167,26 @@ protected function doTestRenderedOutput(AccountInterface $account, $check_cache
       $counter = $index + 1;
       $expected = "$nid: $counter (just in case: $nid)";
       $counter_output = $view->style_plugin->getField($index, 'counter');
-      $this->assertEquals($expected, $counter_output);
+      $this->assertSame($expected, (string) $counter_output);
 
       $node_url = $node->toUrl()->toString();
       $expected = "<a href=\"$node_url\"><span class=\"da-title\">{$node->label()}</span> <span class=\"counter\">$counter_output</span></a>";
       $output = $view->style_plugin->getField($index, 'title');
-      $this->assertEquals($expected, $output);
+      $this->assertSame($expected, (string) $output);
 
       $expected = $access ? "<a href=\"$node_url/edit?destination=/\" hreflang=\"en\">edit</a>" : "";
       $output = $view->style_plugin->getField($index, 'edit_node');
-      $this->assertEquals($expected, $output);
+      $this->assertSame($expected, (string) $output);
 
       $expected = $access ? "<a href=\"$node_url/delete?destination=/\" hreflang=\"en\">delete</a>" : "";
       $output = $view->style_plugin->getField($index, 'delete_node');
-      $this->assertEquals($expected, $output);
-      $expected = $access ? '  <div class="dropbutton-wrapper"><div class="dropbutton-widget"><ul class="dropbutton">' .
+      $this->assertSame($expected, (string) $output);
+      $expected = $access ? '  <div class="dropbutton-wrapper" data-drupal-ajax-container><div class="dropbutton-widget"><ul class="dropbutton">' .
         '<li><a href="' . $node_url . '/edit?destination=/" hreflang="en">Edit</a></li>' .
-        '<li><a href="' . $node_url . '/delete?destination=/" hreflang="en">Delete</a></li>' .
+        '<li><a href="' . $node_url . '/delete?destination=/" class="use-ajax" data-dialog-type="modal" data-dialog-options="' . Html::escape(Json::encode(['width' => 880])) . '" hreflang="en">Delete</a></li>' .
         '</ul></div></div>' : '';
       $output = $view->style_plugin->getField($index, 'operations');
-      $this->assertEquals($expected, $output);
+      $this->assertSame($expected, (string) $output);
 
       if ($check_cache) {
         $keys = $cache_plugin->getRowCacheKeys($view->result[$index]);
diff --git a/web/core/modules/views/tests/src/Kernel/TestViewsTest.php b/web/core/modules/views/tests/src/Kernel/TestViewsTest.php
index 1b21dfea..7ca4d888 100644
--- a/web/core/modules/views/tests/src/Kernel/TestViewsTest.php
+++ b/web/core/modules/views/tests/src/Kernel/TestViewsTest.php
@@ -45,7 +45,7 @@ public function testDefaultConfig() {
     foreach ($default_config_storage->listAll() as $config_name) {
       // Skip files provided by the config_schema_test module since that module
       // is explicitly for testing schema.
-      if (strpos($config_name, 'config_schema_test') === 0) {
+      if (str_starts_with($config_name, 'config_schema_test')) {
         continue;
       }
 
diff --git a/web/core/modules/views/tests/src/Kernel/TokenReplaceTest.php b/web/core/modules/views/tests/src/Kernel/TokenReplaceTest.php
index 4650bc9a..ecbd549c 100644
--- a/web/core/modules/views/tests/src/Kernel/TokenReplaceTest.php
+++ b/web/core/modules/views/tests/src/Kernel/TokenReplaceTest.php
@@ -4,6 +4,7 @@
 
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Render\BubbleableMetadata;
+use Drupal\views\Tests\ViewTestData;
 use Drupal\views\Views;
 
 /**
@@ -106,6 +107,40 @@ public function testTokenReplacementWithMiniPager() {
     }
   }
 
+  /**
+   * Tests token replacement of [view:total-rows] when pager is disabled.
+   *
+   * It calls "Some" views pager plugin.
+   */
+  public function testTokenReplacementWithSpecificNumberOfItems(): void {
+    $token_handler = \Drupal::token();
+    $view = Views::getView('test_tokens');
+    $view->setDisplay('page_4');
+    $this->executeView($view);
+
+    $total_rows_in_table = ViewTestData::dataSet();
+    $this->assertTrue($view->get_total_rows, 'The query was set to calculate the total number of rows.');
+    $this->assertGreaterThan(3, count($total_rows_in_table));
+
+    $expected = [
+      '[view:label]' => 'Test tokens',
+      '[view:id]' => 'test_tokens',
+      '[view:url]' => $view->getUrl(NULL, 'page_4')
+        ->setAbsolute(TRUE)
+        ->toString(),
+      '[view:total-rows]' => '3',
+    ];
+
+    $base_bubbleable_metadata = BubbleableMetadata::createFromObject($view->storage);
+
+    foreach ($expected as $token => $expected_output) {
+      $bubbleable_metadata = new BubbleableMetadata();
+      $output = $token_handler->replace($token, ['view' => $view], [], $bubbleable_metadata);
+      $this->assertSame($expected_output, $output, sprintf('Token %s replaced correctly.', $token));
+      $this->assertEquals($base_bubbleable_metadata, $bubbleable_metadata);
+    }
+  }
+
   /**
    * Tests core token replacements generated from a view without results.
    */
diff --git a/web/core/modules/views/tests/src/Kernel/ViewExecutableTest.php b/web/core/modules/views/tests/src/Kernel/ViewExecutableTest.php
index 5fa97a39..f44cdc15 100644
--- a/web/core/modules/views/tests/src/Kernel/ViewExecutableTest.php
+++ b/web/core/modules/views/tests/src/Kernel/ViewExecutableTest.php
@@ -395,7 +395,6 @@ protected function assertViewDestroy(ViewExecutable $view): void {
    */
   protected function getProtectedProperty($instance, $property) {
     $reflection = new \ReflectionProperty($instance, $property);
-    $reflection->setAccessible(TRUE);
     return $reflection->getValue($instance);
   }
 
@@ -446,7 +445,7 @@ public function testValidate() {
     $count = 0;
     foreach ($view->displayHandlers as $id => $display) {
       $match = function ($value) use ($display) {
-        return strpos($value, $display->display['display_title']) !== FALSE;
+        return str_contains($value, $display->display['display_title']);
       };
       $this->assertNotEmpty(array_filter($validate[$id], $match), new FormattableMarkup('Error message found for @id display', ['@id' => $id]));
       $count++;
diff --git a/web/core/modules/views/tests/src/Kernel/ViewStorageTest.php b/web/core/modules/views/tests/src/Kernel/ViewStorageTest.php
index dfb67876..ce2726a6 100644
--- a/web/core/modules/views/tests/src/Kernel/ViewStorageTest.php
+++ b/web/core/modules/views/tests/src/Kernel/ViewStorageTest.php
@@ -237,7 +237,6 @@ protected function displayMethodTests() {
     // it.
     $view = $this->controller->create([]);
     $ref_generate_display_id = new \ReflectionMethod($view, 'generateDisplayId');
-    $ref_generate_display_id->setAccessible(TRUE);
     $this->assertEquals('default', $ref_generate_display_id->invoke($view, 'default'), 'The plugin ID for default is always default.');
     $this->assertEquals('feed_1', $ref_generate_display_id->invoke($view, 'feed'), 'The generated ID for the first instance of a plugin type should have an suffix of _1.');
     $view->addDisplay('feed', 'feed title');
diff --git a/web/core/modules/views/tests/src/Kernel/ViewsConfigDependenciesIntegrationTest.php b/web/core/modules/views/tests/src/Kernel/ViewsConfigDependenciesIntegrationTest.php
index 7ca8791d..a3312e03 100644
--- a/web/core/modules/views/tests/src/Kernel/ViewsConfigDependenciesIntegrationTest.php
+++ b/web/core/modules/views/tests/src/Kernel/ViewsConfigDependenciesIntegrationTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\views\Kernel;
 
+use Drupal\Core\Entity\ContentEntityTypeInterface;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\image\Entity\ImageStyle;
@@ -153,7 +154,7 @@ public function testConfigRemovalBaseTable() {
     // the schema for them so we can uninstall them.
     $entities = \Drupal::entityTypeManager()->getDefinitions();
     foreach ($entities as $entity_type_id => $definition) {
-      if ($definition->getProvider() == 'entity_test') {
+      if ($definition instanceof ContentEntityTypeInterface && $definition->getProvider() == 'entity_test') {
         $this->installEntitySchema($entity_type_id);
       }
     }
diff --git a/web/core/modules/views/tests/src/Kernel/ViewsConfigUpdaterTest.php b/web/core/modules/views/tests/src/Kernel/ViewsConfigUpdaterTest.php
index b6f14ccc..ac67671e 100644
--- a/web/core/modules/views/tests/src/Kernel/ViewsConfigUpdaterTest.php
+++ b/web/core/modules/views/tests/src/Kernel/ViewsConfigUpdaterTest.php
@@ -5,6 +5,8 @@
 use Drupal\Core\Config\FileStorage;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
+use Drupal\responsive_image\Entity\ResponsiveImageStyle;
+use Drupal\Tests\responsive_image\Functional\ViewsIntegrationTest;
 use Drupal\views\ViewsConfigUpdater;
 
 /**
@@ -15,32 +17,28 @@
  */
 class ViewsConfigUpdaterTest extends ViewsKernelTestBase {
 
-  /**
-   * The views config updater.
-   *
-   * @var \Drupal\views\ViewsConfigUpdater
-   */
-  protected $configUpdater;
-
   /**
    * {@inheritdoc}
    */
   protected static $modules = [
     'views_config_entity_test',
+    'entity_test',
+    'breakpoint',
     'field',
     'file',
     'image',
+    'responsive_image',
+    'responsive_image_test_module',
   ];
 
   /**
-   * {@inheritdoc}
+   * @covers ::needsResponsiveImageLazyLoadFieldUpdate
    */
-  protected function setUp($import_test_views = TRUE): void {
-    parent::setUp();
-
-    $this->configUpdater = $this->container
+  public function testNeedsResponsiveImageLazyLoadFieldUpdate(): void {
+    $config_updater = $this->container
       ->get('class_resolver')
       ->getInstanceFromDefinition(ViewsConfigUpdater::class);
+    assert($config_updater instanceof ViewsConfigUpdater);
 
     FieldStorageConfig::create([
       'field_name' => 'user_picture',
@@ -53,6 +51,32 @@ protected function setUp($import_test_views = TRUE): void {
       'file_directory' => 'pictures/[date:custom:Y]-[date:custom:m]',
       'bundle' => 'user',
     ])->save();
+
+    // Create a responsive image style.
+    ResponsiveImageStyle::create([
+      'id' => ViewsIntegrationTest::RESPONSIVE_IMAGE_STYLE_ID,
+      'label' => 'Foo',
+      'breakpoint_group' => 'responsive_image_test_module',
+    ]);
+    // Create an image field to be used with a responsive image formatter.
+    FieldStorageConfig::create([
+      'type' => 'image',
+      'entity_type' => 'entity_test',
+      'field_name' => 'bar',
+    ])->save();
+    FieldConfig::create([
+      'entity_type' => 'entity_test',
+      'bundle' => 'entity_test',
+      'field_name' => 'bar',
+    ])->save();
+
+    $test_view = $this->loadTestView('views.view.test_responsive_images');
+    $needs_update = $config_updater->needsResponsiveImageLazyLoadFieldUpdate($test_view);
+    $test_view->save();
+    $this->assertTrue($needs_update);
+
+    $default_display = $test_view->getDisplay('default');
+    self::assertEquals('eager', $default_display['display_options']['fields']['bar']['settings']['image_loading']['attribute']);
   }
 
   /**
@@ -78,94 +102,4 @@ protected function loadTestView($view_id) {
     return $test_view;
   }
 
-  /**
-   * @covers ::needsEntityLinkUrlUpdate
-   */
-  public function testNeedsEntityLinkUrlUpdate() {
-    $test_view = $this->loadTestView('views.view.node_link_update_test');
-    $this->configUpdater->setDeprecationsEnabled(FALSE);
-    $needs_update = $this->configUpdater->needsEntityLinkUrlUpdate($test_view);
-    $this->assertTrue($needs_update);
-  }
-
-  /**
-   * @covers ::needsEntityLinkUrlUpdate
-   */
-  public function testNeedsEntityLinkUrlUpdateDeprecation() {
-    $this->expectDeprecation('The entity link url update for the "node_link_update_test" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2857891.');
-    $test_view = $this->loadTestView('views.view.node_link_update_test');
-    $needs_update = $this->configUpdater->needsEntityLinkUrlUpdate($test_view);
-    $this->assertTrue($needs_update);
-  }
-
-  /**
-   * @covers ::needsOperatorDefaultsUpdate
-   */
-  public function testNeedsOperatorUpdateDefaults() {
-    $test_view = $this->loadTestView('views.view.test_exposed_filters');
-    $this->configUpdater->setDeprecationsEnabled(FALSE);
-    $needs_update = $this->configUpdater->needsOperatorDefaultsUpdate($test_view);
-    $this->assertTrue($needs_update);
-  }
-
-  /**
-   * @covers ::needsOperatorDefaultsUpdate
-   */
-  public function testNeedsOperatorDefaultsUpdateDeprecation() {
-    $this->expectDeprecation('The operator defaults update for the "test_exposed_filters" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.');
-    $test_view = $this->loadTestView('views.view.test_exposed_filters');
-    $needs_update = $this->configUpdater->needsOperatorDefaultsUpdate($test_view);
-    $this->assertTrue($needs_update);
-  }
-
-  /**
-   * @covers ::needsImageLazyLoadFieldUpdate
-   */
-  public function testNeedsImageLazyLoadFieldUpdate() {
-    $test_view = $this->loadTestView('views.view.test_user_multi_value');
-    $needs_update = $this->configUpdater->needsImageLazyLoadFieldUpdate($test_view);
-    $this->assertTrue($needs_update);
-  }
-
-  /**
-   * @covers ::needsMultivalueBaseFieldUpdate
-   */
-  public function testNeedsFieldNamesForMultivalueBaseFieldsUpdate() {
-    $test_view = $this->loadTestView('views.view.test_user_multi_value');
-    $this->configUpdater->setDeprecationsEnabled(FALSE);
-    $needs_update = $this->configUpdater->needsMultivalueBaseFieldUpdate($test_view);
-    $this->assertTrue($needs_update);
-  }
-
-  /**
-   * @covers ::needsMultivalueBaseFieldUpdate
-   */
-  public function testNeedsFieldNamesForMultivalueBaseUpdateFieldsDeprecation() {
-    $this->expectDeprecation('The multivalue base field update for the "test_user_multi_value" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2900684.');
-    $test_view = $this->loadTestView('views.view.test_user_multi_value');
-    $needs_update = $this->configUpdater->needsMultivalueBaseFieldUpdate($test_view);
-    $this->assertTrue($needs_update);
-  }
-
-  /**
-   * @covers ::updateAll
-   */
-  public function testUpdateAll() {
-    $this->expectDeprecation('The entity link url update for the "node_link_update_test" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2857891.');
-    $this->expectDeprecation('The operator defaults update for the "test_exposed_filters" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.');
-    $this->expectDeprecation('The multivalue base field update for the "test_user_multi_value" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2900684.');
-    $view_ids = [
-      'views.view.node_link_update_test',
-      'views.view.test_exposed_filters',
-      'views.view.test_user_multi_value',
-    ];
-
-    foreach ($view_ids as $view_id) {
-      $test_view = $this->loadTestView($view_id);
-      $this->assertTrue($this->configUpdater->updateAll($test_view), "View $view_id should be updated.");
-    }
-
-    // @todo Improve this in https://www.drupal.org/node/3121008.
-  }
-
 }
diff --git a/web/core/modules/views/tests/src/Kernel/ViewsHooksTest.php b/web/core/modules/views/tests/src/Kernel/ViewsHooksTest.php
index 95942b2f..0fcf159d 100644
--- a/web/core/modules/views/tests/src/Kernel/ViewsHooksTest.php
+++ b/web/core/modules/views/tests/src/Kernel/ViewsHooksTest.php
@@ -11,8 +11,8 @@
  * Tests that views hooks are registered when defined in $module.views.inc.
  *
  * @group views
- * @see views_hook_info().
- * @see field_hook_info().
+ *
+ * @see views_hook_info()
  */
 class ViewsHooksTest extends ViewsKernelTestBase {
 
@@ -52,6 +52,13 @@ class ViewsHooksTest extends ViewsKernelTestBase {
    */
   protected $moduleHandler;
 
+  /**
+   * The view storage.
+   *
+   * @var \Drupal\Core\Entity\EntityStorageInterface
+   */
+  protected $viewStorage;
+
   /**
    * {@inheritdoc}
    */
@@ -59,6 +66,7 @@ protected function setUp($import_test_views = TRUE): void {
     parent::setUp();
 
     $this->moduleHandler = $this->container->get('module_handler');
+    $this->viewStorage = $this->container->get('entity_type.manager')->getStorage('view');
   }
 
   /**
@@ -119,4 +127,14 @@ public function testViewsFormMainFormPreRender() {
     $this->assertRaw('<em>unescaped</em>');
   }
 
+  /**
+   * Test that hook_views_invalidate_cache() is called when a view is deleted.
+   */
+  public function testViewsInvalidateCacheOnDelete() {
+    $this->container->get('state')->set('views_hook_test_views_invalidate_cache', FALSE);
+    $view = $this->viewStorage->load('test_view');
+    $view->delete();
+    $this->assertTrue($this->container->get('state')->get('views_hook_test_views_invalidate_cache'));
+  }
+
 }
diff --git a/web/core/modules/views/tests/src/Kernel/ViewsKernelTestBase.php b/web/core/modules/views/tests/src/Kernel/ViewsKernelTestBase.php
index e3af4551..3ab59f3c 100644
--- a/web/core/modules/views/tests/src/Kernel/ViewsKernelTestBase.php
+++ b/web/core/modules/views/tests/src/Kernel/ViewsKernelTestBase.php
@@ -44,7 +44,7 @@ abstract class ViewsKernelTestBase extends KernelTestBase {
    *   to setup some additional stuff, like fields, you need to call false and
    *   then call createTestViews for your own.
    */
-  protected function setUp($import_test_views = TRUE) {
+  protected function setUp($import_test_views = TRUE): void {
     parent::setUp();
 
     $this->installSchema('system', ['sequences']);
diff --git a/web/core/modules/views/tests/src/Kernel/ViewsLegacyTest.php b/web/core/modules/views/tests/src/Kernel/ViewsLegacyTest.php
deleted file mode 100644
index a9b14e2d..00000000
--- a/web/core/modules/views/tests/src/Kernel/ViewsLegacyTest.php
+++ /dev/null
@@ -1,41 +0,0 @@
-<?php
-
-namespace Drupal\Tests\views\Kernel;
-
-use Drupal\KernelTests\KernelTestBase;
-use Drupal\views\Plugin\views\cache\Time;
-use Drupal\views\ViewExecutable;
-use Symfony\Component\HttpFoundation\Request;
-
-/**
- * Tests deprecated views functionality.
- *
- * @group views
- * @group legacy
- */
-class ViewsLegacyTest extends KernelTestBase {
-
-  /**
-   * {@inheritdoc}
-   */
-  protected static $modules = ['views'];
-
-  /**
-   * Tests the Time cache plugin.
-   */
-  public function testTimeCache() {
-    $request = Request::createFromGlobals();
-    $this->expectDeprecation('The request object must not be passed to Drupal\views\Plugin\views\cache\Time::__construct(). It is deprecated in drupal:9.2.0 and is removed from drupal:10.0.0. See https://www.drupal.org/node/3154016');
-    $plugin = new Time([], 'time',
-      \Drupal::service('plugin.manager.views.cache')->getDefinition('time'),
-      \Drupal::service('date.formatter'), $request
-    );
-    $view = $this->prophesize(ViewExecutable::class);
-    $view->getRequest()->willReturn($request);
-    $plugin->view = $view->reveal();
-    $this->assertInstanceOf(Request::class, $plugin->request);
-    $this->expectDeprecation('The request property of Drupal\views\Plugin\views\cache\Time is deprecated in drupal:9.2.0 and is removed from drupal:10.0.0. See https://www.drupal.org/node/3154016');
-    $this->assertSame($request, $plugin->request);
-  }
-
-}
diff --git a/web/core/modules/views/tests/src/Kernel/ViewsTemplateTest.php b/web/core/modules/views/tests/src/Kernel/ViewsTemplateTest.php
index 350c0acf..37a057a7 100644
--- a/web/core/modules/views/tests/src/Kernel/ViewsTemplateTest.php
+++ b/web/core/modules/views/tests/src/Kernel/ViewsTemplateTest.php
@@ -43,7 +43,7 @@ public function testTemplate() {
   }
 
   /**
-   * @covers views_theme_suggestions_container_alter().
+   * @covers views_theme_suggestions_container_alter
    * @throws \Exception
    */
   public function testThemeSuggestionsContainerAlter() {
diff --git a/web/core/modules/views/tests/src/Unit/Controller/ViewAjaxControllerTest.php b/web/core/modules/views/tests/src/Unit/Controller/ViewAjaxControllerTest.php
index d14f6ac5..b20448c2 100644
--- a/web/core/modules/views/tests/src/Unit/Controller/ViewAjaxControllerTest.php
+++ b/web/core/modules/views/tests/src/Unit/Controller/ViewAjaxControllerTest.php
@@ -68,6 +68,8 @@ class ViewAjaxControllerTest extends UnitTestCase {
    * {@inheritdoc}
    */
   protected function setUp(): void {
+    parent::setUp();
+
     $this->viewStorage = $this->createMock('Drupal\Core\Entity\EntityStorageInterface');
     $this->executableFactory = $this->getMockBuilder('Drupal\views\ViewExecutableFactory')
       ->disableOriginalConstructor()
@@ -182,12 +184,12 @@ public function testAccessDeniedView() {
    */
   public function testAjaxView() {
     $request = new Request();
-    $request->request->set('view_name', 'test_view');
-    $request->request->set('view_display_id', 'page_1');
-    $request->request->set('view_path', '/test-page');
-    $request->request->set('_wrapper_format', 'ajax');
-    $request->request->set('ajax_page_state', 'drupal.settings[]');
-    $request->request->set('type', 'article');
+    $request->query->set('view_name', 'test_view');
+    $request->query->set('view_display_id', 'page_1');
+    $request->query->set('view_path', '/test-page');
+    $request->query->set('_wrapper_format', 'ajax');
+    $request->query->set('ajax_page_state', 'drupal.settings[]');
+    $request->query->set('type', 'article');
 
     [$view, $executable] = $this->setupValidMocks();
 
@@ -211,18 +213,18 @@ public function testAjaxView() {
    */
   public function testAjaxViewViewPathNoSlash() {
     $request = new Request();
-    $request->request->set('view_name', 'test_view');
-    $request->request->set('view_display_id', 'page_1');
-    $request->request->set('view_path', 'test-page');
-    $request->request->set('_wrapper_format', 'ajax');
-    $request->request->set('ajax_page_state', 'drupal.settings[]');
-    $request->request->set('type', 'article');
+    $request->query->set('view_name', 'test_view');
+    $request->query->set('view_display_id', 'page_1');
+    $request->query->set('view_path', 'test-page');
+    $request->query->set('_wrapper_format', 'ajax');
+    $request->query->set('ajax_page_state', 'drupal.settings[]');
+    $request->query->set('type', 'article');
 
     [$view, $executable] = $this->setupValidMocks();
 
     $this->redirectDestination->expects($this->atLeastOnce())
       ->method('set')
-      ->with('test-page?type=article');
+      ->with('/test-page?type=article');
     $this->currentPath->expects($this->once())
       ->method('setPath')
       ->with('/test-page');
@@ -347,7 +349,7 @@ public function testAjaxViewWithPager() {
     $this->assertInstanceOf(ViewAjaxResponse::class, $response);
 
     $commands = $this->getCommands($response);
-    $this->assertEquals('viewsScrollTop', $commands[0]['command']);
+    $this->assertEquals('scrollTop', $commands[0]['command']);
     $this->assertEquals('.js-view-dom-id-' . $dom_id, $commands[0]['selector']);
 
     $this->assertViewResultCommand($response, 1);
@@ -426,7 +428,6 @@ protected function setupValidMocks($use_ajax = self::USE_AJAX) {
    */
   protected function getCommands(ViewAjaxResponse $response) {
     $reflection_property = new \ReflectionProperty('Drupal\views\Ajax\ViewAjaxResponse', 'commands');
-    $reflection_property->setAccessible(TRUE);
     $commands = $reflection_property->getValue($response);
     return $commands;
   }
diff --git a/web/core/modules/views/tests/src/Unit/EventSubscriber/RouteSubscriberTest.php b/web/core/modules/views/tests/src/Unit/EventSubscriber/RouteSubscriberTest.php
index 20a7b36d..9975f9e6 100644
--- a/web/core/modules/views/tests/src/Unit/EventSubscriber/RouteSubscriberTest.php
+++ b/web/core/modules/views/tests/src/Unit/EventSubscriber/RouteSubscriberTest.php
@@ -28,9 +28,9 @@ class RouteSubscriberTest extends UnitTestCase {
   protected $entityTypeManager;
 
   /**
-   * The mocked view storage.
+   * The mocked config entity storage.
    *
-   * @var \Drupal\Tests\views\Kernel\ViewStorageTest|\PHPUnit\Framework\MockObject\MockObject
+   * @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $viewStorage;
 
@@ -52,6 +52,8 @@ class RouteSubscriberTest extends UnitTestCase {
    * {@inheritdoc}
    */
   protected function setUp(): void {
+    parent::setUp();
+
     $this->entityTypeManager = $this->createMock(EntityTypeManagerInterface::class);
     $this->viewStorage = $this->getMockBuilder('Drupal\Core\Config\Entity\ConfigEntityStorage')
       ->disableOriginalConstructor()
@@ -97,7 +99,7 @@ public function testOnAlterRoutes() {
     $route_2 = new Route('test_route/example', ['_controller' => 'Drupal\Tests\Core\Controller\TestController']);
     $collection->add('test_route_2', $route_2);
 
-    $route_event = new RouteBuildEvent($collection, 'views');
+    $route_event = new RouteBuildEvent($collection);
 
     [$display_1, $display_2] = $this->setupMocks();
 
diff --git a/web/core/modules/views/tests/src/Unit/Plugin/Derivative/ViewsLocalTaskTest.php b/web/core/modules/views/tests/src/Unit/Plugin/Derivative/ViewsLocalTaskTest.php
index d875c01a..6ef6dee2 100644
--- a/web/core/modules/views/tests/src/Unit/Plugin/Derivative/ViewsLocalTaskTest.php
+++ b/web/core/modules/views/tests/src/Unit/Plugin/Derivative/ViewsLocalTaskTest.php
@@ -53,6 +53,8 @@ class ViewsLocalTaskTest extends UnitTestCase {
    * {@inheritdoc}
    */
   protected function setUp(): void {
+    parent::setUp();
+
     $this->routeProvider = $this->createMock('Drupal\Core\Routing\RouteProviderInterface');
     $this->state = $this->createMock('Drupal\Core\State\StateInterface');
     $this->viewStorage = $this->createMock('Drupal\Core\Entity\EntityStorageInterface');
diff --git a/web/core/modules/views/tests/src/Unit/Plugin/argument_default/QueryParameterTest.php b/web/core/modules/views/tests/src/Unit/Plugin/argument_default/QueryParameterTest.php
index 8d7aa0f0..3d86373b 100644
--- a/web/core/modules/views/tests/src/Unit/Plugin/argument_default/QueryParameterTest.php
+++ b/web/core/modules/views/tests/src/Unit/Plugin/argument_default/QueryParameterTest.php
@@ -69,6 +69,24 @@ public function providerGetArgument() {
       'blub',
     ];
 
+    $data[] = [
+      ['query_param' => 'test[tier1][tier2][tier3]'],
+      new Request(['test' => ['tier1' => ['tier2' => ['tier3' => 'foo']]]]),
+      'foo',
+    ];
+
+    $data[] = [
+      ['query_param' => 'test[tier1][tier2]'],
+      new Request(['test' => ['tier1' => ['tier2' => ['foo', 'bar']]]]),
+      'foo,bar',
+    ];
+
+    $data[] = [
+      ['query_param' => 'test[tier1][tier2]'],
+      new Request(['test' => 'foo']),
+      NULL,
+    ];
+
     return $data;
   }
 
diff --git a/web/core/modules/views/tests/src/Unit/Plugin/argument_validator/EntityTest.php b/web/core/modules/views/tests/src/Unit/Plugin/argument_validator/EntityTest.php
index b7ccfa00..0b021fd6 100644
--- a/web/core/modules/views/tests/src/Unit/Plugin/argument_validator/EntityTest.php
+++ b/web/core/modules/views/tests/src/Unit/Plugin/argument_validator/EntityTest.php
@@ -129,6 +129,7 @@ public function testValidateArgumentNoAccess() {
 
     $this->assertFalse($this->argumentValidator->validateArgument(3));
     $this->assertFalse($this->argumentValidator->validateArgument(''));
+    $this->assertFalse($this->argumentValidator->validateArgument(NULL));
 
     $this->assertTrue($this->argumentValidator->validateArgument(1));
     $this->assertTrue($this->argumentValidator->validateArgument(2));
@@ -249,6 +250,8 @@ public function testValidateArgumentMultiple() {
     $this->assertFalse($this->argumentValidator->validateArgument('1,2'));
     $this->assertFalse($this->argumentValidator->validateArgument('1+2'));
 
+    $this->assertFalse($this->argumentValidator->validateArgument(NULL));
+
     $options = [];
     $options['access'] = TRUE;
     $options['bundles'] = [];
diff --git a/web/core/modules/views/tests/src/Unit/Plugin/field/FieldPluginBaseTest.php b/web/core/modules/views/tests/src/Unit/Plugin/field/FieldPluginBaseTest.php
index fe159703..a0281672 100644
--- a/web/core/modules/views/tests/src/Unit/Plugin/field/FieldPluginBaseTest.php
+++ b/web/core/modules/views/tests/src/Unit/Plugin/field/FieldPluginBaseTest.php
@@ -8,6 +8,7 @@
 namespace Drupal\Tests\views\Unit\Plugin\field;
 
 use Drupal\Core\GeneratedUrl;
+use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Language\Language;
 use Drupal\Core\Render\Markup;
 use Drupal\Core\Url;
@@ -21,6 +22,7 @@
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\RequestStack;
 use Symfony\Component\Routing\Route;
+use Prophecy\Prophet;
 
 /**
  * @coversDefaultClass \Drupal\views\Plugin\views\field\FieldPluginBase
@@ -51,10 +53,8 @@ class FieldPluginBaseTest extends UnitTestCase {
 
   /**
    * Default configuration for URL output.
-   *
-   * @var array
    */
-  protected $defaultUrlOptions = [
+  protected const DEFAULT_URL_OPTIONS = [
     'absolute' => FALSE,
     'alias' => FALSE,
     'entity' => NULL,
@@ -288,9 +288,9 @@ public function providerTestRenderTrimmedWithMoreLinkAndPath() {
     $data[] = ['<front>', '/%3Cfront%3E'];
 
     // External URL.
-    $data[] = ['https://www.drupal.org', 'https://www.drupal.org'];
-    $data[] = ['http://www.drupal.org', 'http://www.drupal.org'];
-    $data[] = ['www.drupal.org', '/www.drupal.org'];
+    $data[] = ['https://www.example.com', 'https://www.example.com'];
+    $data[] = ['http://www.example.com', 'http://www.example.com'];
+    $data[] = ['www.example.com', '/www.example.com'];
 
     return $data;
   }
@@ -379,8 +379,8 @@ public function providerTestRenderAsLinkWithPathAndOptions() {
     $data[] = ['test-path', ['suffix' => 'test_suffix'], '<a href="/test-path">value</a>', '<a href="/test-path">value</a>test_suffix'];
 
     // External URL.
-    $data[] = ['https://www.drupal.org', [], [], '<a href="https://www.drupal.org">value</a>'];
-    $data[] = ['www.drupal.org', ['external' => TRUE], [], '<a href="http://www.drupal.org">value</a>'];
+    $data[] = ['https://www.example.com', [], [], '<a href="https://www.example.com">value</a>'];
+    $data[] = ['www.example.com', ['external' => TRUE], [], '<a href="http://www.example.com">value</a>'];
     $data[] = ['', ['external' => TRUE], [], 'value'];
 
     return $data;
@@ -406,7 +406,7 @@ public function testRenderAsLinkWithUrlAndOptions(Url $url, $alter, Url $expecte
     $field->field_alias = 'key';
     $row = new ResultRow(['key' => 'value']);
 
-    $expected_url->setOptions($expected_url->getOptions() + $this->defaultUrlOptions);
+    $expected_url->setOptions($expected_url->getOptions() + static::DEFAULT_URL_OPTIONS);
     $expected_link_url->setUrlGenerator($this->urlGenerator);
 
     $expected_url_options = $expected_url->getOptions();
@@ -427,7 +427,7 @@ public function testRenderAsLinkWithUrlAndOptions(Url $url, $alter, Url $expecte
    * @return array
    *   Array of test data.
    */
-  public function providerTestRenderAsLinkWithUrlAndOptions() {
+  public static function providerTestRenderAsLinkWithUrlAndOptions() {
     $data = [];
 
     // Simple path with default options.
@@ -441,35 +441,35 @@ public function providerTestRenderAsLinkWithUrlAndOptions() {
     // Add a fragment.
     $url = Url::fromRoute('test_route');
     $url_with_fragment = Url::fromRoute('test_route');
-    $options = ['fragment' => 'test'] + $this->defaultUrlOptions;
+    $options = ['fragment' => 'test'] + static::DEFAULT_URL_OPTIONS;
     $url_with_fragment->setOptions($options);
     $data[] = [$url, ['fragment' => 'test'], $url_with_fragment, '/test-path#test', clone $url_with_fragment, '<a href="/test-path#test">value</a>'];
 
     // Rel attributes.
     $url = Url::fromRoute('test_route');
     $url_with_rel = Url::fromRoute('test_route');
-    $options = ['attributes' => ['rel' => 'up']] + $this->defaultUrlOptions;
+    $options = ['attributes' => ['rel' => 'up']] + static::DEFAULT_URL_OPTIONS;
     $url_with_rel->setOptions($options);
     $data[] = [$url, ['rel' => 'up'], clone $url, '/test-path', $url_with_rel, '<a href="/test-path" rel="up">value</a>'];
 
     // Target attributes.
     $url = Url::fromRoute('test_route');
     $url_with_target = Url::fromRoute('test_route');
-    $options = ['attributes' => ['target' => '_blank']] + $this->defaultUrlOptions;
+    $options = ['attributes' => ['target' => '_blank']] + static::DEFAULT_URL_OPTIONS;
     $url_with_target->setOptions($options);
     $data[] = [$url, ['target' => '_blank'], $url_with_target, '/test-path', clone $url_with_target, '<a href="/test-path" target="_blank">value</a>'];
 
     // Link attributes.
     $url = Url::fromRoute('test_route');
     $url_with_link_attributes = Url::fromRoute('test_route');
-    $options = ['attributes' => ['foo' => 'bar']] + $this->defaultUrlOptions;
+    $options = ['attributes' => ['foo' => 'bar']] + static::DEFAULT_URL_OPTIONS;
     $url_with_link_attributes->setOptions($options);
     $data[] = [$url, ['link_attributes' => ['foo' => 'bar']], clone $url, '/test-path', $url_with_link_attributes, '<a href="/test-path" foo="bar">value</a>'];
 
     // Manual specified query.
     $url = Url::fromRoute('test_route');
     $url_with_query = Url::fromRoute('test_route');
-    $options = ['query' => ['foo' => 'bar']] + $this->defaultUrlOptions;
+    $options = ['query' => ['foo' => 'bar']] + static::DEFAULT_URL_OPTIONS;
     $url_with_query->setOptions($options);
     $data[] = [$url, ['query' => ['foo' => 'bar']], clone $url_with_query, '/test-path?foo=bar', $url_with_query, '<a href="/test-path?foo=bar">value</a>'];
 
@@ -482,14 +482,14 @@ public function providerTestRenderAsLinkWithUrlAndOptions() {
     // Query specified as option and path.
     $url = Url::fromRoute('test_route')->setOption('query', ['foo' => 'bar']);
     $url_with_query = Url::fromRoute('test_route');
-    $options = ['query' => ['key' => 'value']] + $this->defaultUrlOptions;
+    $options = ['query' => ['key' => 'value']] + static::DEFAULT_URL_OPTIONS;
     $url_with_query->setOptions($options);
     $data[] = [$url, ['query' => ['key' => 'value']], $url_with_query, '/test-path?key=value', clone $url_with_query, '<a href="/test-path?key=value">value</a>'];
 
     // Alias flag.
     $url = Url::fromRoute('test_route');
     $url_without_alias = Url::fromRoute('test_route');
-    $options = ['alias' => TRUE] + $this->defaultUrlOptions;
+    $options = ['alias' => TRUE] + static::DEFAULT_URL_OPTIONS;
     $url_without_alias->setOptions($options);
     $data[] = [$url, ['alias' => TRUE], $url_without_alias, '/test-path', clone $url_without_alias, '<a href="/test-path">value</a>'];
 
@@ -497,15 +497,15 @@ public function providerTestRenderAsLinkWithUrlAndOptions() {
     $language = new Language(['id' => 'fr']);
     $url = Url::fromRoute('test_route');
     $url_with_language = Url::fromRoute('test_route');
-    $options = ['language' => $language] + $this->defaultUrlOptions;
+    $options = ['language' => $language] + static::DEFAULT_URL_OPTIONS;
     $url_with_language->setOptions($options);
     $data[] = [$url, ['language' => $language], $url_with_language, '/fr/test-path', clone $url_with_language, '<a href="/fr/test-path" hreflang="fr">value</a>'];
 
     // Entity flag.
-    $entity = $this->createMock('Drupal\Core\Entity\EntityInterface');
+    $entity = (new Prophet())->prophesize(EntityInterface::class)->reveal();
     $url = Url::fromRoute('test_route');
     $url_with_entity = Url::fromRoute('test_route');
-    $options = ['entity' => $entity] + $this->defaultUrlOptions;
+    $options = ['entity' => $entity] + static::DEFAULT_URL_OPTIONS;
     $url_with_entity->setOptions($options);
     $data[] = [$url, ['entity' => $entity], $url_with_entity, '/test-path', clone $url_with_entity, '<a href="/test-path">value</a>'];
 
@@ -513,7 +513,7 @@ public function providerTestRenderAsLinkWithUrlAndOptions() {
     $entity_type_id = 'node';
     $url = Url::fromRoute('test_route');
     $url_with_entity_type = Url::fromRoute('test_route');
-    $options = ['entity_type' => $entity_type_id] + $this->defaultUrlOptions;
+    $options = ['entity_type' => $entity_type_id] + static::DEFAULT_URL_OPTIONS;
     $url_with_entity_type->setOptions($options);
     $data[] = [$url, ['entity_type' => $entity_type_id], $url_with_entity_type, '/test-path', clone $url_with_entity_type, '<a href="/test-path">value</a>'];
 
@@ -636,7 +636,7 @@ public function testRenderAsExternalLinkWithPathAndTokens($path, $tokens, $link_
   public function providerTestRenderAsExternalLinkWithPathAndTokens() {
     $data = [];
 
-    $data[] = ['{{ foo }}', ['{{ foo }}' => 'http://www.drupal.org'], '<a href="http://www.drupal.org">value</a>', ['context_path' => 'http://www.drupal.org']];
+    $data[] = ['{{ foo }}', ['{{ foo }}' => 'http://www.example.com'], '<a href="http://www.example.com">value</a>', ['context_path' => 'http://www.example.com']];
     $data[] = ['{{ foo }}', ['{{ foo }}' => ''], 'value', ['context_path' => '']];
     $data[] = ['{{ foo }}', ['{{ foo }}' => ''], 'value', ['context_path' => '', 'alter' => ['external' => TRUE]]];
     $data[] = ['{{ foo }}', ['{{ foo }}' => '/test-path/123'], '<a href="/test-path/123">value</a>', ['context_path' => '/test-path/123']];
@@ -777,7 +777,7 @@ public function setLinkGenerator(LinkGeneratorInterface $link_generator) {
 
 }
 
-// @todo Remove as part of https://www.drupal.org/node/2529170.
+// @todo Remove as part of https://www.example.com/node/2529170.
 namespace Drupal\views\Plugin\views\field;
 
 if (!function_exists('base_path')) {
diff --git a/web/core/modules/views/tests/src/Unit/Plugin/field/FieldTest.php b/web/core/modules/views/tests/src/Unit/Plugin/field/FieldTest.php
index f3549c46..c60e9144 100644
--- a/web/core/modules/views/tests/src/Unit/Plugin/field/FieldTest.php
+++ b/web/core/modules/views/tests/src/Unit/Plugin/field/FieldTest.php
@@ -649,6 +649,11 @@ public function providerTestPrepareItemsByDelta() {
     $data[] = [['group_rows' => TRUE, 'delta_limit' => 1, 'delta_first_last' => TRUE], [3]];
     $data[] = [['group_rows' => TRUE, 'delta_offset' => 1, 'delta_first_last' => TRUE], [1, 9]];
 
+    // Test with string values where we would expect integers to be provided.
+    $data[] = [['group_rows' => TRUE, 'delta_limit' => 'All'], [3, 1, 4, 1, 5, 9]];
+    $data[] = [['group_rows' => TRUE, 'delta_limit' => 'three'], [3, 1, 4, 1, 5, 9]];
+    $data[] = [['group_rows' => TRUE, 'delta_limit' => 'three', 'delta_offset' => 'two'], [3, 1, 4, 1, 5, 9]];
+
     return $data;
   }
 
diff --git a/web/core/modules/views/tests/src/Unit/Plugin/pager/PagerPluginBaseTest.php b/web/core/modules/views/tests/src/Unit/Plugin/pager/PagerPluginBaseTest.php
index e2c7c920..72b1e661 100644
--- a/web/core/modules/views/tests/src/Unit/Plugin/pager/PagerPluginBaseTest.php
+++ b/web/core/modules/views/tests/src/Unit/Plugin/pager/PagerPluginBaseTest.php
@@ -28,6 +28,8 @@ class PagerPluginBaseTest extends UnitTestCase {
    * {@inheritdoc}
    */
   protected function setUp(): void {
+    parent::setUp();
+
     $this->pager = $this->getMockBuilder('Drupal\views\Plugin\views\pager\PagerPluginBase')
       ->disableOriginalConstructor()
       ->getMockForAbstractClass();
diff --git a/web/core/modules/views/tests/src/Unit/Plugin/pager/SqlBaseTest.php b/web/core/modules/views/tests/src/Unit/Plugin/pager/SqlBaseTest.php
index 99b65df3..b10019b5 100644
--- a/web/core/modules/views/tests/src/Unit/Plugin/pager/SqlBaseTest.php
+++ b/web/core/modules/views/tests/src/Unit/Plugin/pager/SqlBaseTest.php
@@ -35,6 +35,8 @@ class SqlBaseTest extends UnitTestCase {
   protected $display;
 
   protected function setUp(): void {
+    parent::setUp();
+
     $this->pager = $this->getMockBuilder('Drupal\views\Plugin\views\pager\SqlBase')
       ->disableOriginalConstructor()
       ->getMockForAbstractClass();
diff --git a/web/core/modules/views/tests/src/Unit/Plugin/views/field/EntityOperationsUnitTest.php b/web/core/modules/views/tests/src/Unit/Plugin/views/field/EntityOperationsUnitTest.php
index 160a87ee..c575aa6b 100644
--- a/web/core/modules/views/tests/src/Unit/Plugin/views/field/EntityOperationsUnitTest.php
+++ b/web/core/modules/views/tests/src/Unit/Plugin/views/field/EntityOperationsUnitTest.php
@@ -5,6 +5,7 @@
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Tests\UnitTestCase;
+use Drupal\Tests\views\Traits\ViewsLoggerTestTrait;
 use Drupal\views\Plugin\views\field\EntityOperations;
 use Drupal\views\ResultRow;
 
@@ -14,6 +15,8 @@
  */
 class EntityOperationsUnitTest extends UnitTestCase {
 
+  use ViewsLoggerTestTrait;
+
   /**
    * The entity type manager.
    *
@@ -48,11 +51,13 @@ class EntityOperationsUnitTest extends UnitTestCase {
    * @covers ::__construct
    */
   protected function setUp(): void {
+    parent::setUp();
+
     $this->entityTypeManager = $this->createMock(EntityTypeManagerInterface::class);
     $this->entityRepository = $this->createMock(EntityRepositoryInterface::class);
     $this->languageManager = $this->createMock('\Drupal\Core\Language\LanguageManagerInterface');
 
-    $configuration = [];
+    $configuration = ['entity_type' => 'foo', 'entity field' => 'bar'];
     $plugin_id = $this->randomMachineName();
     $plugin_definition = [
       'title' => $this->randomMachineName(),
@@ -178,6 +183,8 @@ public function testRenderWithoutDestination() {
    * @covers ::render
    */
   public function testRenderWithoutEntity() {
+    $this->setUpMockLoggerWithMissingEntity();
+
     $entity = NULL;
 
     $result = new ResultRow();
diff --git a/web/core/modules/views/tests/src/Unit/Plugin/views/query/MysqlDateSqlTest.php b/web/core/modules/views/tests/src/Unit/Plugin/views/query/MysqlDateSqlTest.php
index 908597e7..bbfc7b63 100644
--- a/web/core/modules/views/tests/src/Unit/Plugin/views/query/MysqlDateSqlTest.php
+++ b/web/core/modules/views/tests/src/Unit/Plugin/views/query/MysqlDateSqlTest.php
@@ -25,7 +25,7 @@ class MysqlDateSqlTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  public function setUp(): void {
+  protected function setUp(): void {
     parent::setUp();
     $this->database = $this->prophesize(Connection::class)->reveal();
   }
@@ -65,7 +65,7 @@ public function providerTestGetDateFormat() {
     return [
       ['foo.field', 'Y-y-M-m', '%Y-%y-%b-%m'],
       ['bar.field', 'n-F D d l', '%c-%M %a %d %W'],
-      ['baz.bar_field', 'j/W/H-h i s A', '%e/%v/%H-%h %i %s %p'],
+      ['baz.bar_field', 'o j/W/H-h i s A', '%x %e/%v/%H-%h %i %s %p'],
     ];
   }
 
diff --git a/web/core/modules/views/tests/src/Unit/Plugin/views/query/PostgresqlDateSqlTest.php b/web/core/modules/views/tests/src/Unit/Plugin/views/query/PostgresqlDateSqlTest.php
index 2ea1f72f..e1892b96 100644
--- a/web/core/modules/views/tests/src/Unit/Plugin/views/query/PostgresqlDateSqlTest.php
+++ b/web/core/modules/views/tests/src/Unit/Plugin/views/query/PostgresqlDateSqlTest.php
@@ -25,7 +25,7 @@ class PostgresqlDateSqlTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  public function setUp(): void {
+  protected function setUp(): void {
     parent::setUp();
     $this->database = $this->prophesize(Connection::class)->reveal();
   }
diff --git a/web/core/modules/views/tests/src/Unit/Plugin/views/query/SqliteDateSqlTest.php b/web/core/modules/views/tests/src/Unit/Plugin/views/query/SqliteDateSqlTest.php
index d07f67cb..3de9ba72 100644
--- a/web/core/modules/views/tests/src/Unit/Plugin/views/query/SqliteDateSqlTest.php
+++ b/web/core/modules/views/tests/src/Unit/Plugin/views/query/SqliteDateSqlTest.php
@@ -25,7 +25,7 @@ class SqliteDateSqlTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  public function setUp(): void {
+  protected function setUp(): void {
     parent::setUp();
     $this->database = $this->prophesize(Connection::class)->reveal();
   }
diff --git a/web/core/modules/views/tests/src/Unit/Routing/ViewPageControllerTest.php b/web/core/modules/views/tests/src/Unit/Routing/ViewPageControllerTest.php
index 456954b3..935fd655 100644
--- a/web/core/modules/views/tests/src/Unit/Routing/ViewPageControllerTest.php
+++ b/web/core/modules/views/tests/src/Unit/Routing/ViewPageControllerTest.php
@@ -6,7 +6,7 @@
 use Drupal\Tests\UnitTestCase;
 use Drupal\views\Routing\ViewPageController;
 use Drupal\Core\Routing\RouteObjectInterface;
-use Symfony\Component\HttpFoundation\ParameterBag;
+use Symfony\Component\HttpFoundation\InputBag;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\Routing\Route;
 
@@ -39,6 +39,8 @@ class ViewPageControllerTest extends UnitTestCase {
    * {@inheritdoc}
    */
   protected function setUp(): void {
+    parent::setUp();
+
     $this->pageController = new ViewPageController();
   }
 
@@ -151,7 +153,7 @@ public function testHandleWithArgumentsOnOverriddenRouteWithUpcasting() {
     $request->attributes->set('display_id', 'page_1');
     // Add the argument to the request.
     $request->attributes->set('test_entity', $this->createMock('Drupal\Core\Entity\EntityInterface'));
-    $raw_variables = new ParameterBag(['test_entity' => 'example_id']);
+    $raw_variables = new InputBag(['test_entity' => 'example_id']);
     $request->attributes->set('_raw_variables', $raw_variables);
     $options = [
       '_view_argument_map' => [
diff --git a/web/core/modules/views/tests/src/Unit/ViewExecutableTest.php b/web/core/modules/views/tests/src/Unit/ViewExecutableTest.php
index 8654aaef..e377b895 100644
--- a/web/core/modules/views/tests/src/Unit/ViewExecutableTest.php
+++ b/web/core/modules/views/tests/src/Unit/ViewExecutableTest.php
@@ -84,9 +84,9 @@ class ViewExecutableTest extends UnitTestCase {
   protected $viewsData;
 
   /**
-   * The mocked display handler.
+   * The mocked display router handler.
    *
-   * @var \Drupal\views\Plugin\views\display\DisplayPluginInterface|\PHPUnit\Framework\MockObject\MockObject
+   * @var \Drupal\views\Plugin\views\display\DisplayRouterInterface|\PHPUnit\Framework\MockObject\MockObject
    */
   protected $displayHandler;
 
diff --git a/web/core/modules/views/tests/src/Unit/ViewsDataTest.php b/web/core/modules/views/tests/src/Unit/ViewsDataTest.php
index 0177af2b..12cf5ac7 100644
--- a/web/core/modules/views/tests/src/Unit/ViewsDataTest.php
+++ b/web/core/modules/views/tests/src/Unit/ViewsDataTest.php
@@ -59,6 +59,8 @@ class ViewsDataTest extends UnitTestCase {
    * {@inheritdoc}
    */
   protected function setUp(): void {
+    parent::setUp();
+
     $this->cacheTagsInvalidator = $this->createMock('Drupal\Core\Cache\CacheTagsInvalidatorInterface');
     $this->cacheBackend = $this->createMock('Drupal\Core\Cache\CacheBackendInterface');
     $this->getContainerWithCacheTagsInvalidator($this->cacheTagsInvalidator);
diff --git a/web/core/modules/views/tests/src/Unit/ViewsHandlerManagerTest.php b/web/core/modules/views/tests/src/Unit/ViewsHandlerManagerTest.php
index d3c803b3..70aeecb9 100644
--- a/web/core/modules/views/tests/src/Unit/ViewsHandlerManagerTest.php
+++ b/web/core/modules/views/tests/src/Unit/ViewsHandlerManagerTest.php
@@ -59,7 +59,6 @@ protected function setupMockedFactory() {
 
     $reflection = new \ReflectionClass($this->handlerManager);
     $property = $reflection->getProperty('factory');
-    $property->setAccessible(TRUE);
     $property->setValue($this->handlerManager, $this->factory);
   }
 
diff --git a/web/core/modules/views/views.info.yml b/web/core/modules/views/views.info.yml
index ed4708f2..eb07d856 100644
--- a/web/core/modules/views/views.info.yml
+++ b/web/core/modules/views/views.info.yml
@@ -1,6 +1,6 @@
 name: Views
 type: module
-description: 'Create customized lists and queries from your database.'
+description: 'Provides a framework to fetch information from the database and to display it in different formats.'
 package: Core
 version: VERSION
 dependencies:
diff --git a/web/core/modules/views/views.libraries.yml b/web/core/modules/views/views.libraries.yml
index a191767b..08ff2d16 100644
--- a/web/core/modules/views/views.libraries.yml
+++ b/web/core/modules/views/views.libraries.yml
@@ -14,6 +14,11 @@ views.ajax:
     - core/drupal
     - core/drupalSettings
     - core/once
-    - core/jquery.once.bc
     - core/internal.jquery.form
     - core/drupal.ajax
+
+views.responsive-grid:
+  version: VERSION
+  css:
+    layout:
+      css/views-responsive-grid.css: {}
diff --git a/web/core/modules/views/views.module b/web/core/modules/views/views.module
index 5f511d33..17698310 100644
--- a/web/core/modules/views/views.module
+++ b/web/core/modules/views/views.module
@@ -198,18 +198,12 @@ function views_theme($existing, $type, $theme, $path) {
         }
       }
 
-      // If there is no theme function for the given theme definition, it must
-      // be a template file. By default this file is located in the /templates
+      // By default any templates for a module are located in the /templates
       // directory of the module's folder. If a module wants to define its own
       // location it has to set register_theme of the plugin to FALSE and
       // implement hook_theme() by itself.
-      if (!function_exists('theme_' . $def['theme'])) {
-        $hooks[$def['theme']]['path'] .= '/templates';
-        $hooks[$def['theme']]['template'] = Html::cleanCssIdentifier($def['theme']);
-      }
-      else {
-        $hooks[$def['theme']]['function'] = 'theme_' . $def['theme'];
-      }
+      $hooks[$def['theme']]['path'] .= '/templates';
+      $hooks[$def['theme']]['template'] = Html::cleanCssIdentifier($def['theme']);
     }
   }
 
@@ -811,21 +805,6 @@ function views_local_tasks_alter(&$local_tasks) {
   $local_task->alterLocalTasks($local_tasks);
 }
 
-/**
- * Implements hook_ENTITY_TYPE_delete().
- */
-function views_view_delete(EntityInterface $entity) {
-  // Rebuild the routes in case there is a routed display.
-  $executable = Views::executableFactory()->get($entity);
-  $executable->initDisplay();
-  foreach ($executable->displayHandlers as $display) {
-    if ($display->getRoutedDisplay()) {
-      \Drupal::service('router.builder')->setRebuildNeeded();
-      break;
-    }
-  }
-}
-
 /**
  * Implements hook_ENTITY_TYPE_presave().
  */
diff --git a/web/core/modules/views/views.post_update.php b/web/core/modules/views/views.post_update.php
index 66291097..60e024b6 100644
--- a/web/core/modules/views/views.post_update.php
+++ b/web/core/modules/views/views.post_update.php
@@ -31,77 +31,66 @@ function views_removed_post_updates() {
     'views_post_update_make_placeholders_translatable' => '9.0.0',
     'views_post_update_limit_operator_defaults' => '9.0.0',
     'views_post_update_remove_core_key' => '9.0.0',
+    'views_post_update_field_names_for_multivalue_fields' => '10.0.0',
+    'views_post_update_configuration_entity_relationships' => '10.0.0',
+    'views_post_update_rename_default_display_setting' => '10.0.0',
+    'views_post_update_remove_sorting_global_text_field' => '10.0.0',
+    'views_post_update_title_translations' => '10.0.0',
+    'views_post_update_sort_identifier' => '10.0.0',
+    'views_post_update_provide_revision_table_relationship' => '10.0.0',
+    'views_post_update_image_lazy_load' => '10.0.0',
   ];
 }
 
 /**
- * Update field names for multi-value base fields.
+ * Update Views config schema to make boolean custom titles translatable.
  */
-function views_post_update_field_names_for_multivalue_fields(&$sandbox = NULL) {
-  /** @var \Drupal\views\ViewsConfigUpdater $view_config_updater */
-  $view_config_updater = \Drupal::classResolver(ViewsConfigUpdater::class);
-  $view_config_updater->setDeprecationsEnabled(FALSE);
-  return \Drupal::classResolver(ConfigEntityUpdater::class)->update($sandbox, 'view', function ($view) use ($view_config_updater) {
-    return $view_config_updater->needsMultivalueBaseFieldUpdate($view);
-  }, TRUE);
-}
-
-/**
- * Clear errors caused by relationships to configuration entities.
- */
-function views_post_update_configuration_entity_relationships() {
-  // Empty update to clear Views data.
+function views_post_update_boolean_custom_titles(?array &$sandbox = NULL): void {
+  // Empty update to rebuild Views config schema.
 }
 
 /**
- * Rename the setting for showing the default display to 'default_display'.
+ * Add eager load option to all oembed type field configurations.
  */
-function views_post_update_rename_default_display_setting() {
-  $config = \Drupal::configFactory()->getEditable('views.settings');
-  $config->set('ui.show.default_display', $config->get('ui.show.master_display'));
-  $config->clear('ui.show.master_display');
-  $config->save();
-}
-
-/**
- * Clear caches due to removal of sorting for global custom text field.
- */
-function views_post_update_remove_sorting_global_text_field() {
-  // Empty post-update hook.
-}
-
-/**
- * Rebuild routes to fix view title translations.
- */
-function views_post_update_title_translations() {
-  \Drupal::service('router.builder')->setRebuildNeeded();
+function views_post_update_oembed_eager_load(?array &$sandbox = NULL): void {
+  /** @var \Drupal\views\ViewsConfigUpdater $view_config_updater */
+  $view_config_updater = \Drupal::classResolver(ViewsConfigUpdater::class);
+  \Drupal::classResolver(ConfigEntityUpdater::class)->update($sandbox, 'view', function (ViewEntityInterface $view) use ($view_config_updater): bool {
+    return $view_config_updater->needsOembedEagerLoadFieldUpdate($view);
+  });
 }
 
 /**
- * Add the identifier option to all sort handler configurations.
+ * Add lazy load options to all responsive image type field configurations.
  */
-function views_post_update_sort_identifier(?array &$sandbox = NULL): void {
+function views_post_update_responsive_image_lazy_load(?array &$sandbox = NULL): void {
   /** @var \Drupal\views\ViewsConfigUpdater $view_config_updater */
   $view_config_updater = \Drupal::classResolver(ViewsConfigUpdater::class);
   \Drupal::classResolver(ConfigEntityUpdater::class)->update($sandbox, 'view', function (ViewEntityInterface $view) use ($view_config_updater): bool {
-    return $view_config_updater->needsSortFieldIdentifierUpdate($view);
+    return $view_config_updater->needsResponsiveImageLazyLoadFieldUpdate($view);
   });
 }
 
 /**
- * Clear caches due to adding a relationship from revision table to base table.
+ * Update timestamp formatter settings for views.
  */
-function views_post_update_provide_revision_table_relationship() {
-  // Empty post-update hook.
+function views_post_update_timestamp_formatter(array &$sandbox = NULL): void {
+  /** @var \Drupal\views\ViewsConfigUpdater $view_config_updater */
+  $view_config_updater = \Drupal::classResolver(ViewsConfigUpdater::class);
+  \Drupal::classResolver(ConfigEntityUpdater::class)->update($sandbox, 'view', function (ViewEntityInterface $view) use ($view_config_updater): bool {
+    return $view_config_updater->needsTimestampFormatterTimeDiffUpdate($view);
+  });
 }
 
 /**
- * Add lazy load options to all image type field configurations.
+ * Fix '-revision_id' replacement token syntax.
  */
-function views_post_update_image_lazy_load(?array &$sandbox = NULL): void {
+function views_post_update_fix_revision_id_part(&$sandbox = NULL): void {
   /** @var \Drupal\views\ViewsConfigUpdater $view_config_updater */
   $view_config_updater = \Drupal::classResolver(ViewsConfigUpdater::class);
-  \Drupal::classResolver(ConfigEntityUpdater::class)->update($sandbox, 'view', function (ViewEntityInterface $view) use ($view_config_updater): bool {
-    return $view_config_updater->needsImageLazyLoadFieldUpdate($view);
-  }, TRUE);
+  $view_config_updater->setDeprecationsEnabled(FALSE);
+  \Drupal::classResolver(ConfigEntityUpdater::class)
+    ->update($sandbox, 'view', function (ViewEntityInterface $view) use ($view_config_updater) {
+      return $view_config_updater->needsRevisionFieldHyphenFix($view);
+    });
 }
diff --git a/web/core/modules/views/views.services.yml b/web/core/modules/views/views.services.yml
index 591cd6c9..4ce2d449 100644
--- a/web/core/modules/views/views.services.yml
+++ b/web/core/modules/views/views.services.yml
@@ -59,6 +59,8 @@ services:
   views.views_data:
     class: Drupal\views\ViewsData
     arguments: ['@cache.default', '@config.factory', '@module_handler', '@language_manager']
+    tags:
+      - { name: backend_overridable }
   views.views_data_helper:
     class: Drupal\views\ViewsDataHelper
     arguments: ['@views.views_data']
diff --git a/web/core/modules/views/views.theme.inc b/web/core/modules/views/views.theme.inc
index d2cb65e4..948f4590 100644
--- a/web/core/modules/views/views.theme.inc
+++ b/web/core/modules/views/views.theme.inc
@@ -524,6 +524,13 @@ function template_preprocess_views_view_table(&$variables) {
         // Improves accessibility of complex tables.
         $variables['header'][$field]['attributes']['id'] = Html::getUniqueId('view-' . $field . '-table-column');
       }
+      // aria-sort is a WAI-ARIA property that indicates if items in a table
+      // or grid are sorted in ascending or descending order. See
+      // http://www.w3.org/TR/wai-aria/states_and_properties#aria-sort
+      if ($active == $field) {
+        $variables['header'][$field]['attributes']['aria-sort'] = ($order == 'asc') ? 'ascending' : 'descending';
+      }
+
       // Check if header label is not empty.
       if (!empty($variables['header'][$field]['content'])) {
         $has_header_labels = TRUE;
@@ -794,6 +801,37 @@ function template_preprocess_views_view_grid(&$variables) {
   $variables['items'] = $items;
 }
 
+/**
+ * Prepares variables for views grid - responsive style templates.
+ *
+ * Default template: views-view-grid-responsive.html.twig.
+ *
+ * @param array $variables
+ *   An associative array containing:
+ *   - view: The view object.
+ *   - rows: An array of row items. Each row is an array of content.
+ */
+function template_preprocess_views_view_grid_responsive(&$variables) {
+  $variables['options'] = $variables['view']->style_plugin->options;
+  $view = $variables['view'];
+
+  $items = [];
+
+  foreach ($variables['rows'] as $id => $item) {
+
+    $attribute = new Attribute();
+    if ($row_class = $view->style_plugin->getRowClass($id)) {
+      $attribute->addClass($row_class);
+    }
+    $items[$id] = [
+      'content' => $item,
+      'attributes' => $attribute,
+    ];
+  }
+
+  $variables['items'] = $items;
+}
+
 /**
  * Prepares variables for views unformatted rows templates.
  *
diff --git a/web/core/modules/views/views.views.inc b/web/core/modules/views/views.views.inc
index 2f88006d..e24be15b 100644
--- a/web/core/modules/views/views.views.inc
+++ b/web/core/modules/views/views.views.inc
@@ -520,7 +520,7 @@ function views_field_default_views_data(FieldStorageConfigInterface $field_stora
     }
     else {
       $group = t('@group (historical data)', ['@group' => $group_name]);
-      $field_alias = $field_name . '-revision_id';
+      $field_alias = $field_name . '__revision_id';
     }
 
     $data[$table_alias][$field_alias] = [
@@ -578,7 +578,7 @@ function views_field_default_views_data(FieldStorageConfigInterface $field_stora
       'field_name' => $field_name,
       'entity_type' => $entity_type_id,
       // Provide a real field for group by.
-      'real field' => $field_alias . '_' . $real_field,
+      'real field' => $field_name . '_' . $real_field,
       'additional fields' => $add_fields,
       // Default the element type to div, let the UI change it if necessary.
       'element type' => 'div',
